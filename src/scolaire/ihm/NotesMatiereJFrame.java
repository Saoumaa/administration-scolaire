/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scolaire.ihm;

import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import traitement.GeneratePDFBilletin;
import traitement.GeneratePDFListeDesEleves;

/**
 *
 * @author obama
 */
public class NotesMatiereJFrame extends javax.swing.JFrame {

    /**
     * Creates new form AnneeJFrame
     */
    public NotesMatiereJFrame() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("log.png")));
        connectComboAnnee();
        connectComboTrimestre();
        connectComboClasse();
        affichetableEleve();
//        affichetableMatiere();
//        affichetableNotes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelBoutons = new javax.swing.JPanel();
        jButtonNouveau = new javax.swing.JButton();
        jButtonEnregistrer = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jPanelEntete = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanelTableau = new javax.swing.JPanel();
        jPanelChamps3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        eleveTable = new javax.swing.JTable();
        jPanelChamps4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        int1TextField = new javax.swing.JTextField();
        int2TextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        int3TextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        int4TextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        compoTextField = new javax.swing.JTextField();
        devTextField = new javax.swing.JTextField();
        jPanelBoutons1 = new javax.swing.JPanel();
        jButtonNouveau1 = new javax.swing.JButton();
        jButtonEnregistrer1 = new javax.swing.JButton();
        jButtonModifier1 = new javax.swing.JButton();
        jButtonSupprimer1 = new javax.swing.JButton();
        jButtonFermer1 = new javax.swing.JButton();
        jPanelChamps2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        anneeComboBox = new javax.swing.JComboBox();
        trimestreComboBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        classeComboBox = new javax.swing.JComboBox();
        jLabelMatiere = new javax.swing.JLabel();
        matiereComboBox = new javax.swing.JComboBox();

        jButtonNouveau.setText("Nouveau");
        jButtonNouveau.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNouveauMouseClicked(evt);
            }
        });

        jButtonEnregistrer.setText("Enregistrer");

        jButtonModifier.setText("Modifier");

        jButtonSupprimer.setText("Supprimer");

        jButtonFermer.setText("Fermer");
        jButtonFermer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonFermerMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelBoutonsLayout = new javax.swing.GroupLayout(jPanelBoutons);
        jPanelBoutons.setLayout(jPanelBoutonsLayout);
        jPanelBoutonsLayout.setHorizontalGroup(
            jPanelBoutonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBoutonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonNouveau)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonEnregistrer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonModifier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSupprimer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonFermer)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelBoutonsLayout.setVerticalGroup(
            jPanelBoutonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBoutonsLayout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(jPanelBoutonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNouveau)
                    .addComponent(jButtonEnregistrer)
                    .addComponent(jButtonModifier)
                    .addComponent(jButtonSupprimer)
                    .addComponent(jButtonFermer)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanelEntete.setBackground(new java.awt.Color(0, 102, 51));

        jLabel1.setFont(new java.awt.Font("Wide Latin", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("REPORT DE NOTES PAR MATIERE");

        javax.swing.GroupLayout jPanelEnteteLayout = new javax.swing.GroupLayout(jPanelEntete);
        jPanelEntete.setLayout(jPanelEnteteLayout);
        jPanelEnteteLayout.setHorizontalGroup(
            jPanelEnteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelEnteteLayout.setVerticalGroup(
            jPanelEnteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEnteteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelChamps3.setBackground(new java.awt.Color(204, 255, 204));
        jPanelChamps3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Elèves", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 0))); // NOI18N

        eleveTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "N°", "Matricule", "Nom", "Prénom", "Sexe"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        eleveTable.setColumnSelectionAllowed(true);
        eleveTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eleveTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(eleveTable);
        eleveTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout jPanelChamps3Layout = new javax.swing.GroupLayout(jPanelChamps3);
        jPanelChamps3.setLayout(jPanelChamps3Layout);
        jPanelChamps3Layout.setHorizontalGroup(
            jPanelChamps3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanelChamps3Layout.setVerticalGroup(
            jPanelChamps3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 130, Short.MAX_VALUE))
        );

        jPanelChamps4.setBackground(new java.awt.Color(204, 255, 204));
        jPanelChamps4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Notes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 0))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Int 1");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Int 2");

        int1TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                int1TextFieldFocusGained(evt);
            }
        });
        int1TextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int1TextFieldMouseClicked(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Int 3");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Int 4");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Dev");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("Compo");

        javax.swing.GroupLayout jPanelChamps4Layout = new javax.swing.GroupLayout(jPanelChamps4);
        jPanelChamps4.setLayout(jPanelChamps4Layout);
        jPanelChamps4Layout.setHorizontalGroup(
            jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChamps4Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelChamps4Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(int1TextField))
                    .addGroup(jPanelChamps4Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(int4TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                .addGroup(jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChamps4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(int2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChamps4Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(devTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChamps4Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(compoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChamps4Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(int3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanelChamps4Layout.setVerticalGroup(
            jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8)
                    .addComponent(int1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(int2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(int3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(compoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(int4TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(devTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jButtonNouveau1.setText("Nouveau");
        jButtonNouveau1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNouveau1MouseClicked(evt);
            }
        });

        jButtonEnregistrer1.setText("Enregistrer");
        jButtonEnregistrer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnregistrer1ActionPerformed(evt);
            }
        });

        jButtonModifier1.setText("Modifier");
        jButtonModifier1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifier1ActionPerformed(evt);
            }
        });

        jButtonSupprimer1.setText("Supprimer");
        jButtonSupprimer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimer1ActionPerformed(evt);
            }
        });

        jButtonFermer1.setText("Fermer");
        jButtonFermer1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonFermer1MouseClicked(evt);
            }
        });
        jButtonFermer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermer1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBoutons1Layout = new javax.swing.GroupLayout(jPanelBoutons1);
        jPanelBoutons1.setLayout(jPanelBoutons1Layout);
        jPanelBoutons1Layout.setHorizontalGroup(
            jPanelBoutons1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBoutons1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonNouveau1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jButtonEnregistrer1)
                .addGap(18, 18, 18)
                .addComponent(jButtonModifier1)
                .addGap(31, 31, 31)
                .addComponent(jButtonSupprimer1)
                .addGap(41, 41, 41)
                .addComponent(jButtonFermer1)
                .addGap(26, 26, 26))
        );
        jPanelBoutons1Layout.setVerticalGroup(
            jPanelBoutons1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBoutons1Layout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(jPanelBoutons1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNouveau1)
                    .addComponent(jButtonEnregistrer1)
                    .addComponent(jButtonModifier1)
                    .addComponent(jButtonSupprimer1)
                    .addComponent(jButtonFermer1)))
        );

        javax.swing.GroupLayout jPanelTableauLayout = new javax.swing.GroupLayout(jPanelTableau);
        jPanelTableau.setLayout(jPanelTableauLayout);
        jPanelTableauLayout.setHorizontalGroup(
            jPanelTableauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelChamps4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelChamps3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelTableauLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelBoutons1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelTableauLayout.setVerticalGroup(
            jPanelTableauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTableauLayout.createSequentialGroup()
                .addComponent(jPanelChamps4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelChamps3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelBoutons1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanelChamps2.setBackground(new java.awt.Color(204, 255, 204));
        jPanelChamps2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Paramètres", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 0))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Année");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Trimestre");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Classe");

        jLabelMatiere.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelMatiere.setText("Matière");

        javax.swing.GroupLayout jPanelChamps2Layout = new javax.swing.GroupLayout(jPanelChamps2);
        jPanelChamps2.setLayout(jPanelChamps2Layout);
        jPanelChamps2Layout.setHorizontalGroup(
            jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChamps2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(anneeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelChamps2Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(classeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChamps2Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(trimestreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelChamps2Layout.createSequentialGroup()
                        .addComponent(jLabelMatiere, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(matiereComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChamps2Layout.setVerticalGroup(
            jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(anneeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trimestreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelMatiere)
                        .addComponent(matiereComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(classeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(3, 3, 3))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelEntete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelTableau, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelChamps2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(1, 10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelEntete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelChamps2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelTableau, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonFermerMouseClicked
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonFermerMouseClicked

    private void jButtonNouveauMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNouveauMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonNouveauMouseClicked

    private void jButtonNouveau1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNouveau1MouseClicked
        // TODO add your handling code here:
        effacer();
    }//GEN-LAST:event_jButtonNouveau1MouseClicked

    private void jButtonFermer1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonFermer1MouseClicked
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonFermer1MouseClicked

    private void jButtonEnregistrer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnregistrer1ActionPerformed
        // TODO add your handling code here:
        double int1 = Double.parseDouble(int1TextField.getText());
        double int2 = Double.parseDouble(int2TextField.getText());
        double int3 = Double.parseDouble(int3TextField.getText());
        double int4 = Double.parseDouble(int4TextField.getText());
        double dev = Double.parseDouble(devTextField.getText());
        double compo = Double.parseDouble(compoTextField.getText());
        // Récupération du début de l'année sélectionné dans la combo anneeComboBox
        String anneeSelected = anneeComboBox.getSelectedItem().toString();
        // Récupération du libellé du trimestre sélectionné dans la combo trimestreComboBox
        String trimestreSelected = trimestreComboBox.getSelectedItem().toString();

        // Récupération de l'id de l'élève depuis la table eleveTable
        int idElev = 0;
        String idEleveGp = "";
        int idMat = 0;

        if (controlerSaisirNote(int1TextField.getText(), int2TextField.getText(), int3TextField.getText(), devTextField.getText(), devTextField.getText(), compoTextField.getText())) /*  */ // Calcul de la moyenne des interrogations
        {
            JOptionPane.showMessageDialog(this, "Int1, Int2, Int3, Int4, Dev et Compo doivent être compris entre 0 et 20");
        } else {
            double moyInt = moyenneInterro(int1TextField.getText(), int2TextField.getText(), int3TextField.getText(), devTextField.getText());
            // Calcul de la moyenne des interrogations
            double moyMat = moyenneMatiere(devTextField.getText(), compoTextField.getText(), moyInt);
            int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
            JOptionPane.showMessageDialog(this, "Id de l'année sélectionnée " + idAnnee);
            int idGp = returnIdGpByEleveGpByAnnee(idElev, idAnnee);
            JOptionPane.showMessageDialog(this, "Id du Groupe Pédagogique " + idGp);
            int idCoef = returnIdCoefByGpAndMat(idGp, idMat);
            JOptionPane.showMessageDialog(this, "Id de la matière sélectionnée " + idMat);
            int idTrim = returnIdTrimestreByLibelleTrimestre(trimestreSelected, idAnnee);
            JOptionPane.showMessageDialog(this, "Id du trimestre sélectionnée " + idTrim);
            int valCoef = returnValCoefByGpAndMat(idGp, idMat);
            int idBul = returnIdBulletinByEleveGpAndTrimes(idElev, idTrim);
            if (!int1TextField.getText().isEmpty()) {
                updateInt1ByIdBulAndIdCoef(int1, idBul, idCoef);
            }
            if (!int2TextField.getText().isEmpty()) {
                updateInt1ByIdBulAndIdCoef(int2, idBul, idCoef);
            }
            if (!int3TextField.getText().isEmpty()) {
                updateInt1ByIdBulAndIdCoef(int3, idBul, idCoef);
            }
            if (!int4TextField.getText().isEmpty()) {
                updateInt1ByIdBulAndIdCoef(int4, idBul, idCoef);
            }
            if (!devTextField.getText().isEmpty()) {
                updateInt1ByIdBulAndIdCoef(dev, idBul, idCoef);
            }

            if (!compoTextField.getText().isEmpty()) {
                updateDevByIdBulAndIdCoef(compo, idBul, idCoef);
            }
            updateMoyIntIdBulAndIdCoef(moyInt, idBul, idCoef);// Insertion de la moyenne des interros
            updateMoy20IdBulAndIdCoef(moyMat, idBul, idCoef);// Insertion de la moyenne dans la matière
            double moyCoef = moyMat * valCoef; // Calcul de la moyenne coefficiée
            updateMoyCoefIdBulAndIdCoef(moyCoef, idBul, idCoef);// Insertion de la moyenne coefficiée
//            affichetableNotes(idElev);
        }

        /*      if (returnIdBulletinByEleveGpAndTrimes(idEleveGp, trimestreSelected) == 0) {//S'il n'existe pas de détailsBulletin pour la matière
         if (returnIdBulletinByEleveGpAndTrimes(idEleveGp, trimestreSelected) == 0) { //S'il n'existe pas de Bulletin du trimestre pour l'élève
         // Insérer un enregistrement de bulletin
         ajouterBulletin(idElev, idTrim, idAnnee);
         // Insérer un enregistrement de détailsBulletin
         ajouterDetailsBulletin(idElev, idTrim, idAnnee, idCoef);
         affichetableNotes();
         } else {
         // Insérer un enregistrement de détailsBulletin
         ajouterDetailsBulletin(idElev, idTrim, idAnnee, idCoef);
         affichetableNotes();
         }
         } else {
         // Modifier l'enregistrement de détailsBulletin concerné
         affichetableNotes();
         }
         */
        /*
         String req1 = "insert into DETAILS_BULLETIN (ID_DETAILS_BULLETIN,INT1, INT2, INT3, INT4, DEV_NOTE, COMPO_NOTE, ID_BULLETIN, ID_COEF) values ('" + 1 + "','" + Int1 + "','" + Int2 + "','" + Int3 + "''" + Int4 + "','" + Dev + "','" + Compo + "','" + 1 + "','" + 1 + "')";
         //        String req2 = "insert into SERIE (ID_SERIE,LIB_SERIE) values ('" + Int1 + "','" + serie + "')";
         try {
         //Class.forName(pilote);
         Connection connexion = Maconnexion.seconnecter();
         Statement instruction = connexion.createStatement();
         int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment enregistrer ces informations?");
         if (Conf == 0) {
         instruction.executeQuery(req1);
         //                instruction.executeQuery(req2);
         JOptionPane.showMessageDialog(this, "Enregistrement effectué avec succès");
         } else {
         JOptionPane.showMessageDialog(this, "Enregistrement annulé");
         }

         connexion.close();
         } catch (Exception e) {
         JOptionPane.showMessageDialog(this, "erreur: " + e);

         }
         */
    }//GEN-LAST:event_jButtonEnregistrer1ActionPerformed

    private void jButtonModifier1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifier1ActionPerformed
        // TODO add your handling code here:
        // Récupération du début de l'année sélectionné dans la combo anneeComboBox
        String anneeSelected = anneeComboBox.getSelectedItem().toString();
        // Récupération du libellé du trimestre sélectionné dans la combo trimestreComboBox
        String trimestreSelected = trimestreComboBox.getSelectedItem().toString();
        // Récupération de l'id de l'élève depuis la table eleveTable
        int ligne = eleveTable.getSelectedRow();
        Object idElevObj = eleveTable.getValueAt(ligne, 0);
        String idEleveGp = String.valueOf(idElevObj);
        int idElev = Integer.parseInt(idEleveGp);
        // Récupération de l'id de la matière depuis la table matiereTable
        String idMatStr = null;
        int idMat = 0;
        controleSections(anneeSelected, trimestreSelected, idEleveGp, idMatStr);
        // Calcul de la moyenne des interrogations
        double moyInt = moyenneInterro(int1TextField.getText(), int2TextField.getText(), int3TextField.getText(), devTextField.getText());
        // Calcul de la moyenne des interrogations
        double moyMat = moyenneMatiere(devTextField.getText(), compoTextField.getText(), moyInt);

//        affichetableNotes(idElev);
        effacer();
    }//GEN-LAST:event_jButtonModifier1ActionPerformed

    private void jButtonFermer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermer1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonFermer1ActionPerformed

    private void jButtonSupprimer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimer1ActionPerformed
        // TODO add your handling code here:
        // Récupération de l'id de l'élève depuis la table eleveTable
        int ligneEle = eleveTable.getSelectedRow();
        Object idElevObj = eleveTable.getValueAt(ligneEle, 0);
        String idEleveGp = String.valueOf(idElevObj);
        int idElev = Integer.parseInt(idEleveGp);
 
        int idNote = 0;//Integer.parseInt(Note);
        String req = "delete from DETAILS_BULLETIN where  ID_DETAILS_BULLETIN='" + idNote + "'";
     int idMat = 0;
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer cette note ?");
            if (Conf == 0) {
                instruction.executeQuery(req);
                effacer();
//                affichetableNotes(idElev);
                JOptionPane.showMessageDialog(this, "Suppression effectuée avec succès");
            } else {
                JOptionPane.showMessageDialog(this, "Suppression annulée");
            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }//GEN-LAST:event_jButtonSupprimer1ActionPerformed

    private void int1TextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_int1TextFieldFocusGained
        // TODO add your handling code here:
        // Récupération du début de l'année sélectionné dans la combo anneeComboBox
  /*     String anneeSelected = anneeComboBox.getSelectedItem().toString();
         // Récupération du libellé du trimestre sélectionné dans la combo trimestreComboBox
         String trimestreSelected = trimestreComboBox.getSelectedItem().toString();
         // Récupération de l'id de l'élève depuis la table eleveTable
         int ligne = eleveTable.getSelectedRow();
         Object idElevObj = eleveTable.getValueAt(ligne, 0);
         String idEleveGp = String.valueOf(idElevObj);
         int idElev = Integer.parseInt(idEleveGp);
         // Récupération de l'id de la matière depuis la table matiereTable
         int idMat = 0;
         int ligneMat = notesTable.getSelectedRow();
         Object idMatObj = notesTable.getValueAt(ligneMat, 0);
         String idMatStr = String.valueOf(idMatObj);
         idMat = Integer.parseInt(idMatStr);
         controleSections(anneeSelected, trimestreSelected, idEleveGp, idMatStr); */
    }//GEN-LAST:event_int1TextFieldFocusGained

    private void int1TextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_int1TextFieldMouseClicked
        // TODO add your handling code here:
  /*      // Récupération du début de l'année sélectionné dans la combo anneeComboBox
         String anneeSelected = anneeComboBox.getSelectedItem().toString();
         // Récupération du libellé du trimestre sélectionné dans la combo trimestreComboBox
         String trimestreSelected = trimestreComboBox.getSelectedItem().toString();
         // Récupération de l'id de l'élève depuis la table eleveTable
         int ligne = eleveTable.getSelectedRow();
         Object idElevObj = eleveTable.getValueAt(ligne, 0);
         String idEleveGp = String.valueOf(idElevObj);
         int idElev = Integer.parseInt(idEleveGp);
         // Récupération de l'id de la matière depuis la table matiereTable
         int idMat = 0;
         int ligneMat = notesTable.getSelectedRow();
         Object idMatObj = notesTable.getValueAt(ligneMat, 0);
         String idMatStr = String.valueOf(idMatObj);
         idMat = Integer.parseInt(idMatStr);
         controleSections(anneeSelected, trimestreSelected, idEleveGp, idMatStr);*/
    }//GEN-LAST:event_int1TextFieldMouseClicked

    private void eleveTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eleveTableMouseClicked
        // TODO add your handling code here:
        // Récupération de l'id de l'élève depuis la table eleveTable
        int ligne = eleveTable.getSelectedRow();
        Object idElevObj = eleveTable.getValueAt(ligne, 0);
        String idEleveGp = String.valueOf(idElevObj);
        int idElev = Integer.parseInt(idEleveGp);
//        affichetableNotes(idElev);
    }//GEN-LAST:event_eleveTableMouseClicked
    //méthode permettant de mettre la note de int1

    public void updateInt1ByIdBulAndIdCoef(double int1, int idBull, int idCoef) {
        String appreProf = "";
        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  INT1 ='" + int1 + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

    //méthode permettant de mettre la note de int2
    public void updateInt2ByIdBulAndIdCoef(double int2, int idBull, int idCoef) {
        String appreProf = "";
        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  INT2 = '" + int2 + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

    //méthode permettant de mettre la note de int3
    public void updateInt3ByIdBulAndIdCoef(double int3, int idBull, int idCoef) {
        String appreProf = "";
        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  INT3 = '" + int3 + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

    //méthode permettant de mettre la note de int4
    public void updateInt4ByIdBulAndIdCoef(double int4, int idBull, int idCoef) {
        String appreProf = "";
        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  INT4 = '" + int4 + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

    //méthode permettant de mettre la note de dev
    public void updateDevByIdBulAndIdCoef(double dev, int idBull, int idCoef) {
        String appreProf = "";
        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  DEV_NOTE = '" + dev + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

    //méthode permettant de mettre la Moyenne sur 20
    public void updateMoy20IdBulAndIdCoef(double moy20, int idBull, int idCoef) {
        String appreProf = "";
//        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  MOY_20 = '" + moy20 + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }
//méthode permettant de mettre la Moyenne des interros

    public void updateMoyIntIdBulAndIdCoef(double moyInt, int idBull, int idCoef) {
        String appreProf = "";
//        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  MOY_INT = '" + moyInt + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

    //méthode permettant de mettre la Moyenne coeffice
    public void updateMoyCoefIdBulAndIdCoef(double moyCoef, int idBull, int idCoef) {
        String appreProf = "";
//        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  MOY_COEF = '" + moyCoef + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

    //méthode permettant de mettre l'appréciation du Prof
    public void persisterAppreProfIdBulAndIdCoef(String appreProf, int idBull, int idCoef) {
//        String appreProf = "";
//        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  APPRE_SIGNE_PROF = '" + appreProf + "' where  ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

    //méthode permettant de remplir le JCombobox cbprofile
    private void connectComboAnnee() {
        anneeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
        try {
            // Class.forName(pilote);
            // Connection connexion = DriverManager.getConnection("jdbc:mysql://localhost:3306/base_sgd","root","");*/
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery("SELECT * FROM ANNEE_SCOLAIRE");
            while (resultat.next()) {
                String anneeDebut = resultat.getString("ANNEE_DEBUT");
                String anneeFin = resultat.getString("ANNEE_FIN");
                String libAnnee = anneeDebut + " - " + anneeFin;
                Object obj = (Object) libAnnee;
                anneeComboBox.addItem(obj);
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
    }

    //méthode permettant de remplir le JCombobox anneeComboBox 
    private void connectComboTrimestre() {
        trimestreComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
        try {
            // Class.forName(pilote);
            // Connection connexion = DriverManager.getConnection("jdbc:mysql://localhost:3306/base_sgd","root","");*/
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultatTrim = instruction.executeQuery("SELECT LIB_TRIMES FROM TRIMESTRE");
            while (resultatTrim.next()) {
                String libTrim = resultatTrim.getString("LIB_TRIMES");
                Object obj2 = (Object) libTrim;
                trimestreComboBox.addItem(obj2);
            }
            //fermeture de la connexion
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
    }

    //méthode permettant de remplir le JCombobox anneeComboBox 
    private void connectComboClasse() {
        classeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery("SELECT LIB_GROUP_PEDAG FROM GROUP_PEDAG");
            while (resultat.next()) {
                String libGp = resultat.getString("LIB_GROUP_PEDAG");
                Object obj2 = (Object) libGp;
                classeComboBox.addItem(obj2);
            }
            //fermeture de la connexion
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
    }

    //méthode pour l'affichge du tableau Eleve'
    private void affichetableEleve() {
//       String pilote = "oracle.jdbc.driver.OracleDriver";
        DefaultTableModel model = new DefaultTableModel();
        eleveTable.setModel(model); //affectation du model au tableau
        model.addColumn("N°");
        model.addColumn("Matricule");
        model.addColumn("Nom");
        model.addColumn("Prénom");
        model.addColumn("Sexe");
        TableColumn column, column1, column2, column3, column4 = null;
        column = eleveTable.getColumnModel().getColumn(0);
        column.setPreferredWidth(90); //
        column1 = eleveTable.getColumnModel().getColumn(1);
        column1.setPreferredWidth(300); //
        column2 = eleveTable.getColumnModel().getColumn(2);
        column2.setPreferredWidth(300); //
        column3 = eleveTable.getColumnModel().getColumn(3);
        column3.setPreferredWidth(300); //
        column4 = eleveTable.getColumnModel().getColumn(4);
        column4.setPreferredWidth(200); //
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery("select ID_ELEVE_GP ,MATRICULE_EL, NOM_EL, PRENOM_EL, SEXE from ELEVE, ELEVE_GP, GROUP_PEDAG"
                    + " where ELEVE_GP.ID_ELEVE = ELEVE.ID_ELEVE "
                    + " and ELEVE_GP.ID_GROUP_PEDAG = GROUP_PEDAG.ID_GROUP_PEDAG"
                    + " and GROUP_PEDAG.LIB_GROUP_PEDAG = '" + classeComboBox.getSelectedItem().toString() + "'");
            int i = 0;
            while (resultat.next()) {
                String idEl = resultat.getString("ID_ELEVE_GP");
                String mleEl = resultat.getString("MATRICULE_EL");
                String nomEl = resultat.getString("NOM_EL");
                String prenomEl = resultat.getString("PRENOM_EL");
                String sexeEl = resultat.getString("SEXE");
                model.addRow(new Object[]{idEl, mleEl, nomEl, prenomEl, sexeEl});
                i++;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur3: " + e);

        }
    }

    //méthode pour l'affichge du tableau Matiere'
    /*
     private void affichetableMatiere() {
     //       String pilote = "oracle.jdbc.driver.OracleDriver";
     DefaultTableModel model = new DefaultTableModel();
     matiereTable.setModel(model); //affectation du model au tableau
     model.addColumn("Code");
     model.addColumn("Matière");

     TableColumn column, column1 = null;
     column = matiereTable.getColumnModel().getColumn(0);
     column.setPreferredWidth(90); //
     column1 = matiereTable.getColumnModel().getColumn(1);
     column1.setPreferredWidth(300); //
     try {
     Connection connexion = Maconnexion.seconnecter();
     Statement instruction = connexion.createStatement();
     ResultSet resultat = instruction.executeQuery("select ID_MATIERE,LIB_MATIERE from MATIERE ");
     int i = 0;
     while (resultat.next()) {
     String idMat = resultat.getString("ID_MATIERE");
     String libMat = resultat.getString("LIB_MATIERE");
     model.addRow(new Object[]{idMat, libMat});
     i++;
     }
     } catch (Exception e) {
     JOptionPane.showMessageDialog(this, "erreur3: " + e);
     }
     }
     */
    private void effacer() {
        int1TextField.setText("");
        int2TextField.setText("");
        int3TextField.setText("");
        int4TextField.setText("");
        devTextField.setText("");
        compoTextField.setText("");
    }

    private void enregNotes() {

    }

    /*
     * ***********************************************
     * moyenneInterro() PERMET DE CALCULER LES MOYENNE* 
     *  D'INTERRO DANS UNE MATIERE                   *
     *************************************************
     */
    public double moyenneInterro(String int1, String int2, String int3, String int4) {
        int nbreInterro = 4;
        double moyInterro = 0.0;
        if (int1.equals("") && int2.equals("") && int3.equals("") && int4.equals("")) {
            moyInterro = -1;
        } else {
            if (int1.equals("")) {
                int1 = "0";
                nbreInterro--;
            }
            if (int2.equals("")) {
                int2 = "0";
                nbreInterro--;
            }
            if (int3.equals("")) {
                int3 = "0";
                nbreInterro--;
            }
            if (int4.equals("")) {
                int4 = "0";
                nbreInterro--;
            }
            moyInterro = (Double.parseDouble(int1) + Double.parseDouble(int2) + Double.parseDouble(int3) + Double.parseDouble(int4)) / nbreInterro;
        }
        System.out.println("Moyenne d'interrogation " + moyInterro);
        return moyInterro;
    }

    /*
     * *******************************************************************
     * moyenneMatiere() PERMET DE CALCULER LA MOYENNE D'UN ELEVE DANS UNE*
     * MATIERE                                                           * 
     *********************************************************************
     */
    public double moyenneMatiere(String noteDev, String noteCompo, double moyInterro) {
        double moyMatiere = 0;
        int diviseurMoy = 1;
        if (moyInterro == -1 && noteDev.equals("") && noteCompo.equals("")) {
            moyMatiere = -1;
        } else {
            diviseurMoy = 3;
            if (moyInterro == -1) {
                diviseurMoy--;
            }
            if (noteCompo.equals("")) {
                noteCompo = "0";
                diviseurMoy--;
            }
            if (noteDev.equals("")) {
                noteDev = "0";
                diviseurMoy--;
            }
            moyMatiere = (Double.parseDouble(noteCompo) + Double.parseDouble(noteDev) + moyInterro) / diviseurMoy;
        }
        return moyMatiere;
    }
    /*
     * *******************************************************************
     * moyenneMatiere() PERMET DE CALCULER LA MOYENNE D'UN ELEVE DANS UNE*
     * MATIERE                                                           * 
     *********************************************************************
     */

    public double moyenneCoefMatiere(int idCoef, String noteDev, String noteCompo, double moyInterro) {
        double moyMatiere = 0;
        int diviseurMoy = 1;
        if (moyInterro == -1 && noteDev.equals("") && noteCompo.equals("")) {
            moyMatiere = -1;
        } else {
            diviseurMoy = 3;
            if (moyInterro == -1) {
                diviseurMoy--;
            }
            if (noteCompo.equals("")) {
                noteCompo = "0";
                diviseurMoy--;
            }
            if (noteDev.equals("")) {
                noteDev = "0";
                diviseurMoy--;
            }
            moyMatiere = (Double.parseDouble(noteCompo) + Double.parseDouble(noteDev) + moyInterro) / diviseurMoy;
        }
        return moyMatiere;
    }

    public int returnIdGpByEleveGpByAnnee(int idElev, int idAnnee) {

        // Récupération de l'id de l'année à partir de son champ  ANNEE_DEBUT
        int idGp = 0;// Récupération de l'id du groupe pédagogique de l'élève sélectionné
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select ID_GROUP_PEDAG  from  ELEVE_GP where ID_ELEVE_GP =  '" + idElev + "' and ID_ANNEE_SCOLAIRE = '" + idAnnee + "' ";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
            while (idGpTrouve.next()) {
                idGp = idGpTrouve.getInt("ID_GROUP_PEDAG");
            }
            JOptionPane.showMessageDialog(this, "ID GP " + idGp);
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdGpByEleveGpByAnnee: " + e);
        }
        return idGp;
    }

    public int returnIdSerieByElevGpByAnnee(int idGp) {

        // Récupération de l'id de l'année à partir de son champ  ANNEE_DEBUT
        int idSerie = 0;// Récupération de l'id du groupe pédagogique de l'élève sélectionné
        // Récupération de l'id de la série du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select ID_GROUP_PEDAG, ID_SERIE   from  GROUP_PEDAG where ID_GROUP_PEDAG =  '" + idGp + "' ";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
            while (idGpTrouve.next()) {
                idSerie = idGpTrouve.getInt("ID_SERIE");
            }
            JOptionPane.showMessageDialog(this, "ID Série " + idSerie);
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdSerieByElevGpByAnnee: " + e);
        }
        return idSerie;
    }

    public int returnIdPromoByEleveGpByAnnee(int idGp) {

        int idPromo = 0;
        // Récupération de l'id de la promotion du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select ID_GROUP_PEDAG, ID_PROMO  from  GROUP_PEDAG where ID_GROUP_PEDAG =  '" + idGp + "' ";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
            while (idGpTrouve.next()) {
                idPromo = idGpTrouve.getInt("ID_PROMO");
            }
            JOptionPane.showMessageDialog(this, "ID Promo " + idPromo);
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdPromoByEleveGpByAnnee: " + e);
        }
        return idPromo;
    }

    public int returnIdCoefByGpAndMat(int idGp, int idMat) {
//        int idPromo = 0;
//        int idSerie = 0;
        // Récupération de l'id du coefficient de la matière choisie connaissant la promotion et la série
        int idCoef = 0;
//      String reqRameneCoef = "select *  from  COEFFICIENT where ID_MATIERE =  '" + idMat + "' and ID_SERIE = '" + idSerie + "' and ID_PROMO = '" + idPromo + "'  ";
        String reqRameneCoef = "select ID_COEF  from  COEFFICIENT where ID_MATIERE =  '" + idMat + "' and ID_GROUP_PEDAG = '" + idGp + "'  ";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idCoefTrouve = instruction.executeQuery(reqRameneCoef);
            while (idCoefTrouve.next()) {
                idCoef = idCoefTrouve.getInt("ID_COEF");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdCoefByGpAndMat: " + e);
        }
        return idCoef;
    }

    public int returnValCoefByGpAndMat(int idGp, int idMat) {
        // Récupération de l'id du coefficient de la matière choisie connaissant la promotion et la série
        int valCoef = 0;
//      String reqRameneCoef = "select *  from  COEFFICIENT where ID_MATIERE =  '" + idMat + "' and ID_SERIE = '" + idSerie + "' and ID_PROMO = '" + idPromo + "'  ";
        String reqRameneCoef = "select *  from  COEFFICIENT where ID_MATIERE =  '" + idMat + "' and ID_GROUP_PEDAG = '" + idGp + "'  ";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet valCoefTrouve = instruction.executeQuery(reqRameneCoef);
            while (valCoefTrouve.next()) {
                valCoef = valCoefTrouve.getInt("VALEUR_COEF");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnValCoefByGpAndMat: " + e);
        }
        return valCoef;
    }

    public int returnIdBulletinByEleveGpAndTrimes(int idEleveGp, int idTrimes) {
        int idBul = 0;
        String reqRameneBulletin = "select ID_BULLETIN  from BULLETIN_NOTE where ID_ELEVE_GP =  '" + idEleveGp + "' and ID_TRIMES = '" + idTrimes + "'";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idBulTrouve = instruction.executeQuery(reqRameneBulletin);
            while (idBulTrouve.next()) {
                idBul = idBulTrouve.getInt("ID_BULLETIN");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdBulletinByEleveGpAndTrimes: " + e);
        }
        return idBul;
    }

    public int returnIdDetailsBulletinByCoef(int idCoef) {
        String reqRameneDetailsBulletin = "select *  from  DETAILS_BULLETIN where ID_COEF =  '" + idCoef + "'";

        return 0;
    }

    public int returnIdAnneeByAnneeDebut(String anneeDebut) {
        // Récupération de l'id de l'année à partir de son champ  ANNEE_DEBUT
        int idAnnee = 0;
        String reqRameneIdAnnee = "select ID_ANNEE_SCOLAIRE from ANNEE_SCOLAIRE where ANNEE_DEBUT = '" + anneeDebut + "'";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idAnneeTrouve = instruction.executeQuery(reqRameneIdAnnee);
            while (idAnneeTrouve.next()) {
                idAnnee = idAnneeTrouve.getInt("ID_ANNEE_SCOLAIRE");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idAnnee;
    }

    public int returnIdTrimestreByLibelleTrimestre(String libelleTrimestre, int idAnnee) {

        // Récupération de l'id du trimestre à partir de son libellé et de l'id de l'année
        String reqRameneIdTrimesAnnee = "select ID_TRIMES from TRIMESTRE where LIB_TRIMES =  '" + libelleTrimestre + "' and ID_ANNEE_SCOLAIRE = '" + idAnnee + "' ";

        int idTrimestre = 0;
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idTrimestreTrouve = instruction.executeQuery(reqRameneIdTrimesAnnee);
            while (idTrimestreTrouve.next()) {
                idTrimestre = idTrimestreTrouve.getInt("ID_TRIMES");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idTrimestre;
    }

    public int returnIdBulletinByEleveGpAndTrimestre(int eleve, int trimestre) {
        // Récupération du bulletin à partir de l'élève et du trimestre selectionné
        int idBulletin = 0;
        String reqRameneBulletinTrim = "select * from BULLETIN_NOTE where ID_ELEVE_GP =  '" + eleve + "' and ID_TRIMES = '" + trimestre + "' ";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idBulletinTrouve = instruction.executeQuery(reqRameneBulletinTrim);
            while (idBulletinTrouve.next()) {
                idBulletin = idBulletinTrouve.getInt("ID_BULLETIN");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdBulletinByEleveGpAndTrimestre : " + e);
        }
        return idBulletin;
    }

    public int returnIdDetailsBulletinByBulletinAndTrimestre(int bulletin, int matiere) {
        // Récupération de l'id du detailsBulletin à partir de de l'élève et de la matière selectionnée
        int idDetailsBulletin = 0;
        String reqRameneDetailsBulletin = "select * from DETAILS_BULLETIN where ID_BULLETIN =  '" + bulletin + "' and ID_COEF = '" + matiere + "' ";

        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idDetailsBulletinTrouve = instruction.executeQuery(reqRameneDetailsBulletin);
            while (idDetailsBulletinTrouve.next()) {
                idDetailsBulletin = idDetailsBulletinTrouve.getInt("ID_DETAILS_BULLETIN");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idDetailsBulletin;
    }

    public double returnMoyMatByBulletinAndTrimestre(int bulletin, int matiere) {
        // Récupération de l'id du detailsBulletin à partir de de l'élève et de la matière selectionnée
        double moyMat = 0;
        String reqRameneDetailsBulletin = "select * from DETAILS_BULLETIN where ID_BULLETIN =  '" + bulletin + "' and ID_COEF = '" + matiere + "' ";

        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet moyMatTrouve = instruction.executeQuery(reqRameneDetailsBulletin);
            while (moyMatTrouve.next()) {
                moyMat = moyMatTrouve.getDouble("MOY_20");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return moyMat;
    }

    public int returnIdGroupPedagByEleveGpAndAnnee(int eleve, int annee) {
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select *  from  ELEVE_GP where ID_ELEVE_GP =  '" + eleve + "' and ID_ANNEE_SCOLAIRE = '" + annee + "' ";
        int idGp = 0, idSerie = 0, idPromo = 0;
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
            while (idGpTrouve.next()) {
                idGp = idGpTrouve.getInt("ID_GROUP_PEDAG");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idGp;
    }

    /*
     * ******************************************************
     * moyenneEleveByTrimestre(BulletinNote bulletin) PERMET DE CALCULER LA MOYENNE*
     * D'UN ELEVE POUR UN TRIMESTRE DONNE                   *
     ********************************************************/
    /**/
    public double moyenneTrimestreByEleveByTrimestre(int idElevGp, int idTrim, int idAnnee) {
        //        List<DetailsBulletin> details = ejbFacade.eleveDetailsBulletinByTrimestre(bulletin);
        // Récupération du libellé du trimestre sélection dans la combo trimestreComboBox
        String monTrimestre = trimestreComboBox.getSelectedItem().toString();
        // Récupération du début de l'année sélectionné dans la combo anneeComboBox
        String monAnneeDebut = anneeComboBox.getSelectedItem().toString();
        int idEl = 0;        int idMat = 0;
        // Récupération de l'id de l'élève depuis la table eleveTable
        int ligne = eleveTable.getSelectedRow();
        Object idElevObj = eleveTable.getValueAt(ligne, 0);
        String idEleveGp = String.valueOf(idElevObj);
        idEl = Integer.parseInt(idEleveGp);
        // Récupération de l'id du groupe pédagogique
        int idGp = returnIdGroupPedagByEleveGpAndAnnee(idElevGp, idAnnee);
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        int sommeCoef = 0;
        int idCoef = 0;
        int valCoef = 0;
        double moyMat = 0.0;
        double sommeMoyCoef = 0;
        double moyTrimes = 0;
        // Parcours des coefficients du idGp pour récupérer les VALEUR_COEF
//        while () {
        idCoef = returnIdCoefByGpAndMat(idGp, idMat);
        valCoef = returnValCoefByGpAndMat(idGp, idMat);
        sommeCoef += valCoef;
        //        while () {
        moyMat = returnMoyMatByBulletinAndTrimestre(idElevGp, idTrim);
        sommeMoyCoef += moyMat * valCoef;
//    }
//        }
        moyTrimes = sommeMoyCoef / sommeCoef;
        return moyTrimes;
    }
    /*
     * *********************************************************************
     * persisterMoyEleveByTrimestre() PERMET DE PERSISTER UN OBJET BULLETIN*
     ***********************************************************************/

    public void persisterMoyEleveByTrimestre(int idElevGp, int idTrim, int idAnnee, double moy) {
        // Récupération de l'id du bulletin de l'élève pour le trimestre
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        String req = "update BULLETIN_NOTE set MOY_TRIM = '" + moy + "' where  ID_BULLETIN='" + idBul + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req);
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterMoyEleveByTrimestre: " + e);

        }
    }

    public void persisterRangEleveByTrimestre(int idElevGp, int idTrim, int idAnnee, int rang) {
        // Récupération de l'id du bulletin de l'élève pour le trimestre
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        String req = "update BULLETIN_NOTE set RANG = '" + rang + "' where  ID_BULLETIN='" + idBul + "'";
        try {

            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req);
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterRangEleveByTrimestre: " + e);

        }
    }

    public void persisterMoyClasseEleveByTrimestre(int idElevGp, int idTrim, int idAnnee, double moyClasse) {
        // Récupération de l'id du bulletin de l'élève pour le trimestre
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        String req = "update BULLETIN_NOTE set MOY_CLASSE = '" + moyClasse + "' where  ID_BULLETIN='" + idBul + "'";
        try {

            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req);
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterMoyClasseEleveByTrimestre: " + e);

        }
    }

    public void persisterPlusFaibleMoyClasseEleveByTrimestre(int idElevGp, int idTrim, int idAnnee, double plusFaibleMoy) {
        // Récupération de l'id du bulletin de l'élève pour le trimestre
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        String req = "update BULLETIN_NOTE set PLUS_FAIBLE_MOY = '" + plusFaibleMoy + "' where  ID_BULLETIN='" + idBul + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req);
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterPlusFaibleMoyClasseEleveByTrimestre: " + e);

        }
    }

    public void persisterPlusForteMoyClasseEleveByTrimestre(int idElevGp, int idTrim, int idAnnee, double plusForteMoy) {
        // Récupération de l'id du bulletin de l'élève pour le trimestre
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        String req = "update BULLETIN_NOTE set PLUS_FORTE_MOY = '" + plusForteMoy + "' where  ID_BULLETIN='" + idBul + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req);
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterPlusForteMoyClasseEleveByTrimestre: " + e);

        }
    }

    // Récupération de l'id de la matière dont le libellé est "Conduite"
    public int returnIdConduite() {
        int idConduite = 0;
        String conduite = "Conduite";
        String reqRameneIdConduite = "select * from Matiere where LIB_MATIERE =  '" + conduite + "' ";

        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idConduiteTrouve = instruction.executeQuery(reqRameneIdConduite);
            while (idConduiteTrouve.next()) {
                idConduite = idConduiteTrouve.getInt("ID_MATIERE");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idConduite;
    }

    // Récupération de l'id de la matière à partir de son libellé
    public int returnIdMatiereByLibMatiere(String libMatiere) {
        int idMat = 0;
//        String conduite = "Conduite";
        String reqRameneIdConduite = "select * from Matiere where LIB_MATIERE =  '" + libMatiere + "' ";

        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idConduiteTrouve = instruction.executeQuery(reqRameneIdConduite);
            while (idConduiteTrouve.next()) {
                idMat = idConduiteTrouve.getInt("ID_MATIERE");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idMat;
    }

    public void ajouterBulletin(int idElev, int idTrim, int idAnnee) {

        String req = "insert into BULLETIN_NOTE (ID_ELEVE_GP,ID_TRIMES) values ('" + idElev + "','" + idTrim + "')";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req);
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur ajouterBulletin: " + e);
        }
    }

    public void ajouterDetailsBulletin(int idElev, int idTrim, int idAnnee, int idMat) {
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElev, idTrim);
        int idGp = returnIdGpByEleveGpByAnnee(idElev, idAnnee);
        int idCoef = returnIdCoefByGpAndMat(idGp, idMat);
        JOptionPane.showMessageDialog(this, "Id du bulletin créé " + idBul);
        JOptionPane.showMessageDialog(this, "Id du groupe pédagogique correspondant" + idGp);
        JOptionPane.showMessageDialog(this, "Id du coefficient correspondant" + idGp);
//        String req2 = "SELECT ID_BULLETIN FROM BULLETIN_NOTE WHERE ID_BULLETIN = '" + idBul + "'";

        String req = "insert into DETAILS_BULLETIN (ID_BULLETIN,ID_COEF) values ('" + idBul + "','" + idCoef + "')";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req);
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur ajouterDetailsBulletin: " + e);
            e.printStackTrace();
        }
    }

    /*
     * ******************************************************
     * rangByGroupePedagogique(List<EleveGp> lesEleves) PERMET DE CALCULER LE RANG*
     * D'UN ELEVE POUR UN TRIMESTRE DONNE                   *
     ********************************************************/
    /*   public void rangByGroupePedagogique(List<EleveGp> lesEleves) {
     List<BulletinNote> bull = new ArrayList(); //bulletinNoteFacade.findListBulletinByGroupPedag(groupPedag);
     for (EleveGp el : lesEleves) {
     bull.add(bulletinNoteFacade.findBulletinOfEleveGp(el));
     }
     double sommeMoy = 0;
     BulletinNote tmp = new BulletinNote();
     for (int i = 0; i < bull.size(); i++) {
     for (int j = i + 1; j < bull.size(); j++) {
     if (bull.get(i).getMoyTrim() < bull.get(j).getMoyTrim()) {
     tmp = bull.get(i);
     bull.set(i, bull.get(j));
     bull.set(j, tmp);
     }
     }
     }
     for (int k = 0; k < bull.size(); k++) {
     sommeMoy += bull.get(k).getMoyTrim();
     }
     double moyenneClasse = sommeMoy / bull.size();

     for (int k = 0; k < bull.size(); k++) {
     bull.get(k).setRang(k + 1);
     bull.get(k).setPlusForteMoy(bull.get(0).getMoyTrim());
     bull.get(k).setPlusFaibleMoy(bull.get(bull.size() - 1).getMoyTrim());
     bull.get(k).setMoyClasse(moyenneClasse);
     bulletinNoteFacade.edit(bull.get(k));
     }
     }
     */

    /*
     * ***********************************************************************
     * rangParMatiere() PERMET DE FAIRE LE TRI PAR * MOYENNE DANS UNE MATIERE*
     * DANS UN GROUPE PEDAGOGIQUE                                            *
     *************************************************************************
     */
//    public void rangByMatiere(Coefficient coef) {
//        List<DetailsBulletin> db = getFacade().findListDetailsBulletinByMatiere(coef);
//        for (int k = 0; k < db.size(); k++) {
//            db.get(k).setRang(k + 1);
//            getFacade().edit(db.get(k));
//        }
//    }

    /*
     ***********************************************************************
     * appreciationByMatiere() PERMET DE DONNER D'UNE MOYENNE D'UNE MATIERE*
     ***********************************************************************/
    public String appreciationMoy(double moy) {
        String appreciation = null;
        if (moy >= 0 && moy < 2) {
            appreciation = "Nul";
        }
        if (moy >= 2 && moy < 5) {
            appreciation = "Mauvais";
        }
        if (moy >= 5 && moy < 10) {
            appreciation = "Insuffisant";
        }
        if (moy >= 10 && moy < 12) {
            appreciation = "Passable";
        }
        if (moy >= 12 && moy < 14) {
            appreciation = "Assez-Bien";
        }
        if (moy >= 14 && moy < 16) {
            appreciation = "Bien";
        }
        if (moy >= 16 && moy < 19) {
            appreciation = "Très-Bien";
        }
        if (moy >= 19 && moy <= 20) {
            appreciation = "Excellent";
        }
        return appreciation;
    }

    public void controleSections(String anneeSelected, String trimestreSelected, String idEleveGp, String idMatStr) {
        if (anneeSelected.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La sélection d'une année est obligatoire ");
        }
        if (trimestreSelected.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La sélection d'un trimestre est obligatoire ");
        }
        if (idEleveGp.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La sélection d'un élève est obligatoire ");
        }
        if (idMatStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La sélection d'une matière est obligatoire ");
        }
    }
    /*
     * ***********************************************************************
     * LA METHODE onRowEditDuTableauNotes PERMET D'ENREGISTREMENT            *
     * D'UN ELEVE DANS UN NOMBRE DE MATIERE SOUHAITE                         *
     * ***********************************************************************
     */

    public boolean controlerSaisirNote(String int1, String int2, String int3, String int4, String noteCompo, String noteDev) {
        if (int1.equals("")) {
            int1 = "0";
        }
        if (int2.equals("")) {
            int2 = "0";
        }
        if (int3.equals("")) {
            int3 = "0";
        }
        if (int4.equals("")) {
            int4 = "0";
        }
        if (noteCompo.equals("")) {
            noteCompo = "0";
        }
        if (noteDev.equals("")) {
            noteDev = "0";
        }
        if ((Double.parseDouble(int1) < 0 || Double.parseDouble(int1) > 20)
                || (Double.parseDouble(int2) < 0 || Double.parseDouble(int2) > 20)
                || (Double.parseDouble(int3) < 0 || Double.parseDouble(int3) > 20)
                || (Double.parseDouble(int4) < 0 || Double.parseDouble(int4) > 20)
                || (Double.parseDouble(noteCompo) < 0 || Double.parseDouble(noteCompo) > 20)
                || (Double.parseDouble(noteDev) < 0 || Double.parseDouble(noteDev.toString()) > 20)) {
            //JsfUtil.addErrorMessage("Int1, Int2, Int3, Int4, Dev et Compo doivent être compris entre 0 et 20");

            return true;
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NotesMatiereJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NotesMatiereJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NotesMatiereJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NotesMatiereJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NotesMatiereJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox anneeComboBox;
    private javax.swing.JComboBox classeComboBox;
    private javax.swing.JTextField compoTextField;
    private javax.swing.JTextField devTextField;
    private javax.swing.JTable eleveTable;
    private javax.swing.JTextField int1TextField;
    private javax.swing.JTextField int2TextField;
    private javax.swing.JTextField int3TextField;
    private javax.swing.JTextField int4TextField;
    private javax.swing.JButton jButtonEnregistrer;
    private javax.swing.JButton jButtonEnregistrer1;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonFermer1;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonModifier1;
    private javax.swing.JButton jButtonNouveau;
    private javax.swing.JButton jButtonNouveau1;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonSupprimer1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelMatiere;
    private javax.swing.JPanel jPanelBoutons;
    private javax.swing.JPanel jPanelBoutons1;
    private javax.swing.JPanel jPanelChamps2;
    private javax.swing.JPanel jPanelChamps3;
    private javax.swing.JPanel jPanelChamps4;
    private javax.swing.JPanel jPanelEntete;
    private javax.swing.JPanel jPanelTableau;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox matiereComboBox;
    private javax.swing.JComboBox trimestreComboBox;
    // End of variables declaration//GEN-END:variables
}
