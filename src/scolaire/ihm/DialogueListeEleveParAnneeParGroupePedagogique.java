/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scolaire.ihm;

//import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.ResultSet;
//import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
//import javax.swing.table.DefaultTableModel;
//import javax.swing.table.TableColumn;
//import traitement.GeneratePDFBilletin;
//import traitement.GeneratePDFListeDesEleves;
import traitement.GeneratePDFListeDesElevesParAnneeParGp;

/**
 *
 * @author obama
 */
public class DialogueListeEleveParAnneeParGroupePedagogique extends javax.swing.JFrame {

    /**
     * Creates new form AnneeJFrame
     */
    public DialogueListeEleveParAnneeParGroupePedagogique() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("log.png")));
        connectComboAnnee();
//        connectComboTrimestre();
        connectComboClasse();
//        affichetableEleve();

//        String classeSelected = classeComboBox.getSelectedItem().toString();
//        int idGp = returnIdGroupPedagByLibGp(classeSelected);
//        String anneeSelected = anneeComboBox.getSelectedItem().toString();
//        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
//        affichetableEleve(idGp, idAnnee);
//        affichetableMatiere();
//        affichetableNotes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelBoutons = new javax.swing.JPanel();
        jButtonNouveau = new javax.swing.JButton();
        jButtonEnregistrer = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jPanelEntete = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanelChamps3 = new javax.swing.JPanel();
        jPanelChamps2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        anneeComboBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        classeComboBox = new javax.swing.JComboBox();
        jPanelChamps4 = new javax.swing.JPanel();
        jButtonNouveau2 = new javax.swing.JButton();
        jButtonNouveau3 = new javax.swing.JButton();
        jButtonNouveau5 = new javax.swing.JButton();

        jButtonNouveau.setText("Nouveau");
        jButtonNouveau.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNouveauMouseClicked(evt);
            }
        });

        jButtonEnregistrer.setText("Enregistrer");

        jButtonModifier.setText("Modifier");

        jButtonSupprimer.setText("Supprimer");

        jButtonFermer.setText("Fermer");
        jButtonFermer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonFermerMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelBoutonsLayout = new javax.swing.GroupLayout(jPanelBoutons);
        jPanelBoutons.setLayout(jPanelBoutonsLayout);
        jPanelBoutonsLayout.setHorizontalGroup(
            jPanelBoutonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBoutonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonNouveau)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonEnregistrer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonModifier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSupprimer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonFermer)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelBoutonsLayout.setVerticalGroup(
            jPanelBoutonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBoutonsLayout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(jPanelBoutonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNouveau)
                    .addComponent(jButtonEnregistrer)
                    .addComponent(jButtonModifier)
                    .addComponent(jButtonSupprimer)
                    .addComponent(jButtonFermer)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanelEntete.setBackground(new java.awt.Color(0, 102, 51));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Liste des élèves");

        javax.swing.GroupLayout jPanelEnteteLayout = new javax.swing.GroupLayout(jPanelEntete);
        jPanelEntete.setLayout(jPanelEnteteLayout);
        jPanelEnteteLayout.setHorizontalGroup(
            jPanelEnteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEnteteLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelEnteteLayout.setVerticalGroup(
            jPanelEnteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        jPanelChamps3.setBackground(new java.awt.Color(204, 255, 204));
        jPanelChamps3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 0))); // NOI18N

        jPanelChamps2.setBackground(new java.awt.Color(204, 255, 204));
        jPanelChamps2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Paramètres", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 0))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Année");

        anneeComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                anneeComboBoxMouseClicked(evt);
            }
        });
        anneeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anneeComboBoxActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Classe");

        classeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classeComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChamps2Layout = new javax.swing.GroupLayout(jPanelChamps2);
        jPanelChamps2.setLayout(jPanelChamps2Layout);
        jPanelChamps2Layout.setHorizontalGroup(
            jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(26, 26, 26)
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(anneeComboBox, 0, 118, Short.MAX_VALUE)
                    .addComponent(classeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChamps2Layout.setVerticalGroup(
            jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps2Layout.createSequentialGroup()
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(anneeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(classeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanelChamps4.setBackground(new java.awt.Color(204, 255, 204));
        jPanelChamps4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Actions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 0))); // NOI18N

        jButtonNouveau2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/scolaire/ihm/icones/ic_printer.png"))); // NOI18N
        jButtonNouveau2.setToolTipText("Imprimer le Bulletin");
        jButtonNouveau2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNouveau2MouseClicked(evt);
            }
        });
        jButtonNouveau2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNouveau2ActionPerformed(evt);
            }
        });

        jButtonNouveau3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/scolaire/ihm/icones/ic_pdf.png"))); // NOI18N
        jButtonNouveau3.setToolTipText("Exporter le Bulletin en PDF");
        jButtonNouveau3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNouveau3MouseClicked(evt);
            }
        });
        jButtonNouveau3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNouveau3ActionPerformed(evt);
            }
        });

        jButtonNouveau5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/scolaire/ihm/icones/ic_word.png"))); // NOI18N
        jButtonNouveau5.setToolTipText("Imprimer le Bulletin");
        jButtonNouveau5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNouveau5MouseClicked(evt);
            }
        });
        jButtonNouveau5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNouveau5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChamps4Layout = new javax.swing.GroupLayout(jPanelChamps4);
        jPanelChamps4.setLayout(jPanelChamps4Layout);
        jPanelChamps4Layout.setHorizontalGroup(
            jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonNouveau2)
                .addGap(18, 18, 18)
                .addComponent(jButtonNouveau3)
                .addGap(18, 18, 18)
                .addComponent(jButtonNouveau5)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanelChamps4Layout.setVerticalGroup(
            jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButtonNouveau2)
            .addComponent(jButtonNouveau3)
            .addComponent(jButtonNouveau5)
        );

        javax.swing.GroupLayout jPanelChamps3Layout = new javax.swing.GroupLayout(jPanelChamps3);
        jPanelChamps3.setLayout(jPanelChamps3Layout);
        jPanelChamps3Layout.setHorizontalGroup(
            jPanelChamps3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChamps3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelChamps2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelChamps4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChamps3Layout.setVerticalGroup(
            jPanelChamps3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanelChamps2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelChamps4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelEntete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelChamps3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelEntete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanelChamps3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonFermerMouseClicked
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonFermerMouseClicked

    private void jButtonNouveauMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNouveauMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonNouveauMouseClicked

    private void jButtonNouveau2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNouveau2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonNouveau2MouseClicked

    private void jButtonNouveau2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNouveau2ActionPerformed
        // TODO add your handling code here:
    /*    String monTrimestre = trimestreComboBox.getSelectedItem().toString();
         int ligne = eleveTable.getSelectedRow();
         if (ligne != -1) {
         Object unInt1 = eleveTable.getValueAt(ligne, 0);
         String idEleveStr = String.valueOf(unInt1);
         int idEleve = Integer.parseInt(idEleveStr);
         Object unInt2 = eleveTable.getValueAt(ligne, 1);
         String matricule = String.valueOf(unInt1);

         String anneeSelected = anneeComboBox.getSelectedItem().toString();
         String trimestreSelected = trimestreComboBox.getSelectedItem().toString();
         int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
         int idTrim = returnIdTrimestreByLibelleTrimestre(trimestreSelected, idAnnee);
         int idBul = returnIdBulletinByEleveGpAndTrimes(idEleve, idTrim);
         GeneratePDFBilletin gen = new GeneratePDFBilletin(idBul);//785
         gen.open("src\\reports\\bulletinNotes.pdf");
         } else {
         JOptionPane.showMessageDialog(this, "Aucun élève n'a été sélectionné ");
         }*/
    }//GEN-LAST:event_jButtonNouveau2ActionPerformed

    private void jButtonNouveau3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNouveau3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonNouveau3MouseClicked

    private void jButtonNouveau3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNouveau3ActionPerformed
        // TODO add your handling code here:
        String classeSelected = classeComboBox.getSelectedItem().toString();
        int idGp = returnIdGroupPedagByLibGp(classeSelected);
//        JOptionPane.showMessageDialog(this, "idGp === " + idGp);
        
        String anneeSelected = anneeComboBox.getSelectedItem().toString();
        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
//        JOptionPane.showMessageDialog(this, "idAnnee === " + idAnnee);
        
        GeneratePDFListeDesElevesParAnneeParGp gen = new GeneratePDFListeDesElevesParAnneeParGp(idAnnee, idGp);
        gen.open("src\\reports\\listeEleveGpAnnee.pdf");
    }//GEN-LAST:event_jButtonNouveau3ActionPerformed

    private void jButtonNouveau5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNouveau5MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonNouveau5MouseClicked

    private void jButtonNouveau5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNouveau5ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonNouveau5ActionPerformed

    private void classeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classeComboBoxActionPerformed
        // TODO add your handling code here:
        String classeSelected = classeComboBox.getSelectedItem().toString();
        int idGp = returnIdGroupPedagByLibGp(classeSelected);
        String anneeSelected = anneeComboBox.getSelectedItem().toString();
        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
//        affichetableEleve(idGp, idAnnee);
    }//GEN-LAST:event_classeComboBoxActionPerformed

    private void anneeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anneeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_anneeComboBoxActionPerformed

    private void anneeComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_anneeComboBoxMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_anneeComboBoxMouseClicked
    /*
     //méthode pour l'affichge du tableau Eleve'
     private void affichetableEleve(int idGp, int idAnnee) {
     DefaultTableModel model = new DefaultTableModel();
     //        eleveTable.setModel(model); //affectation du model au tableau
     //        JOptionPane.showMessageDialog(this, " A l'entrée de la méthode  affichetableEleve");
     model.addColumn("N°");
     model.addColumn("Matricule");
     model.addColumn("Nom");
     model.addColumn("Prénom");
     model.addColumn("Sexe");
     model.addColumn("Né(e) le");
     model.addColumn("Né(e) à");
     model.addColumn("Inscrit(e) le");
     model.addColumn("N°");
     TableColumn column, column1, column2, column3, column4, column5, column6, column7, column8 = null;
     column = eleveTable.getColumnModel().getColumn(0);
     column.setPreferredWidth(10); //
     column1 = eleveTable.getColumnModel().getColumn(1);
     column1.setPreferredWidth(100); //
     column2 = eleveTable.getColumnModel().getColumn(2);
     column2.setPreferredWidth(200); //
     column3 = eleveTable.getColumnModel().getColumn(3);
     column3.setPreferredWidth(200); //
     column4 = eleveTable.getColumnModel().getColumn(4);
     column4.setPreferredWidth(70); //
     column5 = eleveTable.getColumnModel().getColumn(5);
     column5.setPreferredWidth(10); //
     column6 = eleveTable.getColumnModel().getColumn(6);
     column6.setPreferredWidth(10); //
     column7 = eleveTable.getColumnModel().getColumn(7);
     column7.setPreferredWidth(10); //
     column8 = eleveTable.getColumnModel().getColumn(8);
     column8.setPreferredWidth(10); //
     //        JOptionPane.showMessageDialog(this, " Juste avant le premier try ");
     try {
     //            JOptionPane.showMessageDialog(this, " Juste après le premier try ");
     Connection connexion = Maconnexion.seconnecter();
     Statement instruction = connexion.createStatement();
     ResultSet resultat = instruction.executeQuery("select ELEVE_GP.ID_ELEVE_GP,ELEVE_GP.ID_ELEVE ,MATRICULE_EL, NOM_EL, PRENOM_EL, SEXE,DATE_NAIS,LIEU_NAIS,DATE_INSCRI"
     + " from ELEVE, ELEVE_GP"
     + " where ELEVE_GP.ID_ELEVE = ELEVE.ID_ELEVE "
     + " and ELEVE_GP.ID_GROUP_PEDAG = '" + idGp + "'"
     + " and ELEVE_GP.ID_ANNEE_SCOLAIRE = '" + idAnnee + "'");
     //            int i = 0;                     + " and ELEVE_GP.ID_GROUP_PEDAG = GROUP_PEDAG.ID_GROUP_PEDAG"
     //            JOptionPane.showMessageDialog(this, " Juste avant le while (resultat.next())");
     while (resultat.next()) {
     //                JOptionPane.showMessageDialog(this, " Juste après le while (resultat.next())");
     String idEl = resultat.getString("ID_ELEVE");
     String mleEl = resultat.getString("MATRICULE_EL");
     String nomEl = resultat.getString("NOM_EL");
     //                JOptionPane.showMessageDialog(this, "MATRICULE_EL " + mleEl + "NOM_EL" + nomEl);
     String prenomEl = resultat.getString("PRENOM_EL");
     String sexeEl = resultat.getString("SEXE");
     String neLe = resultat.getString("DATE_NAIS");
     String neA = resultat.getString("LIEU_NAIS");
     String inscritLe = resultat.getString("DATE_INSCRI");
     String idElGP = resultat.getString("ID_ELEVE_GP");
     model.addRow(new Object[]{idEl, mleEl, nomEl, prenomEl, sexeEl, neLe, neA, inscritLe, idElGP});
     //                i++;
     }
     } catch (HeadlessException | SQLException e) {
     JOptionPane.showMessageDialog(this, " Aucun élève inscrit dans cette classe " + e);
     }
     }
     */

    public int returnIdGroupPedagByLibGp(String libGp) {
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select *  from  GROUP_PEDAG where LIB_GROUP_PEDAG =  '" + libGp + "' ";
        int idGp = 0;
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
            while (idGpTrouve.next()) {
                idGp = idGpTrouve.getInt("ID_GROUP_PEDAG");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idGp;
    }

//méthode permettant de mettre la note de int1
    public void updateInt1ByIdBulAndIdCoef(double int1, int idBull, int idCoef) {
        String appreProf = "";
        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  INT1 ='" + int1 + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
//            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

    //méthode permettant de mettre la note de int2
    public void updateInt2ByIdBulAndIdCoef(double int2, int idBull, int idCoef) {
        String appreProf = "";
        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  INT2 = '" + int2 + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
//            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

    //méthode permettant de mettre la note de int3
    public void updateInt3ByIdBulAndIdCoef(double int3, int idBull, int idCoef) {
        String appreProf = "";
        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  INT3 = '" + int3 + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
//            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

    //méthode permettant de mettre la note de int4
    public void updateInt4ByIdBulAndIdCoef(double int4, int idBull, int idCoef) {
        String appreProf = "";
        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  INT4 = '" + int4 + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
//            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

    //méthode permettant de mettre la note de dev
    public void updateDevByIdBulAndIdCoef(double dev, int idBull, int idCoef) {
        String appreProf = "";
        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  DEV_NOTE = '" + dev + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
//            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

    //méthode permettant de mettre la Moyenne sur 20
    public void updateMoy20IdBulAndIdCoef(double moy20, int idBull, int idCoef) {
        String appreProf = "";
//        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  MOY_20 = '" + moy20 + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
//            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }
//méthode permettant de mettre la Moyenne des interros

    public void updateMoyIntIdBulAndIdCoef(double moyInt, int idBull, int idCoef) {
        String appreProf = "";
//        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  MOY_INT = '" + moyInt + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
//            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

    //méthode permettant de mettre la Moyenne coeffice
    public void updateMoyCoefIdBulAndIdCoef(double moyCoef, int idBull, int idCoef) {
        String appreProf = "";
//        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  MOY_COEF = '" + moyCoef + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
//            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

    //méthode permettant de mettre l'appréciation du Prof
    public void persisterAppreProfIdBulAndIdCoef(String appreProf, int idBull, int idCoef) {
//        String appreProf = "";
//        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  APPRE_SIGNE_PROF = '" + appreProf + "' where  ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
//            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
//            if (Conf == 0) {
//                instruction.executeQuery(req1);
            instruction.executeQuery(req2);
//            affichetableEleve();
//                instruction.executeQuery(req2);
//                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
//            } else {
//                JOptionPane.showMessageDialog(this, "Modification annulée");
//            }

            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

    //méthode permettant de remplir le JCombobox cbprofile
    private void connectComboAnnee() {
        anneeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
        try {
            // Class.forName(pilote);
            // Connection connexion = DriverManager.getConnection("jdbc:mysql://localhost:3306/base_sgd","root","");*/
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery("SELECT * FROM ANNEE_SCOLAIRE");
            while (resultat.next()) {
                String anneeDebut = resultat.getString("ANNEE_DEBUT");
                String anneeFin = resultat.getString("ANNEE_FIN");
                String libAnnee = anneeDebut + " - " + anneeFin;
                Object obj = (Object) libAnnee;
                anneeComboBox.addItem(obj);
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
    }
    /*
     //méthode permettant de remplir le JCombobox anneeComboBox 
     private void connectComboTrimestre() {
     trimestreComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
     try {
     // Class.forName(pilote);
     // Connection connexion = DriverManager.getConnection("jdbc:mysql://localhost:3306/base_sgd","root","");*/
    /*        Connection connexion = Maconnexion.seconnecter();
     Statement instruction = connexion.createStatement();
     ResultSet resultatTrim = instruction.executeQuery("SELECT LIB_TRIMES FROM TRIMESTRE");
     while (resultatTrim.next()) {
     String libTrim = resultatTrim.getString("LIB_TRIMES");
     Object obj2 = (Object) libTrim;
     trimestreComboBox.addItem(obj2);
     }
     //fermeture de la connexion
     instruction.close();
     connexion.close();
     } catch (Exception e) {
     JOptionPane.showMessageDialog(this, "erreur: " + e);
     }
     }
     */

    //méthode permettant de remplir le JCombobox anneeComboBox 
    private void connectComboClasse() {
        classeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery("SELECT LIB_GROUP_PEDAG FROM GROUP_PEDAG");
            while (resultat.next()) {
                String libGp = resultat.getString("LIB_GROUP_PEDAG");
                Object obj2 = (Object) libGp;
                classeComboBox.addItem(obj2);
            }
            //fermeture de la connexion
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
    }
    /*
     //méthode pour l'affichge du tableau Eleve'
     private void affichetableEleve() {
     //       String pilote = "oracle.jdbc.driver.OracleDriver";
     DefaultTableModel model = new DefaultTableModel();
     eleveTable.setModel(model); //affectation du model au tableau
     model.addColumn("N°");
     model.addColumn("Matricule");
     model.addColumn("Nom");
     model.addColumn("Prénom");
     model.addColumn("Sexe");
     TableColumn column, column1, column2, column3, column4 = null;
     column = eleveTable.getColumnModel().getColumn(0);
     column.setPreferredWidth(90); //
     column1 = eleveTable.getColumnModel().getColumn(1);
     column1.setPreferredWidth(300); //
     column2 = eleveTable.getColumnModel().getColumn(2);
     column2.setPreferredWidth(300); //
     column3 = eleveTable.getColumnModel().getColumn(3);
     column3.setPreferredWidth(300); //
     column4 = eleveTable.getColumnModel().getColumn(4);
     column4.setPreferredWidth(200); //
     try {
     Connection connexion = Maconnexion.seconnecter();
     Statement instruction = connexion.createStatement();
     ResultSet resultat = instruction.executeQuery("select ID_ELEVE_GP ,MATRICULE_EL, NOM_EL, PRENOM_EL, SEXE from ELEVE, ELEVE_GP, GROUP_PEDAG"
     + " where ELEVE_GP.ID_ELEVE = ELEVE.ID_ELEVE "
     + " and ELEVE_GP.ID_GROUP_PEDAG = GROUP_PEDAG.ID_GROUP_PEDAG"
     + " and GROUP_PEDAG.LIB_GROUP_PEDAG = '" + classeComboBox.getSelectedItem().toString() + "'");
     int i = 0;
     while (resultat.next()) {
     String idEl = resultat.getString("ID_ELEVE_GP");
     String mleEl = resultat.getString("MATRICULE_EL");
     String nomEl = resultat.getString("NOM_EL");
     String prenomEl = resultat.getString("PRENOM_EL");
     String sexeEl = resultat.getString("SEXE");
     model.addRow(new Object[]{idEl, mleEl, nomEl, prenomEl, sexeEl});
     i++;
     }
     } catch (Exception e) {
     JOptionPane.showMessageDialog(this, "erreur3: " + e);

     }
     }
     */

    //méthode pour l'affichge du tableau Matiere'
    /*
     private void affichetableMatiere() {
     //       String pilote = "oracle.jdbc.driver.OracleDriver";
     DefaultTableModel model = new DefaultTableModel();
     matiereTable.setModel(model); //affectation du model au tableau
     model.addColumn("Code");
     model.addColumn("Matière");

     TableColumn column, column1 = null;
     column = matiereTable.getColumnModel().getColumn(0);
     column.setPreferredWidth(90); //
     column1 = matiereTable.getColumnModel().getColumn(1);
     column1.setPreferredWidth(300); //
     try {
     Connection connexion = Maconnexion.seconnecter();
     Statement instruction = connexion.createStatement();
     ResultSet resultat = instruction.executeQuery("select ID_MATIERE,LIB_MATIERE from MATIERE ");
     int i = 0;
     while (resultat.next()) {
     String idMat = resultat.getString("ID_MATIERE");
     String libMat = resultat.getString("LIB_MATIERE");
     model.addRow(new Object[]{idMat, libMat});
     i++;
     }
     } catch (Exception e) {
     JOptionPane.showMessageDialog(this, "erreur3: " + e);
     }
     }

     private void effacer() {
     int1TextField.setText("");
     int2TextField.setText("");
     int3TextField.setText("");
     int4TextField.setText("");
     devTextField.setText("");
     compoTextField.setText("");
     }

     private void enregNotes() {

     }

     /*
     * ***********************************************
     * moyenneInterro() PERMET DE CALCULER LES MOYENNE* 
     *  D'INTERRO DANS UNE MATIERE                   *
     *************************************************
     */
    public double moyenneInterro(String int1, String int2, String int3, String int4) {
        int nbreInterro = 4;
        double moyInterro = 0.0;
        if (int1.equals("") && int2.equals("") && int3.equals("") && int4.equals("")) {
            moyInterro = -1;
        } else {
            if (int1.equals("")) {
                int1 = "0";
                nbreInterro--;
            }
            if (int2.equals("")) {
                int2 = "0";
                nbreInterro--;
            }
            if (int3.equals("")) {
                int3 = "0";
                nbreInterro--;
            }
            if (int4.equals("")) {
                int4 = "0";
                nbreInterro--;
            }
            moyInterro = (Double.parseDouble(int1) + Double.parseDouble(int2) + Double.parseDouble(int3) + Double.parseDouble(int4)) / nbreInterro;
        }
        System.out.println("Moyenne d'interrogation " + moyInterro);
        return moyInterro;
    }

    /*
     * *******************************************************************
     * moyenneMatiere() PERMET DE CALCULER LA MOYENNE D'UN ELEVE DANS UNE*
     * MATIERE                                                           * 
     *********************************************************************
     */
    public double moyenneMatiere(String noteDev, String noteCompo, double moyInterro) {
        double moyMatiere = 0;
        int diviseurMoy = 1;
        if (moyInterro == -1 && noteDev.equals("") && noteCompo.equals("")) {
            moyMatiere = -1;
        } else {
            diviseurMoy = 3;
            if (moyInterro == -1) {
                diviseurMoy--;
            }
            if (noteCompo.equals("")) {
                noteCompo = "0";
                diviseurMoy--;
            }
            if (noteDev.equals("")) {
                noteDev = "0";
                diviseurMoy--;
            }
            moyMatiere = (Double.parseDouble(noteCompo) + Double.parseDouble(noteDev) + moyInterro) / diviseurMoy;
        }
        return moyMatiere;
    }
    /*
     * *******************************************************************
     * moyenneMatiere() PERMET DE CALCULER LA MOYENNE D'UN ELEVE DANS UNE*
     * MATIERE                                                           * 
     *********************************************************************
     */

    public double moyenneCoefMatiere(int idCoef, String noteDev, String noteCompo, double moyInterro) {
        double moyMatiere = 0;
        int diviseurMoy = 1;
        if (moyInterro == -1 && noteDev.equals("") && noteCompo.equals("")) {
            moyMatiere = -1;
        } else {
            diviseurMoy = 3;
            if (moyInterro == -1) {
                diviseurMoy--;
            }
            if (noteCompo.equals("")) {
                noteCompo = "0";
                diviseurMoy--;
            }
            if (noteDev.equals("")) {
                noteDev = "0";
                diviseurMoy--;
            }
            moyMatiere = (Double.parseDouble(noteCompo) + Double.parseDouble(noteDev) + moyInterro) / diviseurMoy;
        }
        return moyMatiere;
    }

    public int returnIdGpByEleveGpByAnnee(int idElev, int idAnnee) {

        // Récupération de l'id de l'année à partir de son champ  ANNEE_DEBUT
        int idGp = 0;// Récupération de l'id du groupe pédagogique de l'élève sélectionné
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select ID_GROUP_PEDAG  from  ELEVE_GP where ID_ELEVE_GP =  '" + idElev + "' and ID_ANNEE_SCOLAIRE = '" + idAnnee + "' ";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
            while (idGpTrouve.next()) {
                idGp = idGpTrouve.getInt("ID_GROUP_PEDAG");
            }
            JOptionPane.showMessageDialog(this, "ID GP " + idGp);
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdGpByEleveGpByAnnee: " + e);
        }
        return idGp;
    }

    public int returnIdSerieByElevGpByAnnee(int idGp) {

        // Récupération de l'id de l'année à partir de son champ  ANNEE_DEBUT
        int idSerie = 0;// Récupération de l'id du groupe pédagogique de l'élève sélectionné
        // Récupération de l'id de la série du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select ID_GROUP_PEDAG, ID_SERIE   from  GROUP_PEDAG where ID_GROUP_PEDAG =  '" + idGp + "' ";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
            while (idGpTrouve.next()) {
                idSerie = idGpTrouve.getInt("ID_SERIE");
            }
            JOptionPane.showMessageDialog(this, "ID Série " + idSerie);
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdSerieByElevGpByAnnee: " + e);
        }
        return idSerie;
    }

    public int returnIdPromoByEleveGpByAnnee(int idGp) {

        int idPromo = 0;
        // Récupération de l'id de la promotion du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select ID_GROUP_PEDAG, ID_PROMO  from  GROUP_PEDAG where ID_GROUP_PEDAG =  '" + idGp + "' ";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
            while (idGpTrouve.next()) {
                idPromo = idGpTrouve.getInt("ID_PROMO");
            }
            JOptionPane.showMessageDialog(this, "ID Promo " + idPromo);
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdPromoByEleveGpByAnnee: " + e);
        }
        return idPromo;
    }

    public int returnIdCoefByGpAndMat(int idGp, int idMat) {
//        int idPromo = 0;
//        int idSerie = 0;
        // Récupération de l'id du coefficient de la matière choisie connaissant la promotion et la série
        int idCoef = 0;
//      String reqRameneCoef = "select *  from  COEFFICIENT where ID_MATIERE =  '" + idMat + "' and ID_SERIE = '" + idSerie + "' and ID_PROMO = '" + idPromo + "'  ";
        String reqRameneCoef = "select ID_COEF  from  COEFFICIENT where ID_MATIERE =  '" + idMat + "' and ID_GROUP_PEDAG = '" + idGp + "'  ";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idCoefTrouve = instruction.executeQuery(reqRameneCoef);
            while (idCoefTrouve.next()) {
                idCoef = idCoefTrouve.getInt("ID_COEF");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdCoefByGpAndMat: " + e);
        }
        return idCoef;
    }

    public int returnValCoefByGpAndMat(int idGp, int idMat) {
        // Récupération de l'id du coefficient de la matière choisie connaissant la promotion et la série
        int valCoef = 0;
//      String reqRameneCoef = "select *  from  COEFFICIENT where ID_MATIERE =  '" + idMat + "' and ID_SERIE = '" + idSerie + "' and ID_PROMO = '" + idPromo + "'  ";
        String reqRameneCoef = "select *  from  COEFFICIENT where ID_MATIERE =  '" + idMat + "' and ID_GROUP_PEDAG = '" + idGp + "'  ";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet valCoefTrouve = instruction.executeQuery(reqRameneCoef);
            while (valCoefTrouve.next()) {
                valCoef = valCoefTrouve.getInt("VALEUR_COEF");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnValCoefByGpAndMat: " + e);
        }
        return valCoef;
    }

    public int returnIdBulletinByEleveGpAndTrimes(int idEleveGp, int idTrimes) {
        int idBul = 0;
        String reqRameneBulletin = "select ID_BULLETIN  from BULLETIN_NOTE where ID_ELEVE_GP =  '" + idEleveGp + "' and ID_TRIMES = '" + idTrimes + "'";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idBulTrouve = instruction.executeQuery(reqRameneBulletin);
            while (idBulTrouve.next()) {
                idBul = idBulTrouve.getInt("ID_BULLETIN");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdBulletinByEleveGpAndTrimes: " + e);
        }
        return idBul;
    }

    public int returnIdDetailsBulletinByCoef(int idCoef) {
        String reqRameneDetailsBulletin = "select *  from  DETAILS_BULLETIN where ID_COEF =  '" + idCoef + "'";

        return 0;
    }

    public int returnIdAnneeByAnneeDebut(String anneeDebut) {
        // Récupération de l'id de l'année à partir de son champ  ANNEE_DEBUT
        int idAnnee = 0;
        String reqRameneIdAnnee = "select ID_ANNEE_SCOLAIRE from ANNEE_SCOLAIRE where ANNEE_DEBUT = '" + anneeDebut + "'";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idAnneeTrouve = instruction.executeQuery(reqRameneIdAnnee);
            while (idAnneeTrouve.next()) {
                idAnnee = idAnneeTrouve.getInt("ID_ANNEE_SCOLAIRE");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idAnnee;
    }

    public int returnIdTrimestreByLibelleTrimestre(String libelleTrimestre, int idAnnee) {

        // Récupération de l'id du trimestre à partir de son libellé et de l'id de l'année
        String reqRameneIdTrimesAnnee = "select ID_TRIMES from TRIMESTRE where LIB_TRIMES =  '" + libelleTrimestre + "' and ID_ANNEE_SCOLAIRE = '" + idAnnee + "' ";

        int idTrimestre = 0;
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idTrimestreTrouve = instruction.executeQuery(reqRameneIdTrimesAnnee);
            while (idTrimestreTrouve.next()) {
                idTrimestre = idTrimestreTrouve.getInt("ID_TRIMES");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idTrimestre;
    }

    public int returnIdBulletinByEleveGpAndTrimestre(int eleve, int trimestre) {
        // Récupération du bulletin à partir de l'élève et du trimestre selectionné
        int idBulletin = 0;
        String reqRameneBulletinTrim = "select * from BULLETIN_NOTE where ID_ELEVE_GP =  '" + eleve + "' and ID_TRIMES = '" + trimestre + "' ";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idBulletinTrouve = instruction.executeQuery(reqRameneBulletinTrim);
            while (idBulletinTrouve.next()) {
                idBulletin = idBulletinTrouve.getInt("ID_BULLETIN");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdBulletinByEleveGpAndTrimestre : " + e);
        }
        return idBulletin;
    }

    public int returnIdDetailsBulletinByBulletinAndTrimestre(int bulletin, int matiere) {
        // Récupération de l'id du detailsBulletin à partir de de l'élève et de la matière selectionnée
        int idDetailsBulletin = 0;
        String reqRameneDetailsBulletin = "select * from DETAILS_BULLETIN where ID_BULLETIN =  '" + bulletin + "' and ID_COEF = '" + matiere + "' ";

        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idDetailsBulletinTrouve = instruction.executeQuery(reqRameneDetailsBulletin);
            while (idDetailsBulletinTrouve.next()) {
                idDetailsBulletin = idDetailsBulletinTrouve.getInt("ID_DETAILS_BULLETIN");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idDetailsBulletin;
    }

    public double returnMoyMatByBulletinAndTrimestre(int bulletin, int matiere) {
        // Récupération de l'id du detailsBulletin à partir de de l'élève et de la matière selectionnée
        double moyMat = 0;
        String reqRameneDetailsBulletin = "select * from DETAILS_BULLETIN where ID_BULLETIN =  '" + bulletin + "' and ID_COEF = '" + matiere + "' ";

        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet moyMatTrouve = instruction.executeQuery(reqRameneDetailsBulletin);
            while (moyMatTrouve.next()) {
                moyMat = moyMatTrouve.getDouble("MOY_20");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return moyMat;
    }

    public int returnIdGroupPedagByEleveGpAndAnnee(int eleve, int annee) {
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select *  from  ELEVE_GP where ID_ELEVE_GP =  '" + eleve + "' and ID_ANNEE_SCOLAIRE = '" + annee + "' ";
        int idGp = 0, idSerie = 0, idPromo = 0;
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
            while (idGpTrouve.next()) {
                idGp = idGpTrouve.getInt("ID_GROUP_PEDAG");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idGp;
    }

    /*
     * ******************************************************
     * moyenneEleveByTrimestre(BulletinNote bulletin) PERMET DE CALCULER LA MOYENNE*
     * D'UN ELEVE POUR UN TRIMESTRE DONNE                   *
     ********************************************************/
    /*    
     public double moyenneTrimestreByEleveByTrimestre(int idElevGp, int idTrim, int idAnnee) {
     //        List<DetailsBulletin> details = ejbFacade.eleveDetailsBulletinByTrimestre(bulletin);
     // Récupération du libellé du trimestre sélection dans la combo trimestreComboBox
     String monTrimestre = trimestreComboBox.getSelectedItem().toString();
     // Récupération du début de l'année sélectionné dans la combo anneeComboBox
     String monAnneeDebut = anneeComboBox.getSelectedItem().toString();
     int idEl = 0;
     // Récupération de l'id de l'élève depuis la table eleveTable
     int ligne = eleveTable.getSelectedRow();
     Object idElevObj = eleveTable.getValueAt(ligne, 0);
     String idEleveGp = String.valueOf(idElevObj);
     idEl = Integer.parseInt(idEleveGp);
     // Récupération de l'id de la matière depuis la table matiereTable
     int idMat = 0;
     int ligne1 = notesTable.getSelectedRow();
     Object idMatObj = notesTable.getValueAt(ligne, 0);
     String idMatStr = String.valueOf(idElevObj);
     idMat = Integer.parseInt(idMatStr);

     // Récupération de l'id du groupe pédagogique
     int idGp = returnIdGroupPedagByEleveGpAndAnnee(idElevGp, idAnnee);
     int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
     int sommeCoef = 0;
     int idCoef = 0;
     int valCoef = 0;
     double moyMat = 0.0;
     double sommeMoyCoef = 0;
     double moyTrimes = 0;
     // Parcours des coefficients du idGp pour récupérer les VALEUR_COEF
     //        while () {
     idCoef = returnIdCoefByGpAndMat(idGp, idMat);
     valCoef = returnValCoefByGpAndMat(idGp, idMat);
     sommeCoef += valCoef;
     //        while () {
     moyMat = returnMoyMatByBulletinAndTrimestre(idElevGp, idTrim);
     sommeMoyCoef += moyMat * valCoef;
     //    }
     //        }
     moyTrimes = sommeMoyCoef / sommeCoef;
     return moyTrimes;
     }
     /*
     * *********************************************************************
     * persisterMoyEleveByTrimestre() PERMET DE PERSISTER UN OBJET BULLETIN*
     ***********************************************************************/
    public void persisterMoyEleveByTrimestre(int idElevGp, int idTrim, int idAnnee, double moy) {
        // Récupération de l'id du bulletin de l'élève pour le trimestre
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        String req = "update BULLETIN_NOTE set MOY_TRIM = '" + moy + "' where  ID_BULLETIN='" + idBul + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req);
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterMoyEleveByTrimestre: " + e);

        }
    }

    public void persisterRangEleveByTrimestre(int idElevGp, int idTrim, int idAnnee, int rang) {
        // Récupération de l'id du bulletin de l'élève pour le trimestre
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        String req = "update BULLETIN_NOTE set RANG = '" + rang + "' where  ID_BULLETIN='" + idBul + "'";
        try {

            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req);
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterRangEleveByTrimestre: " + e);

        }
    }

    public void persisterMoyClasseEleveByTrimestre(int idElevGp, int idTrim, int idAnnee, double moyClasse) {
        // Récupération de l'id du bulletin de l'élève pour le trimestre
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        String req = "update BULLETIN_NOTE set MOY_CLASSE = '" + moyClasse + "' where  ID_BULLETIN='" + idBul + "'";
        try {

            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req);
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterMoyClasseEleveByTrimestre: " + e);

        }
    }

    public void persisterPlusFaibleMoyClasseEleveByTrimestre(int idElevGp, int idTrim, int idAnnee, double plusFaibleMoy) {
        // Récupération de l'id du bulletin de l'élève pour le trimestre
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        String req = "update BULLETIN_NOTE set PLUS_FAIBLE_MOY = '" + plusFaibleMoy + "' where  ID_BULLETIN='" + idBul + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req);
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterPlusFaibleMoyClasseEleveByTrimestre: " + e);

        }
    }

    public void persisterPlusForteMoyClasseEleveByTrimestre(int idElevGp, int idTrim, int idAnnee, double plusForteMoy) {
        // Récupération de l'id du bulletin de l'élève pour le trimestre
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        String req = "update BULLETIN_NOTE set PLUS_FORTE_MOY = '" + plusForteMoy + "' where  ID_BULLETIN='" + idBul + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req);
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterPlusForteMoyClasseEleveByTrimestre: " + e);

        }
    }

    // Récupération de l'id de la matière dont le libellé est "Conduite"
    public int returnIdConduite() {
        int idConduite = 0;
        String conduite = "Conduite";
        String reqRameneIdConduite = "select * from Matiere where LIB_MATIERE =  '" + conduite + "' ";

        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idConduiteTrouve = instruction.executeQuery(reqRameneIdConduite);
            while (idConduiteTrouve.next()) {
                idConduite = idConduiteTrouve.getInt("ID_MATIERE");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idConduite;
    }

    // Récupération de l'id de la matière à partir de son libellé
    public int returnIdMatiereByLibMatiere(String libMatiere) {
        int idMat = 0;
//        String conduite = "Conduite";
        String reqRameneIdConduite = "select * from Matiere where LIB_MATIERE =  '" + libMatiere + "' ";

        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idConduiteTrouve = instruction.executeQuery(reqRameneIdConduite);
            while (idConduiteTrouve.next()) {
                idMat = idConduiteTrouve.getInt("ID_MATIERE");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idMat;
    }

    public void ajouterBulletin(int idElev, int idTrim, int idAnnee) {

        String req = "insert into BULLETIN_NOTE (ID_ELEVE_GP,ID_TRIMES) values ('" + idElev + "','" + idTrim + "')";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req);
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur ajouterBulletin: " + e);
        }
    }

    public void ajouterDetailsBulletin(int idElev, int idTrim, int idAnnee, int idMat) {
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElev, idTrim);
        int idGp = returnIdGpByEleveGpByAnnee(idElev, idAnnee);
        int idCoef = returnIdCoefByGpAndMat(idGp, idMat);
        JOptionPane.showMessageDialog(this, "Id du bulletin créé " + idBul);
        JOptionPane.showMessageDialog(this, "Id du groupe pédagogique correspondant" + idGp);
        JOptionPane.showMessageDialog(this, "Id du coefficient correspondant" + idGp);
//        String req2 = "SELECT ID_BULLETIN FROM BULLETIN_NOTE WHERE ID_BULLETIN = '" + idBul + "'";

        String req = "insert into DETAILS_BULLETIN (ID_BULLETIN,ID_COEF) values ('" + idBul + "','" + idCoef + "')";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req);
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur ajouterDetailsBulletin: " + e);
            e.printStackTrace();
        }
    }

    /*
     * ******************************************************
     * rangByGroupePedagogique(List<EleveGp> lesEleves) PERMET DE CALCULER LE RANG*
     * D'UN ELEVE POUR UN TRIMESTRE DONNE                   *
     ********************************************************/
    /*   public void rangByGroupePedagogique(List<EleveGp> lesEleves) {
     List<BulletinNote> bull = new ArrayList(); //bulletinNoteFacade.findListBulletinByGroupPedag(groupPedag);
     for (EleveGp el : lesEleves) {
     bull.add(bulletinNoteFacade.findBulletinOfEleveGp(el));
     }
     double sommeMoy = 0;
     BulletinNote tmp = new BulletinNote();
     for (int i = 0; i < bull.size(); i++) {
     for (int j = i + 1; j < bull.size(); j++) {
     if (bull.get(i).getMoyTrim() < bull.get(j).getMoyTrim()) {
     tmp = bull.get(i);
     bull.set(i, bull.get(j));
     bull.set(j, tmp);
     }
     }
     }
     for (int k = 0; k < bull.size(); k++) {
     sommeMoy += bull.get(k).getMoyTrim();
     }
     double moyenneClasse = sommeMoy / bull.size();

     for (int k = 0; k < bull.size(); k++) {
     bull.get(k).setRang(k + 1);
     bull.get(k).setPlusForteMoy(bull.get(0).getMoyTrim());
     bull.get(k).setPlusFaibleMoy(bull.get(bull.size() - 1).getMoyTrim());
     bull.get(k).setMoyClasse(moyenneClasse);
     bulletinNoteFacade.edit(bull.get(k));
     }
     }
     */

    /*
     * ***********************************************************************
     * rangParMatiere() PERMET DE FAIRE LE TRI PAR * MOYENNE DANS UNE MATIERE*
     * DANS UN GROUPE PEDAGOGIQUE                                            *
     *************************************************************************
     */
//    public void rangByMatiere(Coefficient coef) {
//        List<DetailsBulletin> db = getFacade().findListDetailsBulletinByMatiere(coef);
//        for (int k = 0; k < db.size(); k++) {
//            db.get(k).setRang(k + 1);
//            getFacade().edit(db.get(k));
//        }
//    }

    /*
     ***********************************************************************
     * appreciationByMatiere() PERMET DE DONNER D'UNE MOYENNE D'UNE MATIERE*
     ***********************************************************************/
    public String appreciationMoy(double moy) {
        String appreciation = null;
        if (moy >= 0 && moy < 2) {
            appreciation = "Nul";
        }
        if (moy >= 2 && moy < 5) {
            appreciation = "Mauvais";
        }
        if (moy >= 5 && moy < 10) {
            appreciation = "Insuffisant";
        }
        if (moy >= 10 && moy < 12) {
            appreciation = "Passable";
        }
        if (moy >= 12 && moy < 14) {
            appreciation = "Assez-Bien";
        }
        if (moy >= 14 && moy < 16) {
            appreciation = "Bien";
        }
        if (moy >= 16 && moy < 19) {
            appreciation = "Très-Bien";
        }
        if (moy >= 19 && moy <= 20) {
            appreciation = "Excellent";
        }
        return appreciation;
    }

    public void controleSections(String anneeSelected, String trimestreSelected, String idEleveGp, String idMatStr) {
        if (anneeSelected.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La sélection d'une année est obligatoire ");
        }
        if (trimestreSelected.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La sélection d'un trimestre est obligatoire ");
        }
        if (idEleveGp.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La sélection d'un élève est obligatoire ");
        }
        if (idMatStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La sélection d'une matière est obligatoire ");
        }
    }
    /*
     * ***********************************************************************
     * LA METHODE onRowEditDuTableauNotes PERMET D'ENREGISTREMENT            *
     * D'UN ELEVE DANS UN NOMBRE DE MATIERE SOUHAITE                         *
     * ***********************************************************************
     */

    public boolean controlerSaisirNote(String int1, String int2, String int3, String int4, String noteCompo, String noteDev) {
        if (int1.equals("")) {
            int1 = "0";
        }
        if (int2.equals("")) {
            int2 = "0";
        }
        if (int3.equals("")) {
            int3 = "0";
        }
        if (int4.equals("")) {
            int4 = "0";
        }
        if (noteCompo.equals("")) {
            noteCompo = "0";
        }
        if (noteDev.equals("")) {
            noteDev = "0";
        }
        if ((Double.parseDouble(int1) < 0 || Double.parseDouble(int1) > 20)
                || (Double.parseDouble(int2) < 0 || Double.parseDouble(int2) > 20)
                || (Double.parseDouble(int3) < 0 || Double.parseDouble(int3) > 20)
                || (Double.parseDouble(int4) < 0 || Double.parseDouble(int4) > 20)
                || (Double.parseDouble(noteCompo) < 0 || Double.parseDouble(noteCompo) > 20)
                || (Double.parseDouble(noteDev) < 0 || Double.parseDouble(noteDev.toString()) > 20)) {
            //JsfUtil.addErrorMessage("Int1, Int2, Int3, Int4, Dev et Compo doivent être compris entre 0 et 20");

            return true;
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogueListeEleveParAnneeParGroupePedagogique.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogueListeEleveParAnneeParGroupePedagogique.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogueListeEleveParAnneeParGroupePedagogique.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogueListeEleveParAnneeParGroupePedagogique.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DialogueListeEleveParAnneeParGroupePedagogique().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox anneeComboBox;
    private javax.swing.JComboBox classeComboBox;
    private javax.swing.JButton jButtonEnregistrer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonNouveau;
    private javax.swing.JButton jButtonNouveau2;
    private javax.swing.JButton jButtonNouveau3;
    private javax.swing.JButton jButtonNouveau5;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanelBoutons;
    private javax.swing.JPanel jPanelChamps2;
    private javax.swing.JPanel jPanelChamps3;
    private javax.swing.JPanel jPanelChamps4;
    private javax.swing.JPanel jPanelEntete;
    // End of variables declaration//GEN-END:variables
}
