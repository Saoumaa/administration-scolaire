/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scolaire.ihm;

import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import traitement.GeneratePDFBilletin;
import traitement.GeneratePDFCahierNotes;
import traitement.GeneratePDFListeDesEleves;

/**
 *
 * @author obama
 */
public class NotesGPJFrame extends javax.swing.JFrame {

    /**
     * Creates new form AnneeJFrame
     */
    public NotesGPJFrame() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("log.png")));
        connectComboAnnee();
//        connectComboTrimestre();
        tf_idEl.setVisible(false);
        tf_IdAnnee.setVisible(false);
        tf_IdClasse.setVisible(false);
        tf_IdTrim.setVisible(false);

        connectComboClasse();
        String classeSelected = classeComboBox.getSelectedItem().toString();
        int idGp = returnIdGroupPedagByLibGp(classeSelected);
//        tf_IdClasse.setText("" + classeSelected);

        String anneeSelected = anneeComboBox.getSelectedItem().toString();
        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
//        tf_IdAnnee.setText("" + anneeSelected);

        String trimestreSelected = trimestreComboBox.getSelectedItem().toString();
        int idTrim = returnIdTrimestreByLibelleTrimestre(trimestreSelected, idAnnee);
//        tf_IdAnnee.setText("" + idTrim);

        affichetableEleve(idGp, idAnnee);
        connectComboTrimestre(idAnnee);

//        affichetableEleve();
//        affichetableMatiere();
//        affichetableNotes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelBoutons = new javax.swing.JPanel();
        jButtonNouveau = new javax.swing.JButton();
        jButtonEnregistrer = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jPanelEntete = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanelTableau = new javax.swing.JPanel();
        jPanelChamps3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        eleveTable = new javax.swing.JTable();
        jPanelTrimestre = new javax.swing.JPanel();
        jPanelChamps = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        notesTable = new javax.swing.JTable();
        jPanelChamps4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        int1TextField = new javax.swing.JTextField();
        int2TextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        int3TextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        int4TextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        compoTextField = new javax.swing.JTextField();
        devTextField = new javax.swing.JTextField();
        jButtonNouveau1 = new javax.swing.JButton();
        jButtonEnregistrer1 = new javax.swing.JButton();
        jButtonSupprimer1 = new javax.swing.JButton();
        jButtonFermer1 = new javax.swing.JButton();
        jPanelChamps2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        anneeComboBox = new javax.swing.JComboBox();
        trimestreComboBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        classeComboBox = new javax.swing.JComboBox();
        nomEl_jLabel = new javax.swing.JLabel();
        tf_idEl = new javax.swing.JLabel();
        tf_IdAnnee = new javax.swing.JLabel();
        tf_IdClasse = new javax.swing.JLabel();
        tf_IdTrim = new javax.swing.JLabel();

        jButtonNouveau.setText("Nouveau");
        jButtonNouveau.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNouveauMouseClicked(evt);
            }
        });

        jButtonEnregistrer.setText("Enregistrer");

        jButtonModifier.setText("Modifier");

        jButtonSupprimer.setText("Supprimer");

        jButtonFermer.setText("Fermer");
        jButtonFermer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonFermerMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelBoutonsLayout = new javax.swing.GroupLayout(jPanelBoutons);
        jPanelBoutons.setLayout(jPanelBoutonsLayout);
        jPanelBoutonsLayout.setHorizontalGroup(
            jPanelBoutonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBoutonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonNouveau)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonEnregistrer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonModifier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSupprimer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonFermer)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelBoutonsLayout.setVerticalGroup(
            jPanelBoutonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBoutonsLayout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(jPanelBoutonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNouveau)
                    .addComponent(jButtonEnregistrer)
                    .addComponent(jButtonModifier)
                    .addComponent(jButtonSupprimer)
                    .addComponent(jButtonFermer)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanelEntete.setBackground(new java.awt.Color(0, 102, 51));

        jLabel1.setFont(new java.awt.Font("Wide Latin", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("REPORT DE NOTES PAR GROUPE  PEDAGOGIQUE");

        javax.swing.GroupLayout jPanelEnteteLayout = new javax.swing.GroupLayout(jPanelEntete);
        jPanelEntete.setLayout(jPanelEnteteLayout);
        jPanelEnteteLayout.setHorizontalGroup(
            jPanelEnteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE)
        );
        jPanelEnteteLayout.setVerticalGroup(
            jPanelEnteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEnteteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelChamps3.setBackground(new java.awt.Color(204, 255, 204));
        jPanelChamps3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Elèves", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 0))); // NOI18N

        eleveTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "N°", "Matricule", "Nom", "Prénom", "Sexe"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        eleveTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eleveTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(eleveTable);

        javax.swing.GroupLayout jPanelChamps3Layout = new javax.swing.GroupLayout(jPanelChamps3);
        jPanelChamps3.setLayout(jPanelChamps3Layout);
        jPanelChamps3Layout.setHorizontalGroup(
            jPanelChamps3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelChamps3Layout.setVerticalGroup(
            jPanelChamps3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelTableauLayout = new javax.swing.GroupLayout(jPanelTableau);
        jPanelTableau.setLayout(jPanelTableauLayout);
        jPanelTableauLayout.setHorizontalGroup(
            jPanelTableauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTableauLayout.createSequentialGroup()
                .addComponent(jPanelChamps3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelTableauLayout.setVerticalGroup(
            jPanelTableauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTableauLayout.createSequentialGroup()
                .addComponent(jPanelChamps3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanelTrimestre.setBackground(new java.awt.Color(204, 255, 204));

        jPanelChamps.setBackground(new java.awt.Color(204, 255, 204));
        jPanelChamps.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Notes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 153, 0))); // NOI18N

        notesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        notesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                notesTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(notesTable);

        jPanelChamps4.setBackground(new java.awt.Color(204, 255, 204));
        jPanelChamps4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Notes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 0))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Int 1");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Int 2");

        int1TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                int1TextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                int1TextFieldFocusLost(evt);
            }
        });
        int1TextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int1TextFieldMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                int1TextFieldMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                int1TextFieldMouseExited(evt);
            }
        });

        int2TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                int2TextFieldFocusLost(evt);
            }
        });
        int2TextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int2TextFieldMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                int2TextFieldMouseExited(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Int 3");
        jLabel10.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jLabel10FocusLost(evt);
            }
        });

        int3TextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int3TextFieldMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                int3TextFieldMouseExited(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Int 4");

        int4TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                int4TextFieldFocusLost(evt);
            }
        });
        int4TextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int4TextFieldMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                int4TextFieldMouseExited(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Dev");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("Compo");

        compoTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                compoTextFieldFocusLost(evt);
            }
        });
        compoTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                compoTextFieldMouseClicked(evt);
            }
        });

        devTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                devTextFieldFocusLost(evt);
            }
        });
        devTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                devTextFieldMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelChamps4Layout = new javax.swing.GroupLayout(jPanelChamps4);
        jPanelChamps4.setLayout(jPanelChamps4Layout);
        jPanelChamps4Layout.setHorizontalGroup(
            jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChamps4Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelChamps4Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(int1TextField))
                    .addGroup(jPanelChamps4Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(int4TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                .addGroup(jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChamps4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(int2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChamps4Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(devTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChamps4Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(compoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChamps4Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(int3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanelChamps4Layout.setVerticalGroup(
            jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8)
                    .addComponent(int1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(int2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(int3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChamps4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(compoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(int4TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(devTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanelChampsLayout = new javax.swing.GroupLayout(jPanelChamps);
        jPanelChamps.setLayout(jPanelChampsLayout);
        jPanelChampsLayout.setHorizontalGroup(
            jPanelChampsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChampsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChampsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelChamps4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        jPanelChampsLayout.setVerticalGroup(
            jPanelChampsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChampsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelChamps4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE))
        );

        jButtonNouveau1.setText("Nouveau");
        jButtonNouveau1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNouveau1MouseClicked(evt);
            }
        });
        jButtonNouveau1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNouveau1ActionPerformed(evt);
            }
        });

        jButtonEnregistrer1.setText("Enregistrer");
        jButtonEnregistrer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnregistrer1ActionPerformed(evt);
            }
        });

        jButtonSupprimer1.setText("Supprimer");
        jButtonSupprimer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimer1ActionPerformed(evt);
            }
        });

        jButtonFermer1.setText("Fermer");
        jButtonFermer1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonFermer1MouseClicked(evt);
            }
        });
        jButtonFermer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermer1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelTrimestreLayout = new javax.swing.GroupLayout(jPanelTrimestre);
        jPanelTrimestre.setLayout(jPanelTrimestreLayout);
        jPanelTrimestreLayout.setHorizontalGroup(
            jPanelTrimestreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelChamps, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelTrimestreLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonNouveau1)
                .addGap(50, 50, 50)
                .addComponent(jButtonEnregistrer1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSupprimer1)
                .addGap(50, 50, 50)
                .addComponent(jButtonFermer1)
                .addGap(29, 29, 29))
        );
        jPanelTrimestreLayout.setVerticalGroup(
            jPanelTrimestreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTrimestreLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelChamps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelTrimestreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNouveau1)
                    .addComponent(jButtonEnregistrer1)
                    .addComponent(jButtonSupprimer1)
                    .addComponent(jButtonFermer1))
                .addContainerGap())
        );

        jPanelChamps2.setBackground(new java.awt.Color(204, 255, 204));
        jPanelChamps2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Paramètres", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 0))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Année");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Trimestre");

        anneeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anneeComboBoxActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Classe");

        classeComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                classeComboBoxMouseClicked(evt);
            }
        });
        classeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classeComboBoxActionPerformed(evt);
            }
        });

        nomEl_jLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        nomEl_jLabel.setForeground(new java.awt.Color(204, 0, 51));

        javax.swing.GroupLayout jPanelChamps2Layout = new javax.swing.GroupLayout(jPanelChamps2);
        jPanelChamps2.setLayout(jPanelChamps2Layout);
        jPanelChamps2Layout.setHorizontalGroup(
            jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChamps2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(anneeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelChamps2Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(classeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tf_IdAnnee, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_IdClasse, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChamps2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(15, 15, 15)
                        .addComponent(tf_IdTrim, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trimestreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_idEl, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(nomEl_jLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelChamps2Layout.setVerticalGroup(
            jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tf_idEl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tf_IdAnnee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel6)
                        .addComponent(anneeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(trimestreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tf_IdTrim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(21, 21, 21)
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nomEl_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(classeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tf_IdClasse, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelEntete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelTableau, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelChamps2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jPanelTrimestre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelEntete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelChamps2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelTableau, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelTrimestre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonFermerMouseClicked
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonFermerMouseClicked

    private void jButtonNouveauMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNouveauMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonNouveauMouseClicked

    private void jButtonNouveau1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNouveau1MouseClicked
        // TODO add your handling code here:
        effacer();
    }//GEN-LAST:event_jButtonNouveau1MouseClicked

    private void jButtonFermer1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonFermer1MouseClicked
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonFermer1MouseClicked

    private void notesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notesTableMouseClicked
        // TODO add your handling code here:        
        int ligne = notesTable.getSelectedRow();
//        Object unLibMatiere = notesTable.getValueAt(ligne, 0);
//        String LibMatiere = unLibMatiere.toString();//String.valueOf(unLibMatiere)
//        int1TextField.setText(LibMatiere);
        if (notesTable.getValueAt(ligne, 1) != null) {
            Object unInt1 = notesTable.getValueAt(ligne, 1);
            int1TextField.setText(unInt1.toString());  //String.valueOf(unInt1)
        } else {
            int1TextField.setText("");
        }
        if (notesTable.getValueAt(ligne, 2) != null) {
            Object unInt2 = notesTable.getValueAt(ligne, 2);
            int2TextField.setText(unInt2.toString());  //String.valueOf(unInt1)
        } else {
            int2TextField.setText("");
        }
        if (notesTable.getValueAt(ligne, 3) != null) {
            Object unInt3 = notesTable.getValueAt(ligne, 3);
            int3TextField.setText(unInt3.toString());  //String.valueOf(unInt1)
        } else {
            int3TextField.setText("");
        }
        if (notesTable.getValueAt(ligne, 4) != null) {
            Object unInt4 = notesTable.getValueAt(ligne, 4);
            int4TextField.setText(unInt4.toString());  //String.valueOf(unInt1)
        } else {
            int4TextField.setText("");
        }
        if (notesTable.getValueAt(ligne, 5) != null) {
            Object unInt5 = notesTable.getValueAt(ligne, 5);
            devTextField.setText(unInt5.toString());  //String.valueOf(unInt1)
        } else {
            devTextField.setText("");
        }

        if (notesTable.getValueAt(ligne, 6) != null) {
            Object unInt6 = notesTable.getValueAt(ligne, 6);
            compoTextField.setText(unInt6.toString());  //String.valueOf(unInt1)
        } else {
            compoTextField.setText("");
        }

    }//GEN-LAST:event_notesTableMouseClicked

    private void jButtonEnregistrer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnregistrer1ActionPerformed
        // TODO add your handling code here:
        double int1 = 0.0, int2 = 0.0, int3 = 0.0, int4 = 0.0, dev = 0.0, compo = 0.0;
        if (int1TextField.getText().equalsIgnoreCase("")) {
        } else {
            int1 = Double.parseDouble(int1TextField.getText());
        }
        if (int2TextField.getText().equalsIgnoreCase("")) {
        } else {
            int2 = Double.parseDouble(int2TextField.getText());
        }
        if (int3TextField.getText().equalsIgnoreCase("")) {
        } else {
            int3 = Double.parseDouble(int3TextField.getText());
        }
        if (int4TextField.getText().equalsIgnoreCase("")) {
        } else {
            int4 = Double.parseDouble(int4TextField.getText());
        }
        if (devTextField.getText().equalsIgnoreCase("")) {
        } else {
            dev = Double.parseDouble(devTextField.getText());
        }
        if (compoTextField.getText().equalsIgnoreCase("")) {
        } else {
            compo = Double.parseDouble(compoTextField.getText());
        }

        // Récupération du début de l'année sélectionné dans la combo anneeComboBox 
//        String anneeSelected = anneeComboBox.getSelectedItem().toString();
//        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
//        String classeSelected = classeComboBox.getSelectedItem().toString();
//        int idGp = returnIdGroupPedagByLibGp(classeSelected);
        String classeSelected = classeComboBox.getSelectedItem().toString();
        int idGpa = returnIdGroupPedagByLibGp(classeSelected);
        tf_IdClasse.setText("" + idGpa);
        int idGp = Integer.parseInt(tf_IdClasse.getText());

        String anneeSelected = anneeComboBox.getSelectedItem().toString();
        int idAn = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
        tf_IdAnnee.setText("" + idAn);
        String tf_IdAnneeStrg = tf_IdAnnee.getText();
        int idAnnee = Integer.parseInt(tf_IdAnneeStrg);

        String trimSelected = trimestreComboBox.getSelectedItem().toString();
//        int idTrim = returnIdTrimestreByLibelleTrimestre(trimSelected, idAnnee);
        tf_IdTrim.setText("" + trimSelected);
        String trimestreSelected = tf_IdTrim.getText();

//        String trimestreSelected = trimestreComboBox.getSelectedItem().toString();
        // Récupération du libellé du trimestre sélectionné dans la combo trimestreComboBox
//        String trimestreSelected = trimestreComboBox.getSelectedItem().toString();
        // Récupération de l'id de l'élève depuis la table eleveTable
        int idElev = 0;
        String idEleveGp = "";
        try {
//            int ligne = eleveTable.getSelectedRow();
//            Object idElevObj = eleveTable.getValueAt(ligne, 0);
//            idEleveGp = String.valueOf(idElevObj);
//            idElev = Integer.parseInt(idEleveGp);
            String idElStrg = tf_idEl.getText();
            idElev = Integer.parseInt(idElStrg);
//            JOptionPane.showMessageDialog(this, " idElev " + idElev);
            // Récupération de la matière depuis la table matiereTable;
            int idMat;
            try {
                int ligneMat = notesTable.getSelectedRow();
                Object idMatObj = notesTable.getValueAt(ligneMat, 8);
                String idMatStr = String.valueOf(idMatObj);
                idMat = Integer.parseInt(idMatStr);

                controleSections(anneeSelected, trimestreSelected, idElStrg, idMatStr);
                if (int1 > 20 || int1 < 0 || int2 > 20 || int2 < 0 || int3 > 20 || int3 < 0 || int4 > 20 || int4 < 0 || compo > 20 || compo < 0 || dev > 20 || dev < 0) {
                    JOptionPane.showMessageDialog(this, "Int1, Int2, Int3, Int4, Dev et Compo doivent être compris entre 0 et 20");
                } else {
                    double moyInt = moyenneInterro(int1TextField.getText(), int2TextField.getText(), int3TextField.getText(), devTextField.getText());
                    JOptionPane.showMessageDialog(this, "Calcul de la moyenne des interrogations " + moyInt);
                    // Calcul de la moyenne des interrogations
                    double moyMat = moyenneMatiere(devTextField.getText(), compoTextField.getText(), moyInt);
                    JOptionPane.showMessageDialog(this, "Calcul de la moyenne moyenneMatiere " + moyMat);
                    int idCoef = returnIdCoefByGpAndMat(idGp, idMat);
//                    JOptionPane.showMessageDialog(this, "Id de la matière sélectionnée " + idMat);
//                    JOptionPane.showMessageDialog(this, "Id du coefficient " + idCoef);
                    int idTrim = returnIdTrimestreByLibelleTrimestre(trimestreSelected, idAnnee);
//                  JOptionPane.showMessageDialog(this, "Id du trimestre sélectionnée " + idTrim);
                    int valCoef = returnValCoefByGpAndMat(idGp, idMat);
//                    JOptionPane.showMessageDialog(this, "Cefficient " + valCoef);
                    int idBul = returnIdBulletinByEleveGpAndTrimes(idElev, idTrim);
//                    JOptionPane.showMessageDialog(this, "idBul " + idBul);
                    if (!(int1TextField.getText().isEmpty())) {
                        updateInt1ByIdBulAndIdCoef(int1, idBul, idCoef);
//                        JOptionPane.showMessageDialog(this, "int1  " + int1);
                    }
                    if (!(int2TextField.getText().isEmpty())) {
                        updateInt2ByIdBulAndIdCoef(int2, idBul, idCoef);
//                        JOptionPane.showMessageDialog(this, "int2  " + int2);
                    }
                    if (!(int3TextField.getText().isEmpty())) {
                        updateInt3ByIdBulAndIdCoef(int3, idBul, idCoef);
//                        JOptionPane.showMessageDialog(this, "int3  " + int3);
                    }
                    if (!(int4TextField.getText().isEmpty())) {
                        updateInt4ByIdBulAndIdCoef(int4, idBul, idCoef);
//                        JOptionPane.showMessageDialog(this, "int4  " + int4);
                    }
                    if (!(devTextField.getText().isEmpty())) {
                        updateDevByIdBulAndIdCoef(dev, idBul, idCoef);
//                        JOptionPane.showMessageDialog(this, "dev  " + dev);
                    }
                    if (!(compoTextField.getText().isEmpty())) {
                        updateCompoByIdBulAndIdCoef(compo, idBul, idCoef);
//                        JOptionPane.showMessageDialog(this, "compo " + compo);
                    }
                    JOptionPane.showMessageDialog(this, "moyInt " + moyInt);
                    updateMoyIntIdBulAndIdCoef(moyInt, idBul, idCoef);// Insertion de la moyenne des interros

                    updateMoy20IdBulAndIdCoef(moyMat, idBul, idCoef);// Insertion de la moyenne dans la matière
//                    JOptionPane.showMessageDialog(this, "moyMat " + moyMat);
                    double moyCoef = moyMat * valCoef;// Calcul de la moyenne coefficiée
                    updateMoyCoefIdBulAndIdCoef(moyCoef, idBul, idCoef);// Insertion de la moyenne coefficiée
//                    JOptionPane.showMessageDialog(this, "moyCoef " + moyCoef);
//                    JOptionPane.showMessageDialog(this, "Avant moyenne Trimestrielle ");
//                    double moyTrim = returnMoyenneTrimestreByEleveByTrimestre(idElev, idTrim, idAnnee);
//            JOptionPane.showMessageDialog(this, "moyenneTrimestre " + moyTrim);
//            JOptionPane.showMessageDialog(this, "Après moyenne Trimestrielle ");

                    anneeComboBox.setSelectedItem(anneeSelected);
                    trimestreComboBox.setSelectedItem(trimestreSelected);
                    classeComboBox.setSelectedItem(classeSelected);

//                    persisterMoyTrimByIdBul(moyTrim, idBul);
                    affichetableNotes(idElev, idTrim, idGp, idAnnee);
                    int1TextField.setText("");
                    int2TextField.setText("");
                    int3TextField.setText("");
                    int4TextField.setText("");
                    compoTextField.setText("");
                    devTextField.setText("");
                }
                ///////////////////***********************************Fin Traitements ***************/////////////////////
//                eleveTable.isRowSelected(ligne);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, " Aucune matière n'a été sélectionnée ");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, " Aucun élève n'a été sélectionné ");
        }


    }//GEN-LAST:event_jButtonEnregistrer1ActionPerformed

    private void jButtonFermer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermer1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonFermer1ActionPerformed

    private void jButtonSupprimer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimer1ActionPerformed
        // TODO add your handling code here:
        String anneeSelected = anneeComboBox.getSelectedItem().toString();
        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
        String trimestreSelected = trimestreComboBox.getSelectedItem().toString();
        int idTrim = returnIdTrimestreByLibelleTrimestre(trimestreSelected, idAnnee);
        // Récupération de l'id de l'élève depuis la table eleveTable
        int ligneEle = eleveTable.getSelectedRow();
        Object idElevObj = eleveTable.getValueAt(ligneEle, 0);
        String idEleveGp = String.valueOf(idElevObj);
        int idElev = Integer.parseInt(idEleveGp);
//                            int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
        int idGp = returnIdGpByEleveGpByAnnee(idElev, idAnnee);
        // Récupération de l'id de l'élève depuis la table eleveTable
        int ligne = notesTable.getSelectedRow();
        Object idNoteObj = notesTable.getValueAt(ligne, 7);
        String Note = String.valueOf(idNoteObj);
        // Récupération de l'id de la matière depuis la table matiereTable
        String idMatStr = "";
        int idMat = 0;
        try {
            int ligneMat = notesTable.getSelectedRow();
            Object idMatObj = notesTable.getValueAt(ligneMat, 0);
            idMatStr = String.valueOf(idMatObj);
            idMat = returnIdMatiereByLibMatiere(idMatStr);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, " Aucune matière n'a été sélectionnée ");
        }
        int idNote = Integer.parseInt(Note);
        String req = "delete from DETAILS_BULLETIN where  ID_DETAILS_BULLETIN='" + idNote + "'";

        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer cette note ?");
                if (Conf == 0) {
                    instruction.executeQuery(req);
                    effacer();
                    affichetableNotes(idElev, idTrim, idGp, idAnnee);
                    JOptionPane.showMessageDialog(this, "Suppression effectuée avec succès");
                } else {
                    JOptionPane.showMessageDialog(this, "Suppression annulée");
                }
            }
        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }//GEN-LAST:event_jButtonSupprimer1ActionPerformed

    private void int1TextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_int1TextFieldFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_int1TextFieldFocusGained

    private void int1TextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_int1TextFieldMouseClicked
        // TODO add your handling code here:
        controleSelectMatiere();
    }//GEN-LAST:event_int1TextFieldMouseClicked

    private void eleveTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eleveTableMouseClicked
        // TODO add your handling code here:
        // Récupération de l'id de l'élève depuis la table eleveTable
        int ligne = eleveTable.getSelectedRow();
        Object idElevObj = eleveTable.getValueAt(ligne, 0);
        String idEleveGp = String.valueOf(idElevObj);
        int idElev = Integer.parseInt(idEleveGp);
        tf_idEl.setText("" + idElev);

        // Récupération du nom et du prenom
        Object nomElevObj = eleveTable.getValueAt(ligne, 2);
        String nomEleve = String.valueOf(nomElevObj);
        Object prenomElevObj = eleveTable.getValueAt(ligne, 3);
        String prenomEleve = String.valueOf(prenomElevObj);

        String anneeSelected = anneeComboBox.getSelectedItem().toString();
        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
        String classeSelected = classeComboBox.getSelectedItem().toString();
        int idGp = returnIdGroupPedagByLibGp(classeSelected);
        String trimestreSelected = trimestreComboBox.getSelectedItem().toString();
        int idTrim = returnIdTrimestreByLibelleTrimestre(trimestreSelected, idAnnee);
        affichetableNotes(idElev, idTrim, idGp, idAnnee);

        nomEl_jLabel.setText(nomEleve + " " + prenomEleve);

//        connectComboEleve(idElev);
//        eleveComboBox.addItem(idElev);
    }//GEN-LAST:event_eleveTableMouseClicked

    private void classeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classeComboBoxActionPerformed
        // TODO add your handling code here:
        String classeSelected = classeComboBox.getSelectedItem().toString();
        int idGp = returnIdGroupPedagByLibGp(classeSelected);
        String anneeSelected = anneeComboBox.getSelectedItem().toString();
        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
        affichetableEleve(idGp, idAnnee);
//        affichetableEleve();
//      affichetableMatiere();
    }//GEN-LAST:event_classeComboBoxActionPerformed

    private void int1TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_int1TextFieldFocusLost
        // TODO add your handling code here:
        double int1 = 0.0;
        if (!(int1TextField.getText().isEmpty())) {
            int1 = Double.parseDouble(int1TextField.getText());

            if (int1 > 20 || int1 < 0) {
                JOptionPane.showMessageDialog(this, "La note doit être comprise entre 0 et 20");
                int1TextField.setBackground(Color.red);
                int1TextField.setFocusable(true);
            }
        }
    }//GEN-LAST:event_int1TextFieldFocusLost

    private void int2TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_int2TextFieldFocusLost
        // TODO add your handling code here:
        double int2 = 0.0;
        if (!(int2TextField.getText().isEmpty())) {
            int2 = Double.parseDouble(int2TextField.getText());
            if (int2 > 20 || int2 < 0) {
                JOptionPane.showMessageDialog(this, "La note doit être comprise entre 0 et 20");
                int2TextField.setBackground(Color.red);
                int2TextField.setFocusable(true);
            }
        }
    }//GEN-LAST:event_int2TextFieldFocusLost

    private void jLabel10FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jLabel10FocusLost
        // TODO add your handling code here:
        double int3 = 0.0;
        if (!(int3TextField.getText().isEmpty())) {
            int3 = Double.parseDouble(int3TextField.getText());
            if (int3 > 20 || int3 < 0) {
                JOptionPane.showMessageDialog(this, "La note doit être comprise entre 0 et 20");
                int3TextField.setBackground(Color.red);
                int3TextField.setFocusable(true);
            }
        }
    }//GEN-LAST:event_jLabel10FocusLost

    private void int4TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_int4TextFieldFocusLost
        // TODO add your handling code here:
        double int4 = 0.0;
        if (!(int4TextField.getText().isEmpty())) {
            int4 = Double.parseDouble(int4TextField.getText());
            if (int4 > 20 || int4 < 0) {
                JOptionPane.showMessageDialog(this, "La note doit être comprise entre 0 et 20");
                int4TextField.setBackground(Color.red);
                int4TextField.setFocusable(true);
            }
        }
    }//GEN-LAST:event_int4TextFieldFocusLost

    private void devTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_devTextFieldFocusLost
        // TODO add your handling code here:
        double dev = 0.0;
        if (!(devTextField.getText().isEmpty())) {
            dev = Double.parseDouble(devTextField.getText());
            if (dev > 20 || dev < 0) {
                JOptionPane.showMessageDialog(this, "La note doit être comprise entre 0 et 20");
                devTextField.setBackground(Color.red);
                devTextField.setFocusable(true);
            }
        }
    }//GEN-LAST:event_devTextFieldFocusLost

    private void compoTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_compoTextFieldFocusLost
        // TODO add your handling code here:
        double compo = 0.0;
        if (!(compoTextField.getText().isEmpty())) {
            compo = Double.parseDouble(compoTextField.getText());
            if (compo > 20 || compo < 0) {
                JOptionPane.showMessageDialog(this, "La note doit être comprise entre 0 et 20");
                compoTextField.setBackground(Color.red);
                compoTextField.setFocusable(true);
            }
        }
    }//GEN-LAST:event_compoTextFieldFocusLost

    private void anneeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anneeComboBoxActionPerformed
        // TODO add your handling code here:
        String anneeSelected = anneeComboBox.getSelectedItem().toString();
        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
        connectComboTrimestreByAnnee(idAnnee);
    }//GEN-LAST:event_anneeComboBoxActionPerformed

    private void classeComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classeComboBoxMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_classeComboBoxMouseClicked

    private void int1TextFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_int1TextFieldMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_int1TextFieldMouseExited

    private void int2TextFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_int2TextFieldMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_int2TextFieldMouseExited

    private void int3TextFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_int3TextFieldMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_int3TextFieldMouseExited

    private void int4TextFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_int4TextFieldMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_int4TextFieldMouseExited

    private void int1TextFieldMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_int1TextFieldMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_int1TextFieldMouseEntered

    private void int4TextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_int4TextFieldMouseClicked
        // TODO add your handling code here:
        controleSelectMatiere();
    }//GEN-LAST:event_int4TextFieldMouseClicked

    private void int2TextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_int2TextFieldMouseClicked
        // TODO add your handling code here:
        controleSelectMatiere();
    }//GEN-LAST:event_int2TextFieldMouseClicked

    private void devTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_devTextFieldMouseClicked
        // TODO add your handling code here:
        controleSelectMatiere();
    }//GEN-LAST:event_devTextFieldMouseClicked

    private void compoTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_compoTextFieldMouseClicked
        // TODO add your handling code here:
        controleSelectMatiere();
    }//GEN-LAST:event_compoTextFieldMouseClicked

    private void int3TextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_int3TextFieldMouseClicked
        // TODO add your handling code here:
        controleSelectMatiere();
    }//GEN-LAST:event_int3TextFieldMouseClicked

    private void jButtonNouveau1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNouveau1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonNouveau1ActionPerformed
    //méthode permettant de mettre la note de int1

    public void updateInt1ByIdBulAndIdCoef(double int1, int idBull, int idCoef) {
        String appreProf = "";
        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  INT1 ='" + int1 + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req2);
            affichetableEleve();
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur updateInt1ByIdBulAndIdCoef " + e);
        }
    }

    //méthode permettant de mettre la note de int2
    public void updateInt2ByIdBulAndIdCoef(double int2, int idBull, int idCoef) {
        String appreProf = "";
        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  INT2 = '" + int2 + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req2);
            affichetableEleve();
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur updateInt2ByIdBulAndIdCoef " + e);

        }
    }

    //méthode permettant de mettre la note de int3
    public void updateInt3ByIdBulAndIdCoef(double int3, int idBull, int idCoef) {
        String appreProf = "";
        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  INT3 = '" + int3 + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req2);
                affichetableEleve();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur updateInt3ByIdBulAndIdCoef " + e);

        }
    }

    //méthode permettant de mettre la note de int4
    public void updateInt4ByIdBulAndIdCoef(double int4, int idBull, int idCoef) {
        String appreProf = "";
        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  INT4 = '" + int4 + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req2);
                affichetableEleve();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur updateInt4ByIdBulAndIdCoef " + e);
        }
    }

    //méthode permettant de mettre la note de dev
    public void updateDevByIdBulAndIdCoef(double dev, int idBull, int idCoef) {
        String appreProf = "";
        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  DEV_NOTE = '" + dev + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req2);
                affichetableEleve();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur updateDevByIdBulAndIdCoef " + e);

        }
    }

    //méthode permettant de mettre la note de dev
    public void updateCompoByIdBulAndIdCoef(double compo, int idBull, int idCoef) {
//        String appreProf = "";
//        double moy20, moyInt, moyCoef;
        int rang;
        String req2 = "update DETAILS_BULLETIN set  COMPO_NOTE = '" + compo + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req2);
//                affichetableEleve();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur updateCompoByIdBulAndIdCoef " + e);

        }
    }

    //méthode permettant de mettre la Moyenne sur 20
    public void updateMoy20IdBulAndIdCoef(double moy20, int idBull, int idCoef) {
        String appreProf = "";
        int rang;
        String req2 = "update DETAILS_BULLETIN set  MOY_20 = '" + moy20 + "' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req2);
                affichetableEleve();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur updateMoy20IdBulAndIdCoef " + e);

        }
    }
//méthode permettant de mettre la Moyenne des interros

    public void updateMoyIntIdBulAndIdCoef(double moyInt, int idBull, int idCoef) {
//        String appreProf = "";
//        int rang;
        String req2 = "update DETAILS_BULLETIN set  MOY_INT = '" + moyInt + "' where   ID_BULLETIN = '" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req2);
//                affichetableEleve();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur updateMoyIntIdBulAndIdCoef " + e);
            JOptionPane.showMessageDialog(this, "erreur ID_BULLETIN " + idBull);
            JOptionPane.showMessageDialog(this, "erreur ID_COEF " + idCoef);
        }
    }

    //méthode permettant de mettre la Moyenne coeffice
    public void updateMoyCoefIdBulAndIdCoef(double moyCoef, int idBull, int idCoef) {
        String appreProf = "";
        int rang;
        String req2 = "update DETAILS_BULLETIN set  MOY_COEF = '" + moyCoef + "' where   ID_BULLETIN = '" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req2);
//                affichetableEleve();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur updateMoyCoefIdBulAndIdCoef " + e);

        }
    }

    //méthode permettant de mettre la moyenne sur 20 dans une matière
    public void persisterMoy_20IdBulAndIdCoef(Double moy_20, int idBull, int idCoef) {
//        int rang;
        String req2 = "update DETAILS_BULLETIN set  MOY_20 = '" + moy_20 + "' where  ID_BULLETIN = '" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req2);
//                affichetableEleve();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, " erreur persisterMoy_20IdBulAndIdCoef " + e+" erreur ID_BULLETIN " + idBull+" erreur ID_COEF " + idCoef);

        }
    }

    //méthode permettant de mettre la moyenne coefficiée dans une matière
    public void persisterMoyCoefIdBulAndIdCoef(Double moyCoef, int idBull, int idCoef) {
//        int coef=0;
//        coef=returnValCoefByGpAndMat( returnIdGpByCoef( idCoef) ,  returnIdMatByCoef( idCoef));
        String req2 = "update DETAILS_BULLETIN set  MOY_COEF = '" + moyCoef + "' where  ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req2);
//                affichetableEleve();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterMoyCoefIdBulAndIdCoef " + e);

        }
    }

    //méthode permettant de mettre l'appréciation du Prof
    public void persisterAppreProfIdBulAndIdCoef(String appreProf, int idBull, int idCoef) {
        int rang;
        String req2 = "update DETAILS_BULLETIN set  APPRE_SIGNE_PROF = '" + appreProf + "' where  ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req2);
//                affichetableEleve();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterAppreProfIdBulAndIdCoef" + e);
        }
    }

    public int returnIdGpByCoef(int idCoef) {
        int idGp = 0;
        String reqRameneBulletin = "select ID_GROUP_PEDAG  from BULLETIN_NOTE where ID_COEF =  '" + idCoef + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet idBulTrouve = instruction.executeQuery(reqRameneBulletin);
                while (idBulTrouve.next()) {
                    idGp = idBulTrouve.getInt("ID_GROUP_PEDAG");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur returnIdGpByCoef: " + e);
        }
        return idGp;
    }

    public int returnIdMatByCoef(int idCoef) {
        int idMat = 0;
        String reqRameneBulletin = "select ID_MATIERE  from BULLETIN_NOTE where ID_COEF =  '" + idCoef + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet idBulTrouve = instruction.executeQuery(reqRameneBulletin);
                while (idBulTrouve.next()) {
                    idMat = idBulTrouve.getInt("ID_MATIERE");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur returnIdMatByCoef: " + e);
        }
        return idMat;
    }

    //méthode permettant de remplir le JCombobox cbprofile
    private void connectComboAnnee() {
        anneeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet resultat = instruction.executeQuery("SELECT * FROM ANNEE_SCOLAIRE");
                while (resultat.next()) {
                    String anneeDebut = resultat.getString("ANNEE_DEBUT");
                    String anneeFin = resultat.getString("ANNEE_FIN");
                    String libAnnee = anneeDebut + " - " + anneeFin;
                    Object obj = (Object) libAnnee;
                    anneeComboBox.addItem(obj);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur connectComboAnnee" + e);
        }
    }

    //méthode permettant de remplir le JCombobox cbprofile
    private void connectComboTrimestre(int idAnnee) {
        // Récupération de l'id de l'année depuis la combo anneeComboBox
        String anneeSelected = anneeComboBox.getSelectedItem().toString();
        // Récupération de l'id de l'élève depuis la table eleveTable
        idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
        trimestreComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery("SELECT LIB_TRIMES FROM TRIMESTRE where ID_ANNEE_SCOLAIRE = '" + idAnnee + "'");
            while (resultat.next()) {
                String libTrimestre = resultat.getString("LIB_TRIMES");
                Object obj2 = (Object) libTrimestre;
                trimestreComboBox.addItem(obj2);
            }
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur connectComboTrimestre " + e);
        }
    }

    //méthode permettant de remplir le JCombobox anneeComboBox 
    private void connectComboTrimestre() {
        trimestreComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                ResultSet resultatTrim = instruction.executeQuery("SELECT LIB_TRIMES FROM TRIMESTRE");
                while (resultatTrim.next()) {
                    String libTrim = resultatTrim.getString("LIB_TRIMES");
                    Object obj2 = (Object) libTrim;
                    trimestreComboBox.addItem(obj2);
                }
                //fermeture de la connexion
                instruction.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur connectComboTrimestre " + e);
        }
    }

    //méthode permettant de remplir le JCombobox anneeComboBox 
    private void connectComboTrimestreByAnnee(int idAnnee) {
        trimestreComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                ResultSet resultatTrim = instruction.executeQuery("SELECT LIB_TRIMES FROM TRIMESTRE "
                        + "where ID_ANNEE_SCOLAIRE = '" + idAnnee + "'");
                while (resultatTrim.next()) {
                    String libTrim = resultatTrim.getString("LIB_TRIMES");
                    Object obj2 = (Object) libTrim;
                    trimestreComboBox.addItem(obj2);
                }
                //fermeture de la connexion
                instruction.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur connectComboTrimestreByAnnee " + e);
        }
    }

    //méthode permettant de remplir le JCombobox anneeComboBox 
    private void connectComboClasse() {
        classeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet resultat = instruction.executeQuery("SELECT LIB_GROUP_PEDAG FROM GROUP_PEDAG");
                while (resultat.next()) {
                    String libGp = resultat.getString("LIB_GROUP_PEDAG");
                    Object obj2 = (Object) libGp;
                    classeComboBox.addItem(obj2);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur connectComboClasse " + e);
        }
    }

    //méthode pour l'affichge du tableau Eleve'
    private void affichetableEleve(int idGp, int idAnnee) {
        DefaultTableModel model = new DefaultTableModel();
        eleveTable.setModel(model); //affectation du model au tableau
//        JOptionPane.showMessageDialog(this, " A l'entrée de la méthode  affichetableEleve");
        model.addColumn("N°");
        model.addColumn("Matricule");
        model.addColumn("Nom");
        model.addColumn("Prénom");
        model.addColumn("Sexe");
        model.addColumn("Né(e) le");
        model.addColumn("Né(e) à");
        model.addColumn("Inscrit(e) le");
        model.addColumn("N°");
        TableColumn column, column1, column2, column3, column4, column5, column6, column7, column8 = null;
        column = eleveTable.getColumnModel().getColumn(0);
        column.setPreferredWidth(10); //
        column1 = eleveTable.getColumnModel().getColumn(1);
        column1.setPreferredWidth(100); //
        column2 = eleveTable.getColumnModel().getColumn(2);
        column2.setPreferredWidth(200); //
        column3 = eleveTable.getColumnModel().getColumn(3);
        column3.setPreferredWidth(200); //
        column4 = eleveTable.getColumnModel().getColumn(4);
        column4.setPreferredWidth(40); //
        column5 = eleveTable.getColumnModel().getColumn(5);
        column5.setPreferredWidth(200); //
        column6 = eleveTable.getColumnModel().getColumn(6);
        column6.setPreferredWidth(40); //
        column7 = eleveTable.getColumnModel().getColumn(7);
        column7.setPreferredWidth(200); //
        column8 = eleveTable.getColumnModel().getColumn(8);
        column8.setPreferredWidth(10); //
//        JOptionPane.showMessageDialog(this, " Juste avant le premier try ");
        try {
//            JOptionPane.showMessageDialog(this, " Juste après le premier try ");
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery("select ELEVE_GP.ID_ELEVE_GP,ELEVE_GP.ID_ELEVE ,MATRICULE_EL, NOM_EL, PRENOM_EL, SEXE,DATE_NAIS,LIEU_NAIS,DATE_INSCRI"
                    + " from ELEVE, ELEVE_GP"
                    + " where ELEVE_GP.ID_ELEVE = ELEVE.ID_ELEVE "
                    + " and ELEVE_GP.ID_GROUP_PEDAG = '" + idGp + "'"
                    + " and ELEVE_GP.ID_ANNEE_SCOLAIRE = '" + idAnnee + "'");
            while (resultat.next()) {
                String idEl = resultat.getString("ID_ELEVE_GP");
                String mleEl = resultat.getString("MATRICULE_EL");
                String nomEl = resultat.getString("NOM_EL");
                String prenomEl = resultat.getString("PRENOM_EL");
                String sexeEl = resultat.getString("SEXE");
                String neLe = resultat.getString("DATE_NAIS");
                String neA = resultat.getString("LIEU_NAIS");
                String inscritLe = resultat.getString("DATE_INSCRI");
                String idElGP = resultat.getString("ID_ELEVE_GP");
                model.addRow(new Object[]{idEl, mleEl, nomEl, prenomEl, sexeEl, neLe, neA, inscritLe, idElGP});
            }
        } catch (HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, " Aucun élève inscrit dans cette classe " + e);
        }
    }
    //méthode permettant de remplir le JCombobox anneeComboBox 

    //méthode pour l'affichge du tableau Eleve'
    private void affichetableEleve() {
        DefaultTableModel model = new DefaultTableModel();
        eleveTable.setModel(model); //affectation du model au tableau
        model.addColumn("N°");
        model.addColumn("Matricule");
        model.addColumn("Nom");
        model.addColumn("Prénom");
        model.addColumn("Sexe");
        TableColumn column, column1, column2, column3, column4 = null;
        column = eleveTable.getColumnModel().getColumn(0);
        column.setPreferredWidth(90); //
        column1 = eleveTable.getColumnModel().getColumn(1);
        column1.setPreferredWidth(300); //
        column2 = eleveTable.getColumnModel().getColumn(2);
        column2.setPreferredWidth(300); //
        column3 = eleveTable.getColumnModel().getColumn(3);
        column3.setPreferredWidth(300); //
        column4 = eleveTable.getColumnModel().getColumn(4);
        column4.setPreferredWidth(200); //
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery("select ID_ELEVE_GP ,MATRICULE_EL, NOM_EL, PRENOM_EL, SEXE from ELEVE, ELEVE_GP, GROUP_PEDAG"
                    + " where ELEVE_GP.ID_ELEVE = ELEVE.ID_ELEVE "
                    + " and ELEVE_GP.ID_GROUP_PEDAG = GROUP_PEDAG.ID_GROUP_PEDAG"
                    + " and GROUP_PEDAG.LIB_GROUP_PEDAG = '" + classeComboBox.getSelectedItem().toString() + "'");
            int i = 0;
            while (resultat.next()) {
                String idEl = resultat.getString("ID_ELEVE_GP");
                String mleEl = resultat.getString("MATRICULE_EL");
                String nomEl = resultat.getString("NOM_EL");
                String prenomEl = resultat.getString("PRENOM_EL");
                String sexeEl = resultat.getString("SEXE");
                model.addRow(new Object[]{idEl, mleEl, nomEl, prenomEl, sexeEl});
                i++;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "affichetableEleve: " + e);

        }
    }
    /*   */

    //méthode pour l'affichge du tableau Notes'
    private void affichetableNotes(int idEleve, int idTrim, int idGp, int idAnnee) {
        DefaultTableModel model = new DefaultTableModel();
        notesTable.setModel(model); //affectation du model au tableau
        model.addColumn("Matière ");
        model.addColumn("Int 1");
        model.addColumn("Int 2");
        model.addColumn("Int 3");
        model.addColumn("Int 4");
        model.addColumn("Dev ");
        model.addColumn("Compo ");
        model.addColumn("CodeNote ");
        model.addColumn("CodeMatière ");
        TableColumn column, column1, column2, column3, column4, column5, column6, column7, column8 = null;
        column = notesTable.getColumnModel().getColumn(0);
        column.setPreferredWidth(300); //
        column1 = notesTable.getColumnModel().getColumn(1);
        column1.setPreferredWidth(90); //
        column2 = notesTable.getColumnModel().getColumn(2);
        column2.setPreferredWidth(90); //
        column3 = notesTable.getColumnModel().getColumn(3);
        column3.setPreferredWidth(90); //
        column4 = notesTable.getColumnModel().getColumn(4);
        column4.setPreferredWidth(90); //
        column5 = notesTable.getColumnModel().getColumn(5);
        column5.setPreferredWidth(90); //
        column6 = notesTable.getColumnModel().getColumn(6);
        column6.setPreferredWidth(90); //
        column7 = notesTable.getColumnModel().getColumn(7);
        column7.setPreferredWidth(90); //
        column8 = notesTable.getColumnModel().getColumn(8);
        column8.setPreferredWidth(90); //
        String reqRameneNoteEleveGpTrimestre = "select  MATIERE.ID_MATIERE, LIB_MATIERE, INT1, INT2, INT3, INT4, DEV_NOTE, COMPO_NOTE, ID_DETAILS_BULLETIN"
                + " from DETAILS_BULLETIN, COEFFICIENT, MATIERE, BULLETIN_NOTE, ELEVE_GP"
                + " where DETAILS_BULLETIN.ID_COEF = COEFFICIENT.ID_COEF"
                + " and COEFFICIENT.ID_MATIERE = MATIERE.ID_MATIERE"
                + " and DETAILS_BULLETIN.ID_BULLETIN = BULLETIN_NOTE.ID_BULLETIN"
                + " and BULLETIN_NOTE.ID_ELEVE_GP = ELEVE_GP.ID_ELEVE_GP"
                + " and BULLETIN_NOTE.ID_ELEVE_GP = '" + idEleve + "'"
                + " and BULLETIN_NOTE.ID_TRIMES = '" + idTrim + "'"
                + " and ELEVE_GP.ID_GROUP_PEDAG = '" + idGp + "'"
                + " and ELEVE_GP.ID_ANNEE_SCOLAIRE = '" + idAnnee + "'"
                + " and MATIERE.LIB_MATIERE <> '" + "Conduite" + "'";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery(reqRameneNoteEleveGpTrimestre);
            while (resultat.next()) {
                String libMatiere = resultat.getString("LIB_MATIERE");
                String int1 = resultat.getString("INT1");
                String int2 = resultat.getString("INT2");
                String int3 = resultat.getString("INT3");
                String int4 = resultat.getString("INT4");
                String dev = resultat.getString("DEV_NOTE");
                String compo = resultat.getString("COMPO_NOTE");
                int idNote = resultat.getInt("ID_DETAILS_BULLETIN");
                int idMat = resultat.getInt("ID_MATIERE");
                model.addRow(new Object[]{libMatiere, int1, int2, int3, int4, dev, compo, idNote, idMat});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "affichetableNotes " + e);
        }
    }

    private void effacer() {
        int1TextField.setText("");
        int2TextField.setText("");
        int3TextField.setText("");
        int4TextField.setText("");
        devTextField.setText("");
        compoTextField.setText("");
    }

    private void enregNotes() {

    }

    /*
     * ***********************************************
     * moyenneInterro() PERMET DE CALCULER LES MOYENNE* 
     *  D'INTERRO DANS UNE MATIERE                   *
     *************************************************
     */
    public double moyenneInterro(String int1, String int2, String int3, String int4) {
        int nbreInterro = 4;
        double moyInterro = 0.0;
        if (int1.equals("") && int2.equals("") && int3.equals("") && int4.equals("")) {
            moyInterro = -1;
        } else {
            if (int1.equals("")) {
                int1 = "0";
                nbreInterro--;
            }
            if (int2.equals("")) {
                int2 = "0";
                nbreInterro--;
            }
            if (int3.equals("")) {
                int3 = "0";
                nbreInterro--;
            }
            if (int4.equals("")) {
                int4 = "0";
                nbreInterro--;
            }
            moyInterro = (Double.parseDouble(int1) + Double.parseDouble(int2) + Double.parseDouble(int3) + Double.parseDouble(int4)) / nbreInterro;
        }
        System.out.println("Moyenne d'interrogation " + moyInterro);
        return moyInterro;
    }

    /*
     * *******************************************************************
     * moyenneMatiere() PERMET DE CALCULER LA MOYENNE D'UN ELEVE DANS UNE*
     * MATIERE                                                           * 
     *********************************************************************
     */
    public double moyenneMatiere(String noteDev, String noteCompo, double moyInterro) {
        double moyMatiere = 0;
        int diviseurMoy = 1;
        if (moyInterro == -1 && noteDev.equals("") && noteCompo.equals("")) {
            moyMatiere = -1;
        } else {
            diviseurMoy = 3;
            if (moyInterro == -1) {
                diviseurMoy--;
            }
            if (noteCompo.equals("")) {
                noteCompo = "0";
                diviseurMoy--;
            }
            if (noteDev.equals("")) {
                noteDev = "0";
                diviseurMoy--;
            }
            moyMatiere = (Double.parseDouble(noteCompo) + Double.parseDouble(noteDev) + moyInterro) / diviseurMoy;
        }
        return moyMatiere;
    }
    /*
     * *******************************************************************
     * moyenneMatiere() PERMET DE CALCULER LA MOYENNE D'UN ELEVE DANS UNE*
     * MATIERE                                                           * 
     *********************************************************************
     */

    public double moyenneCoefMatiere(int idCoef, String noteDev, String noteCompo, double moyInterro) {
        double moyMatiere = 0;
        int diviseurMoy = 1;
        if (moyInterro == -1 && noteDev.equals("") && noteCompo.equals("")) {
            moyMatiere = -1;
        } else {
            diviseurMoy = 3;
            if (moyInterro == -1) {
                diviseurMoy--;
            }
            if (noteCompo.equals("")) {
                noteCompo = "0";
                diviseurMoy--;
            }
            if (noteDev.equals("")) {
                noteDev = "0";
                diviseurMoy--;
            }
            moyMatiere = (Double.parseDouble(noteCompo) + Double.parseDouble(noteDev) + moyInterro) / diviseurMoy;
        }
        return moyMatiere;
    }

    public int returnIdGpByEleveGpByAnnee(int idElev, int idAnnee) {

        // Récupération de l'id de l'année à partir de son champ  ANNEE_DEBUT
        int idGp = 0;// Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select ID_GROUP_PEDAG  from  ELEVE_GP where ID_ELEVE_GP =  '" + idElev + "' and ID_ANNEE_SCOLAIRE = '" + idAnnee + "' ";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
                while (idGpTrouve.next()) {
                    idGp = idGpTrouve.getInt("ID_GROUP_PEDAG");
                }
            }
        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(this, "erreur returnIdGpByEleveGpByAnnee: " + e);
        }
        return idGp;
    }

    public int returnIdSerieByElevGpByAnnee(int idGp) {

        int idSerie = 0;// Récupération de l'id du groupe pédagogique de l'élève sélectionné
        // Récupération de l'id de la série du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select ID_GROUP_PEDAG, ID_SERIE   from  GROUP_PEDAG where ID_GROUP_PEDAG =  '" + idGp + "' ";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
                while (idGpTrouve.next()) {
                    idSerie = idGpTrouve.getInt("ID_SERIE");
                }
            }
        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(this, "erreur returnIdSerieByElevGpByAnnee: " + e);
        }
        return idSerie;
    }

    public int returnIdPromoByEleveGpByAnnee(int idGp) {

        int idPromo = 0;
        // Récupération de l'id de la promotion du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select ID_GROUP_PEDAG, ID_PROMO  from  GROUP_PEDAG where ID_GROUP_PEDAG =  '" + idGp + "' ";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
                while (idGpTrouve.next()) {
                    idPromo = idGpTrouve.getInt("ID_PROMO");
                }
            }
        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(this, "erreur returnIdPromoByEleveGpByAnnee: " + e);
        }
        return idPromo;
    }

    public int returnIdCoefByGpAndMat(int idGp, int idMat) {
        // Récupération de l'id du coefficient de la matière choisie connaissant la promotion et la série
        int idCoef = 0;
        String reqRameneCoef = "select ID_COEF  from  COEFFICIENT where ID_MATIERE =  '" + idMat + "' and ID_GROUP_PEDAG = '" + idGp + "'  ";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet idCoefTrouve = instruction.executeQuery(reqRameneCoef);
                while (idCoefTrouve.next()) {
                    idCoef = idCoefTrouve.getInt("ID_COEF");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur returnIdCoefByGpAndMat: " + e);
        }
        return idCoef;
    }

    public int returnValCoefByGpAndMat(int idGp, int idMat) {
        // Récupération de l'id du coefficient de la matière choisie connaissant la promotion et la série
        int valCoef = 0;
        String reqRameneCoef = "select *  from  COEFFICIENT where ID_MATIERE =  '" + idMat + "' and ID_GROUP_PEDAG = '" + idGp + "'  ";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet valCoefTrouve = instruction.executeQuery(reqRameneCoef);
                while (valCoefTrouve.next()) {
                    valCoef = valCoefTrouve.getInt("VALEUR_COEF");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur returnValCoefByGpAndMat: " + e);
        }
        return valCoef;
    }

    public int returnValCoefByGpAndMat(int idCoef) {
        // Récupération de l'id du coefficient de la matière choisie connaissant la promotion et la série
        int valCoef = 0;
        String reqRameneCoef = "select *  from  COEFFICIENT where ID_COEF =  '" + idCoef + "' ";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet valCoefTrouve = instruction.executeQuery(reqRameneCoef);
                while (valCoefTrouve.next()) {
                    valCoef = valCoefTrouve.getInt("VALEUR_COEF");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur returnValCoefByIdCoef: " + e);
        }
        return valCoef;
    }

    public int returnIdBulletinByEleveGpAndTrimes(int idEleveGp, int idTrimes) {
        int idBul = 0;
        String reqRameneBulletin = "select ID_BULLETIN  from BULLETIN_NOTE where ID_ELEVE_GP =  '" + idEleveGp + "' and ID_TRIMES = '" + idTrimes + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet idBulTrouve = instruction.executeQuery(reqRameneBulletin);
                while (idBulTrouve.next()) {
                    idBul = idBulTrouve.getInt("ID_BULLETIN");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur returnIdBulletinByEleveGpAndTrimes: " + e);
        }
        return idBul;
    }

    public int returnIdDetailsBulletinByCoef(int idCoef) {
        String reqRameneDetailsBulletin = "select *  from  DETAILS_BULLETIN where ID_COEF =  '" + idCoef + "'";

        return 0;
    }

    public int returnIdAnneeByAnneeDebut(String anneeDebut) {
        // Récupération de l'id de l'année à partir de son champ  ANNEE_DEBUT
        int idAnnee = 0;
        String reqRameneIdAnnee = "select ID_ANNEE_SCOLAIRE from ANNEE_SCOLAIRE where ANNEE_DEBUT = '" + anneeDebut + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet idAnneeTrouve = instruction.executeQuery(reqRameneIdAnnee);
                while (idAnneeTrouve.next()) {
                    idAnnee = idAnneeTrouve.getInt("ID_ANNEE_SCOLAIRE");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur returnIdAnneeByAnneeDebut : " + e);
        }
        return idAnnee;
    }

    public int returnIdTrimestreByLibelleTrimestre(String libelleTrimestre, int idAnnee) {

        // Récupération de l'id du trimestre à partir de son libellé et de l'id de l'année
        String reqRameneIdTrimesAnnee = "select ID_TRIMES from TRIMESTRE where LIB_TRIMES =  '" + libelleTrimestre + "' and ID_ANNEE_SCOLAIRE = '" + idAnnee + "' ";

        int idTrimestre = 0;
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet idTrimestreTrouve = instruction.executeQuery(reqRameneIdTrimesAnnee);
                while (idTrimestreTrouve.next()) {
                    idTrimestre = idTrimestreTrouve.getInt("ID_TRIMES");
                }
            }
        } catch (Exception e) {
        }
        return idTrimestre;
    }

    public int returnIdBulletinByEleveGpAndTrimestre(int eleve, int trimestre) {
        // Récupération du bulletin à partir de l'élève et du trimestre selectionné
        int idBulletin = 0;
        String reqRameneBulletinTrim = "select * from BULLETIN_NOTE where ID_ELEVE_GP =  '" + eleve + "' and ID_TRIMES = '" + trimestre + "' ";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet idBulletinTrouve = instruction.executeQuery(reqRameneBulletinTrim);
                while (idBulletinTrouve.next()) {
                    idBulletin = idBulletinTrouve.getInt("ID_BULLETIN");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur returnIdBulletinByEleveGpAndTrimestre : " + e);
        }
        return idBulletin;
    }

    public int returnIdDetailsBulletinByBulletinAndTrimestre(int bulletin, int matiere) {
        // Récupération de l'id du detailsBulletin à partir de de l'élève et de la matière selectionnée
        int idDetailsBulletin = 0;
        String reqRameneDetailsBulletin = "select * from DETAILS_BULLETIN where ID_BULLETIN =  '" + bulletin + "' and ID_COEF = '" + matiere + "' ";

        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet idDetailsBulletinTrouve = instruction.executeQuery(reqRameneDetailsBulletin);
                while (idDetailsBulletinTrouve.next()) {
                    idDetailsBulletin = idDetailsBulletinTrouve.getInt("ID_DETAILS_BULLETIN");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idDetailsBulletin;
    }

    public int returnIdGroupPedagByLibGp(String libGp) {
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select *  from  GROUP_PEDAG where LIB_GROUP_PEDAG =  '" + libGp + "' ";
        int idGp = 0;
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
            while (idGpTrouve.next()) {
                idGp = idGpTrouve.getInt("ID_GROUP_PEDAG");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idGp;
    }

    public double returnMoyMatByBulletinAndTrimestre(int bulletin, int matiere) {
        // Récupération de l'id du detailsBulletin à partir de de l'élève et de la matière selectionnée
        double moyMat = 0;
        String reqRameneDetailsBulletin = "select * from DETAILS_BULLETIN where ID_BULLETIN =  '" + bulletin + "' and ID_COEF = '" + matiere + "' ";

        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet moyMatTrouve = instruction.executeQuery(reqRameneDetailsBulletin);
                while (moyMatTrouve.next()) {
                    moyMat = moyMatTrouve.getDouble("MOY_20");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return moyMat;
    }

    public int returnIdGroupPedagByEleveGpAndAnnee(int eleve, int annee) {
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select *  from  ELEVE_GP where ID_ELEVE_GP =  '" + eleve + "' and ID_ANNEE_SCOLAIRE = '" + annee + "' ";
        int idGp = 0, idSerie = 0, idPromo = 0;
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
                while (idGpTrouve.next()) {
                    idGp = idGpTrouve.getInt("ID_GROUP_PEDAG");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idGp;
    }

    /*
     * ******************************************************
     * moyenneEleveByTrimestre(BulletinNote bulletin) PERMET DE CALCULER LA MOYENNE*
     * D'UN ELEVE POUR UN TRIMESTRE DONNE                   *
     ********************************************************/
    /**/
    public double moyenneTrimestreByEleveByTrimestre(int idElevGp, int idTrim, int idAnnee) {
        //        List<DetailsBulletin> details = ejbFacade.eleveDetailsBulletinByTrimestre(bulletin);
        // Récupération du libellé du trimestre sélection dans la combo trimestreComboBox
        String monTrimestre = trimestreComboBox.getSelectedItem().toString();
        // Récupération du début de l'année sélectionné dans la combo anneeComboBox
        String monAnneeDebut = anneeComboBox.getSelectedItem().toString();
        int idEl = 0;
        // Récupération de l'id de l'élève depuis la table eleveTable
        int ligne = eleveTable.getSelectedRow();
        Object idElevObj = eleveTable.getValueAt(ligne, 0);
        String idEleveGp = String.valueOf(idElevObj);
        idEl = Integer.parseInt(idEleveGp);
        // Récupération de l'id de la matière depuis la table matiereTable
        int idMat = 0;
        int ligne1 = notesTable.getSelectedRow();
        Object idMatObj = notesTable.getValueAt(ligne, 0);
        String idMatStr = String.valueOf(idElevObj);
        idMat = Integer.parseInt(idMatStr);

        // Récupération de l'id du groupe pédagogique
        int idGp = returnIdGroupPedagByEleveGpAndAnnee(idElevGp, idAnnee);
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        int sommeCoef = 0;
        int idCoef = 0;
        int valCoef = 0;
        double moyMat = 0.0;
        double moyCoefMat = 0.0;
        double sommeMoyCoef = 0;
        double moyTrimes = 0.0;
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneDetailsBullByIdBull = "select *  from  DETAILS_BULLETIN where ID_BULLETIN =  '" + idBul + "'  ";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet listDetailsBull = instruction.executeQuery(reqRameneDetailsBullByIdBull);
                while (listDetailsBull.next()) {
                    moyCoefMat = listDetailsBull.getDouble("MOY_COEF");//Récupération de la moyenne de la moyenne coefficiée de la matière courante
                    idCoef = listDetailsBull.getInt("ID_COEF"); //Récupération de l'id du coefficient de la matière courante
                    valCoef = returnValCoefByGpAndMat(idCoef); //Récupération  du coefficient de la matière courante
                    sommeCoef += valCoef;  //Accumulation des coefficients des matière
                    sommeMoyCoef += moyCoefMat * valCoef;   //Accumulation des moyennes coefficiées
                }
            }
        } catch (Exception e) {
        }
        moyTrimes = sommeMoyCoef / sommeCoef;
        return moyTrimes;
    }

    public double returnMoyenneTrimestreByEleveByTrimestre(int idElevGp, int idTrim, int idAnnee) {
        // Récupération de l'id du groupe pédagogique
        int idGp = returnIdGroupPedagByEleveGpAndAnnee(idElevGp, idAnnee);
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        int sommeCoef = 0;
        int idCoef = 0;
        int valCoef = 0;
        double moyMat = 0.0;
        double moyCoefMat = 0.0;
        double sommeMoyCoef = 0;
        double moyTrimes = 0.0;
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneDetailsBullByIdBull = "select *  from  DETAILS_BULLETIN where ID_BULLETIN =  '" + idBul + "'  ";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet listDetailsBull = instruction.executeQuery(reqRameneDetailsBullByIdBull);
                while (listDetailsBull.next()) {
                    moyCoefMat = listDetailsBull.getDouble("MOY_COEF");//Récupération de la moyenne de la moyenne coefficiée de la matière courante
                    idCoef = listDetailsBull.getInt("ID_COEF"); //Récupération de l'id du coefficient de la matière courante
                    valCoef = returnValCoefByGpAndMat(idCoef); //Récupération  du coefficient de la matière courante
                    sommeCoef += valCoef;  //Accumulation des coefficients des matière
                    sommeMoyCoef += moyCoefMat;   //Accumulation des moyennes coefficiées
                }
            }
        } catch (Exception e) {
        }
        moyTrimes = sommeMoyCoef / sommeCoef;
        return moyTrimes;
    }
    /*
     * *********************************************************************
     * persisterMoyEleveByTrimestre() PERMET DE PERSISTER UN OBJET BULLETIN*
     ***********************************************************************/

    public void persisterMoyEleveByTrimestre(int idElevGp, int idTrim, int idAnnee, double moy) {
        // Récupération de l'id du bulletin de l'élève pour le trimestre
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        String req = "update BULLETIN_NOTE set MOY_TRIM = '" + moy + "' where  ID_BULLETIN='" + idBul + "'";
        try {
            try ( //Class.forName(pilote);
                    Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterMoyEleveByTrimestre: " + e);

        }
    }

    public void persisterRangEleveByTrimestre(int idElevGp, int idTrim, int idAnnee, int rang) {
        // Récupération de l'id du bulletin de l'élève pour le trimestre
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        String req = "update BULLETIN_NOTE set RANG = '" + rang + "' where  ID_BULLETIN='" + idBul + "'";
        try {

            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterRangEleveByTrimestre: " + e);
        }
    }

    public void persisterMoyClasseEleveByTrimestre(int idElevGp, int idTrim, int idAnnee, double moyClasse) {
        // Récupération de l'id du bulletin de l'élève pour le trimestre
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        String req = "update BULLETIN_NOTE set MOY_CLASSE = '" + moyClasse + "' where  ID_BULLETIN='" + idBul + "'";
        try {

            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterMoyClasseEleveByTrimestre: " + e);

        }
    }

    public void persisterPlusFaibleMoyClasseEleveByTrimestre(int idElevGp, int idTrim, int idAnnee, double plusFaibleMoy) {
        // Récupération de l'id du bulletin de l'élève pour le trimestre
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        String req = "update BULLETIN_NOTE set PLUS_FAIBLE_MOY = '" + plusFaibleMoy + "' where  ID_BULLETIN='" + idBul + "'";
        try {
            try ( //Class.forName(pilote);
                    Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterPlusFaibleMoyClasseEleveByTrimestre: " + e);

        }
    }

    public void persisterPlusForteMoyClasseEleveByTrimestre(int idElevGp, int idTrim, int idAnnee, double plusForteMoy) {
        // Récupération de l'id du bulletin de l'élève pour le trimestre
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElevGp, idTrim);
        String req = "update BULLETIN_NOTE set PLUS_FORTE_MOY = '" + plusForteMoy + "' where  ID_BULLETIN='" + idBul + "'";
        try {
            try ( //Class.forName(pilote);
                    Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur persisterPlusForteMoyClasseEleveByTrimestre: " + e);

        }
    }

    // Récupération de l'id de la matière dont le libellé est "Conduite"
    public int returnIdConduite() {
        int idConduite = 0;
        String conduite = "Conduite";
        String reqRameneIdConduite = "select * from Matiere where LIB_MATIERE =  '" + conduite + "' ";

        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                ResultSet idConduiteTrouve = instruction.executeQuery(reqRameneIdConduite);
                while (idConduiteTrouve.next()) {
                    idConduite = idConduiteTrouve.getInt("ID_MATIERE");
                }
                //fermeture de la connexion
                instruction.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idConduite;
    }

    // Récupération de l'id de la matière à partir de son libellé
    public int returnIdMatiereByLibMatiere(String libMatiere) {
        int idMat = 0;
//        String conduite = "Conduite";
        String reqRameneIdConduite = "select * from Matiere where LIB_MATIERE =  '" + libMatiere + "' ";

        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                ResultSet idConduiteTrouve = instruction.executeQuery(reqRameneIdConduite);
                while (idConduiteTrouve.next()) {
                    idMat = idConduiteTrouve.getInt("ID_MATIERE");
                }
                //fermeture de la connexion
                instruction.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idMat;
    }

    public void ajouterBulletin(int idElev, int idTrim, int idAnnee) {

        String req = "insert into BULLETIN_NOTE (ID_ELEVE_GP,ID_TRIMES) values ('" + idElev + "','" + idTrim + "')";
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur ajouterBulletin: " + e);
        }
    }

    public void ajouterDetailsBulletin(int idElev, int idTrim, int idAnnee, int idMat) {
        int idBul = returnIdBulletinByEleveGpAndTrimestre(idElev, idTrim);
        int idGp = returnIdGpByEleveGpByAnnee(idElev, idAnnee);
        int idCoef = returnIdCoefByGpAndMat(idGp, idMat);
        JOptionPane.showMessageDialog(this, "Id du bulletin créé " + idBul);
        JOptionPane.showMessageDialog(this, "Id du groupe pédagogique correspondant" + idGp);
        JOptionPane.showMessageDialog(this, "Id du coefficient correspondant" + idGp);
//        String req2 = "SELECT ID_BULLETIN FROM BULLETIN_NOTE WHERE ID_BULLETIN = '" + idBul + "'";

        String req = "insert into DETAILS_BULLETIN (ID_BULLETIN,ID_COEF) values ('" + idBul + "','" + idCoef + "')";
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur ajouterDetailsBulletin: " + e);
        }
    }

    //méthode indiquant si les notes on été ouvertes ou arrêtées
    private int returnSituationNotesByIdBulletin(int idBul) {
        int valNoteArrete = 0;
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery("SELECT NOTES_SITUATION FROM BULLETIN_NOTE"
                    + " where  ID_BULLETIN = '" + idBul + "'");
            while (resultat.next()) {
                valNoteArrete = resultat.getInt("NOTES_SITUATION");
            }
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur:returnSituationNotesByIdBulletin " + e);
        }
        return valNoteArrete;
    }

    /*
     ***********************************************************************
     * appreciationByMatiere() PERMET DE DONNER D'UNE MOYENNE D'UNE MATIERE*
     ***********************************************************************/
    public String appreciationMoy(double moy) {
        String appreciation = null;
        if (moy >= 0 && moy < 2) {
            appreciation = "Nul";
        }
        if (moy >= 2 && moy < 5) {
            appreciation = "Mauvais";
        }
        if (moy >= 5 && moy < 10) {
            appreciation = "Insuffisant";
        }
        if (moy >= 10 && moy < 12) {
            appreciation = "Passable";
        }
        if (moy >= 12 && moy < 14) {
            appreciation = "Assez-Bien";
        }
        if (moy >= 14 && moy < 16) {
            appreciation = "Bien";
        }
        if (moy >= 16 && moy < 19) {
            appreciation = "Très-Bien";
        }
        if (moy >= 19 && moy <= 20) {
            appreciation = "Excellent";
        }
        return appreciation;
    }

    public void controleSections(String anneeSelected, String trimestreSelected, String idEleveGp, String idMatStr) {
        if (anneeSelected.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La sélection d'une année est obligatoire ");
        }
        if (trimestreSelected.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La sélection d'un trimestre est obligatoire ");
        }
        if (idEleveGp.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La sélection d'un élève est obligatoire ");
        }
        if (idMatStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La sélection d'une matière est obligatoire ");
        }
    }

    /*
     * ***********************************************************************
     * LA METHODE onRowEditDuTableauNotes PERMET D'ENREGISTREMENT            *
     * D'UN ELEVE DANS UN NOMBRE DE MATIERE SOUHAITE                         *
     * ***********************************************************************
     */
    public boolean controlerSaisirNote(String int1, String int2, String int3, String int4, String noteCompo, String noteDev) {
        if (int1.equals("")) {
            int1 = "0";
        }
        if (int2.equals("")) {
            int2 = "0";
        }
        if (int3.equals("")) {
            int3 = "0";
        }
        if (int4.equals("")) {
            int4 = "0";
        }
        if (noteCompo.equals("")) {
            noteCompo = "0";
        }
        if (noteDev.equals("")) {
            noteDev = "0";
        }
        return true;
    }

    //méthode permettant de mettre la moyenne trimestrielle
    public void persisterMoyTrimByIdBul(double moyTrim, int idBull) {
        int rang;
        String req2 = "update BULLETIN_NOTE set  MOY_TRIM ='" + moyTrim + "' where  ID_BULLETIN = '" + idBull + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req2);
            }
        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
    }

    public void controleSelectMatiere() {
        int ligneMat = notesTable.getSelectedRow();
        if (ligneMat == -1) {
            JOptionPane.showMessageDialog(this, "Aucune matière n'a été sélectionnée ");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NotesGPJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NotesGPJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NotesGPJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NotesGPJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NotesGPJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox anneeComboBox;
    private javax.swing.JComboBox classeComboBox;
    private javax.swing.JTextField compoTextField;
    private javax.swing.JTextField devTextField;
    private javax.swing.JTable eleveTable;
    private javax.swing.JTextField int1TextField;
    private javax.swing.JTextField int2TextField;
    private javax.swing.JTextField int3TextField;
    private javax.swing.JTextField int4TextField;
    private javax.swing.JButton jButtonEnregistrer;
    private javax.swing.JButton jButtonEnregistrer1;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonFermer1;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonNouveau;
    private javax.swing.JButton jButtonNouveau1;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonSupprimer1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanelBoutons;
    private javax.swing.JPanel jPanelChamps;
    private javax.swing.JPanel jPanelChamps2;
    private javax.swing.JPanel jPanelChamps3;
    private javax.swing.JPanel jPanelChamps4;
    private javax.swing.JPanel jPanelEntete;
    private javax.swing.JPanel jPanelTableau;
    private javax.swing.JPanel jPanelTrimestre;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel nomEl_jLabel;
    private javax.swing.JTable notesTable;
    private javax.swing.JLabel tf_IdAnnee;
    private javax.swing.JLabel tf_IdClasse;
    private javax.swing.JLabel tf_IdTrim;
    private javax.swing.JLabel tf_idEl;
    private javax.swing.JComboBox trimestreComboBox;
    // End of variables declaration//GEN-END:variables
}
