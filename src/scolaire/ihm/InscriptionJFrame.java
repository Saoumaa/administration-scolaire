/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scolaire.ihm;

import com.toedter.calendar.JDateChooser;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Instant;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
//import javax.swing.ComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.exolab.castor.types.Date;

/**
 *
 * @author obama
 */
public final class InscriptionJFrame extends javax.swing.JFrame {

    /**
     * Creates new form AnneeJFrame
     */
    public InscriptionJFrame() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("log.png")));
        connectComboAnnee();
        connectComboClasse();
        String classeSelected = classeComboBox.getSelectedItem().toString();
        int idGp = returnIdGroupPedagByLibGp(classeSelected);
        String anneeSelected = anneeComboBox.getSelectedItem().toString();
        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
        affichetableEleve(idGp, idAnnee);
        dateInscriTextField.setDate(new java.util.Date());
    }

    private static void ImageToFile(ImageIcon i, String file) {
        BufferedImage output = ImageIconToBufferedImage(i.getImage());
        File fic = new File(file);
        try {
            ImageIO.write(output, "jpg", fic);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static BufferedImage ImageIconToBufferedImage(Image image) {
        image = new ImageIcon(image).getImage();
        BufferedImage bufferedImage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_RGB);
        Graphics g = bufferedImage.createGraphics();
        g.drawImage(image, 0, 0, null);
        g.dispose();
        return (bufferedImage);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelEntete = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanelChamps = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        regimeComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        classeComboBox = new javax.swing.JComboBox();
        anneeComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        eleveTable = new javax.swing.JTable();
        jPanelBoutons = new javax.swing.JPanel();
        jButtonNouveau = new javax.swing.JButton();
        jButtonEnregistrer = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        MatriculejLabel = new javax.swing.JLabel();
        NomjLabel = new javax.swing.JLabel();
        PrenomjLabel = new javax.swing.JLabel();
        SexejLabel = new javax.swing.JLabel();
        LieuNaisjLabel = new javax.swing.JLabel();
        DateInscriptionjLabel = new javax.swing.JLabel();
        DateNaisjLabel = new javax.swing.JLabel();
        CheminPhotojLabel = new javax.swing.JLabel();
        matriculeTextField = new javax.swing.JTextField();
        nomTextField = new javax.swing.JTextField();
        prenomTextField = new javax.swing.JTextField();
        sexeComboBox = new javax.swing.JComboBox();
        lieuNaisTextField = new javax.swing.JTextField();
        statutComboBox = new javax.swing.JComboBox();
        imgPlace = new javax.swing.JLabel();
        tf_lienPhoto = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanelEntete.setBackground(new java.awt.Color(0, 102, 51));

        jLabel1.setFont(new java.awt.Font("Wide Latin", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("INSCRIPTION D'UN ELEVE");

        javax.swing.GroupLayout jPanelEnteteLayout = new javax.swing.GroupLayout(jPanelEntete);
        jPanelEntete.setLayout(jPanelEnteteLayout);
        jPanelEnteteLayout.setHorizontalGroup(
            jPanelEnteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelEnteteLayout.setVerticalGroup(
            jPanelEnteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEnteteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelChamps.setBackground(new java.awt.Color(204, 255, 204));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Année");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Régime");

        regimeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "INTERNE", "EXTERNE" }));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Classe");

        classeComboBox.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                classeComboBoxComponentAdded(evt);
            }
        });
        classeComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                classeComboBoxFocusGained(evt);
            }
        });
        classeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classeComboBoxActionPerformed(evt);
            }
        });

        anneeComboBox.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                anneeComboBoxComponentAdded(evt);
            }
        });
        anneeComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                anneeComboBoxFocusGained(evt);
            }
        });
        anneeComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                anneeComboBoxMouseClicked(evt);
            }
        });
        anneeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anneeComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChampsLayout = new javax.swing.GroupLayout(jPanelChamps);
        jPanelChamps.setLayout(jPanelChampsLayout);
        jPanelChampsLayout.setHorizontalGroup(
            jPanelChampsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChampsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(anneeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(regimeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(classeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelChampsLayout.setVerticalGroup(
            jPanelChampsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChampsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChampsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(regimeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(classeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anneeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        eleveTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "N°Elève", "Matricule", "Nom", "Prénom", "Sexe", "Né(e) Le", "Né(e) à", "Inscrit(e) Le", "N°Inscription"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        eleveTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eleveTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(eleveTable);

        jButtonNouveau.setText("Nouveau");
        jButtonNouveau.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNouveauMouseClicked(evt);
            }
        });
        jButtonNouveau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNouveauActionPerformed(evt);
            }
        });

        jButtonEnregistrer.setText("Enregistrer");
        jButtonEnregistrer.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jButtonEnregistrerMouseMoved(evt);
            }
        });
        jButtonEnregistrer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonEnregistrerMouseEntered(evt);
            }
        });
        jButtonEnregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnregistrerActionPerformed(evt);
            }
        });

        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonFermer.setText("Fermer");
        jButtonFermer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonFermerMouseClicked(evt);
            }
        });
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBoutonsLayout = new javax.swing.GroupLayout(jPanelBoutons);
        jPanelBoutons.setLayout(jPanelBoutonsLayout);
        jPanelBoutonsLayout.setHorizontalGroup(
            jPanelBoutonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBoutonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonNouveau)
                .addGap(48, 48, 48)
                .addComponent(jButtonEnregistrer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonModifier)
                .addGap(64, 64, 64)
                .addComponent(jButtonSupprimer)
                .addGap(55, 55, 55)
                .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelBoutonsLayout.setVerticalGroup(
            jPanelBoutonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBoutonsLayout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(jPanelBoutonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNouveau)
                    .addComponent(jButtonEnregistrer)
                    .addComponent(jButtonModifier)
                    .addComponent(jButtonSupprimer)
                    .addComponent(jButtonFermer)))
        );

        MatriculejLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        MatriculejLabel.setText("Matricule");

        NomjLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        NomjLabel.setText("Nom");

        PrenomjLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        PrenomjLabel.setText("Prénoms");

        SexejLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        SexejLabel.setText("Sexe");

        LieuNaisjLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        LieuNaisjLabel.setText("Né(e) à");

        DateInscriptionjLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        DateInscriptionjLabel.setText("Inscrit(e) Le");

        DateNaisjLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        DateNaisjLabel.setText("Né(e) Le");

        CheminPhotojLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        CheminPhotojLabel.setText("Statut");

        matriculeTextField.setEditable(false);

        sexeComboBox.setEditable(true);
        sexeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Masculin", "Féminin" }));

        statutComboBox.setEditable(true);
        statutComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Passant", "Redoublant" }));

        imgPlace.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgPlace.setIcon(new javax.swing.ImageIcon(getClass().getResource("/scolaire/ihm/icones/ic_add_a_photo.png"))); // NOI18N
        imgPlace.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        imgPlace.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imgPlaceMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelEntete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelChamps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelBoutons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(MatriculejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(matriculeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(NomjLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(PrenomjLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(SexejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(prenomTextField)
                                    .addComponent(nomTextField)
                                    .addComponent(sexeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LieuNaisjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DateNaisjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DateInscriptionjLabel)
                            .addComponent(CheminPhotojLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lieuNaisTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(statutComboBox, 0, 154, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_lienPhoto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imgPlace, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelEntete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelChamps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MatriculejLabel)
                            .addComponent(DateNaisjLabel)
                            .addComponent(matriculeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(NomjLabel)
                                .addComponent(nomTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(LieuNaisjLabel)
                                .addComponent(lieuNaisTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(PrenomjLabel)
                                    .addComponent(prenomTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DateInscriptionjLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(SexejLabel)
                                    .addComponent(sexeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tf_lienPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(statutComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(CheminPhotojLabel)))))
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE))
                    .addComponent(imgPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelBoutons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonFermerMouseClicked
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonFermerMouseClicked

    private void jButtonNouveauMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNouveauMouseClicked
        // TODO add your handling code here:
        matriculeTextField.setText("");
        nomTextField.setText("");
        prenomTextField.setText("");
        dateNaisTextField.setDate(java.util.Date.from(Instant.now()));
        lieuNaisTextField.setText("");
        dateInscriTextField.setDate(java.util.Date.from(Instant.now()));
//        cheminPhotoTextField.setText("");
//        photoJTextField.setText("");
        jButtonEnregistrer.setEnabled(true);
        jButtonNouveau.setEnabled(false);
    }//GEN-LAST:event_jButtonNouveauMouseClicked

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void eleveTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eleveTableMouseClicked
        // TODO add your handling code here:
        jButtonNouveau.setEnabled(true);
        jButtonEnregistrer.setEnabled(false);
        matriculeTextField.setText("");
        int ligne = eleveTable.getSelectedRow();

//        Object idElObj = eleveTable.getValueAt(ligne, 0);
//        if (idElObj != null) {
//            String idEl = idElObj.toString();// String.valueOf(idElObj)
//            matriculeTextField.setText(idEl);
//        }
        Object matriculeObj = eleveTable.getValueAt(ligne, 1);
        if (matriculeObj != null) {
            String matricule = matriculeObj.toString();//String.valueOf(matriculeObj)
            matriculeTextField.setText(matricule);
        }
        Object nomObj = eleveTable.getValueAt(ligne, 2);
        if (nomObj != null) {
            String nom = nomObj.toString();//String.valueOf(nomObj)
            nomTextField.setText(nom);
        }
        Object prenomObj = eleveTable.getValueAt(ligne, 3);
        if (prenomObj != null) {
            String prenom = prenomObj.toString();//String.valueOf(prenomObj)
            prenomTextField.setText(prenom);
        }

        Object sexeObj = eleveTable.getValueAt(ligne, 4);
        if (sexeObj != null) {
            String sexe = sexeObj.toString();//String.valueOf(sexeObj)
            sexeComboBox.setSelectedItem(sexe);
        }

        Object neLeObj = eleveTable.getValueAt(ligne, 5);
        if (neLeObj != null) {
            String neLe = neLeObj.toString();
        }

        Object neAObj = eleveTable.getValueAt(ligne, 6);
        if (neAObj != null) {
            String neA = neAObj.toString();//String.valueOf(neAObj)
            lieuNaisTextField.setText(neA);
        }

//        Object inscritLeObj = eleveTable.getValueAt(ligne, 8);
//        if (inscritLeObj != null) {
//            Date inscritLe = (Date) inscritLeObj;//String.valueOf(inscritLeObj)
//            dateInscriTextField.setDate(inscritLe.toString());
//        }
//        Object inscritNumObj = eleveTable.getValueAt(ligne, 7);
//        if (inscritNumObj != null) {
//            String inscritNum = inscritNumObj.toString(); //String.valueOf(inscritNumObj)
//            dateInscriTextField.setDate(inscritNum);
//        }
        /*    */

    }//GEN-LAST:event_eleveTableMouseClicked
    public void inscririeEleveGpAnnee(int idElev, int idGp, int idAnnee) {
        String regimeSelected = regimeComboBox.getSelectedItem().toString();
        String req = "insert into ELEVE_GP (REGIME_ELEVE,ID_ANNEE_SCOLAIRE,ID_ELEVE,ID_GROUP_PEDAG) values ('" + regimeSelected + "','" + idAnnee + "','" + idElev + "','" + idGp + "')";

//        String req = "insert into BULLETIN_NOTE (ID_ELEVE_GP,ID_TRIMES) values ('" + idElev + "','" + idAnnee + "')";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req);
            affichetableEleve(idGp, idAnnee);
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, " Erreur d'inscription d'un élève dans un groupe pédagogique " + e);
        }
    }

    public void inscririeEleveAnnee(int idAnnee) {

        String classeSelected = classeComboBox.getSelectedItem().toString();
        int idGp = returnIdGroupPedagByLibGp(classeSelected);
//        JOptionPane.showMessageDialog(this, "idGp " + idGp);
        // Récupération de l'id de l'année depuis la combo anneeComboBox
        String anneeSelected = anneeComboBox.getSelectedItem().toString();
//        JOptionPane.showMessageDialog(this, "anneeSelected " + anneeSelected);
//        JOptionPane.showMessageDialog(this, "Début de l'année " + anneeSelected.substring(0, 4));
        idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
//        JOptionPane.showMessageDialog(this, "idAnnee " + idAnnee);
        String matricule = matriculeEleve();
//             matricule = matriculeEleve();
//        JOptionPane.showMessageDialog(this, "Avant le while du contrôle du matricule");
        while (!controleDoublonMatriculeEleve(matricule).isEmpty()) {
            int num = Integer.parseInt(matricule.substring(4)); // Récupération de la partie séquentielle du matricule
            num++; // Incrémentation de la partie séquentielle du matricule 
            String position = "" + num;
            matricule = matricule.substring(0, 3).concat(position.trim());
        }
        java.util.Date dateInscrit = dateInscriTextField.getDate();
        java.util.Date dateNais = dateNaisTextField.getDate();
//        String req1 = "insert into ELEVE(ID_ELEVE,DATE_INSCRI,DATE_NAIS,LIEU_NAIS,MATRICULE_EL,NOM_EL,PRENOM_EL,SEXE )values(1,'" + dateInscriTextField.getDate() + "','" + dateNaisTextField.getDate() + "','" + lieuNaisTextField.getText() + "','" + matricule + "','" + nomTextField.getText() + "','" + prenomTextField.getText() + "','" + sexeComboBox.getSelectedItem().toString() + "')";
        String req = "insert into ELEVE(ID_ELEVE, LIEU_NAIS, MATRICULE_EL, NOM_EL, PRENOM_EL, SEXE )values(1,'" + lieuNaisTextField.getText() + "', '" + matricule + "', '" + nomTextField.getText() + "', '" + prenomTextField.getText() + "', '" + sexeComboBox.getSelectedItem().toString() + "')";
//        String req = "insert into BULLETIN_NOTE (ID_ELEVE_GP,ID_TRIMES) values ('" + idElev + "','" + idAnnee + "')";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req);

//            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, " Erreur d'inscription de l'élève dans l'établissement " + e);
        }
//        return matricule;
    }
    private void jButtonEnregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnregistrerActionPerformed
        // TODO add your handling code here:
        matriculeTextField.setText("");
        matriculeTextField.setText(matriculeEleve());
//        matriculeTextField.setBackground(Color.gray);
//        JOptionPane.showMessageDialog(this, "regimeComboBox.getSelectedItem().toString()" + regimeComboBox.getSelectedItem().toString());
//        JOptionPane.showMessageDialog(this, "classeComboBox.getSelectedItem().toString()" + classeComboBox.getSelectedItem().toString());
//        String anneeSelected = "2016";
        String regimeSelected = regimeComboBox.getSelectedItem().toString();
        String classeSelected = classeComboBox.getSelectedItem().toString();
        int idGp = returnIdGroupPedagByLibGp(classeSelected);
//        JOptionPane.showMessageDialog(this, "idGp " + idGp);
        // Récupération de l'id de l'année depuis la combo anneeComboBox
        String anneeSelected = anneeComboBox.getSelectedItem().toString();
//        JOptionPane.showMessageDialog(this, "anneeSelected " + anneeSelected);
//        JOptionPane.showMessageDialog(this, "Début de l'année " + anneeSelected.substring(0, 4));
        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
//        JOptionPane.showMessageDialog(this, "idAnnee " + idAnnee);
        // Récupération de l'id de l'élève depuis la table eleveTable
//        int ligne = eleveTable.getSelectedRow();
//        Object idElevObj = eleveTable.getValueAt(ligne, 0);
//        String idElevStr = String.valueOf(idElevObj);
//        int idElev = Integer.parseInt(idElevStr);

//        String req1 = "insert into ELEVE(ID_ELEVE,DATE_INSCRI,DATE_NAIS,LIEU_NAIS,MATRICULE_EL,NOM_EL,PRENOM_EL,SEXE )values(1,'" + dateInscriTextField.getDate() + "','" + dateNaisTextField.getDate() + "','" + lieuNaisTextField.getText() + "','" + matricule + "','" + nomTextField.getText() + "','" + prenomTextField.getText() + "','" + sexeComboBox.getSelectedItem().toString() + "')";
//        String req1 = "insert into ELEVE(ID_ELEVE,LIEU_NAIS,MATRICULE_EL,NOM_EL,PRENOM_EL,SEXE )values(1,'" + lieuNaisTextField.getText() + "','" + matricule + "','" + nomTextField.getText() + "','" + prenomTextField.getText() + "','" + sexeComboBox.getSelectedItem().toString() + "')";
//
//        try {
//            try (Connection connexion = Maconnexion.seconnecter()) {
//                Statement eleveStatem = connexion.createStatement();
//                Statement eleveGpStatem = connexion.createStatement();
//                int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment enregistrer ces informations?");
//                if (Conf == 0) {
//                    int idEleve = returnidEleveByNomPrenomSexeDateNaisLieuNais(nomTextField.getText(), prenomTextField.getText(), sexeComboBox.getSelectedItem().toString());
//   
//                    JOptionPane.showMessageDialog(this, "Enregistrement effectué avec succès");
//                    affichetableEleve(idGp);
//                } else {
//                    JOptionPane.showMessageDialog(this, "Enregistrement annulé");
//                }
//            }
//        } catch (SQLException | HeadlessException e) {
//            JOptionPane.showMessageDialog(this, "erreur d'inscription d'élève : " + e);
//
//        }
//        inscririeEleveGpAnnee(idElev, idGp, idAnnee);
        int trouveail = returnEleveByNomPrenomSexeDateNaisLieuNais(nomTextField.getText(), prenomTextField.getText(), sexeComboBox.getSelectedItem().toString());
//        String req2 = "insert into ELEVE_GP (REGIME_ELEVE,ID_ANNEE_SCOLAIRE,ID_ELEVE,ID_GROUP_PEDAG) values ('" + regimeSelected + "','" + idAnnee + "','" + idEleve + "','" + idGp + "')";

        if (trouveail != 0) { // Si l'élève existe déjà dans la base 
//            JOptionPane.showMessageDialog(this, "Dans le if");
            int idElev = returnIdEleveByNomPrenomSexeDateNaisLieuNais(nomTextField.getText(), prenomTextField.getText(), sexeComboBox.getSelectedItem().toString());
            inscririeEleveGpAnnee(idElev, idGp, idAnnee);  // il est inséré dans le groupe pédagogique sélectionné
//         eleveGpStatem.executeQuery(req2); // il est inséré dans le groupe pédagogique sélectionné
        } else { // sinon
//            JOptionPane.showMessageDialog(this, "Dans le else");
//            eleveStatem.executeQuery(req1); // il est d'abord inséré dans la base 
//            JOptionPane.showMessageDialog(this, "Après le  eleve.executeQuery(req1)");
            inscririeEleveAnnee(idAnnee);// il est d'abord inséré dans la base 
            int idElev = returnIdEleveByNomPrenomSexeDateNaisLieuNais(nomTextField.getText(), prenomTextField.getText(), sexeComboBox.getSelectedItem().toString());
            inscririeEleveGpAnnee(idElev, idGp, idAnnee); // puis inséré dans le groupe pédagogique sélectionné
//            eleveGpStatem.executeQuery(req2); // puis inséré dans le groupe pédagogique sélectionné
//            JOptionPane.showMessageDialog(this, "Après le   eleveGp.executeQuery(req2)");
        }
        jButtonNouveau.setEnabled(true);
//        JOptionPane.showMessageDialog(this, " La trouvail : " + trouveail);

    }//GEN-LAST:event_jButtonEnregistrerActionPerformed

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        // TODO add your handling code here:

        // Récupération de l'id de l'année depuis la combo anneeComboBox
        String anneeSelected = anneeComboBox.getSelectedItem().toString();
//        String anneeSelected = "2017";
        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
        String regimeSelected = regimeComboBox.getSelectedItem().toString();
        String statutSelected = statutComboBox.getSelectedItem().toString();
        String classeSelected = classeComboBox.getSelectedItem().toString();
        int idGp = returnIdGroupPedagByLibGp(classeSelected);
        java.util.Date dateInscrit = dateInscriTextField.getDate();
        java.util.Date dateNais = dateNaisTextField.getDate();
        // Récupération de l'id de l'élève depuis la table eleveTable
        int ligne = eleveTable.getSelectedRow();
        Object idElevObj = eleveTable.getValueAt(ligne, 0);
        String idElevStr = String.valueOf(idElevObj);
        int idElev = Integer.parseInt(idElevStr);
        // Récupération de l'id de l'élève depuis la table eleveTable
        int ligne2 = eleveTable.getSelectedRow();
        Object idElevGpObj = eleveTable.getValueAt(ligne2, 0);
        String idElevGpStr = String.valueOf(idElevGpObj);
        int idElevGp = Integer.parseInt(idElevGpStr);
        String req1 = "update ELEVE set  LIEU_NAIS = '" + lieuNaisTextField.getText() + "',MATRICULE_EL = '" + matriculeTextField.getText() + "',"
                + " DATE_NAIS = '" + dateNais + "', DATE_INSCRI = '" + dateInscrit + "',"
                + " NOM_EL = '" + nomTextField.getText() + "', PRENOM_EL = '" + prenomTextField.getText() + "',"
                + " SEXE = '" + sexeComboBox.getSelectedItem().toString() + "' where  ID_ELEVE='" + idElev + "'";
        String req2 = "update ELEVE_GP set REGIME_ELEVE = '" + regimeSelected + "',STATUT_ELEVE = '" + statutSelected + "',"
                + " ID_ANNEE_SCOLAIRE = '" + idAnnee + "',ID_GROUP_PEDAG = '" + idGp + "' where  ID_ELEVE_GP='" + idElevGp + "'";
        try {
            //Class.forName(pilote);
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces informations?");
            if (Conf == 0) {
                instruction.executeQuery(req1);
                JOptionPane.showMessageDialog(this, "Continuer ?");
                instruction.executeQuery(req2);
                affichetableEleve(idGp, idAnnee);
//                instruction.executeQuery(req2);
                JOptionPane.showMessageDialog(this, "Modification effectuée avec succès");
            } else {
                JOptionPane.showMessageDialog(this, "Modification annulée");
            }
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        // TODO add your handling code here:
        String classeSelected = classeComboBox.getSelectedItem().toString();
        int idGp = returnIdGroupPedagByLibGp(classeSelected);
        String anneeSelected = anneeComboBox.getSelectedItem().toString();
        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
        // Récupération de l'id de l'élève depuis la table eleveTable
        int ligne = eleveTable.getSelectedRow();
        Object idElevObj = eleveTable.getValueAt(ligne, 0);
        String idElevStr = String.valueOf(idElevObj);
        int idElev = Integer.parseInt(idElevStr);
        String req1 = "delete from ELEVE_GP"
                + " where  ID_ELEVE_GP='" + idElev + "'"
                + " and  ID_ANNEE_SCOLAIRE ='" + idAnnee + "'";
//        JOptionPane.showMessageDialog(this, " idElev " + idElev);
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ces informations?");
            if (Conf == 0) {
                instruction.executeQuery(req1);
                affichetableEleve(idGp, idAnnee);
                JOptionPane.showMessageDialog(this, "Suppression effectuée avec succès");
            } else {
                JOptionPane.showMessageDialog(this, "Suppression annulée");
            }
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Impossible de supprimer cette Inscription car elle est associée à d'autres enregistrements");
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void classeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classeComboBoxActionPerformed
        // TODO add your handling code here:
        String classeSelected = classeComboBox.getSelectedItem().toString();
        int idGp = returnIdGroupPedagByLibGp(classeSelected);
        String anneeSelected = anneeComboBox.getSelectedItem().toString();
        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
        affichetableEleve(idGp, idAnnee);
    }//GEN-LAST:event_classeComboBoxActionPerformed

    private void anneeComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_anneeComboBoxMouseClicked
        // TODO add your handling code here:
//        connectComboTrimestre();
//        String classeSelected = classeComboBox.getSelectedItem().toString();
//        int idGp = returnIdGroupPedagByLibGp(classeSelected);
//        String anneeSelected = anneeComboBox.getSelectedItem().toString();
//        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
//        affichetableEleve(idGp, idAnnee);
    }//GEN-LAST:event_anneeComboBoxMouseClicked

    private void jButtonEnregistrerMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEnregistrerMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonEnregistrerMouseMoved

    private void classeComboBoxComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_classeComboBoxComponentAdded
        // TODO add your handling code here:
//        String classeSelected = classeComboBox.getSelectedItem().toString();
//        int idGp = returnIdGroupPedagByLibGp(classeSelected);
//        String anneeSelected = anneeComboBox.getSelectedItem().toString();
//        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
//        affichetableEleve(idGp, idAnnee);
    }//GEN-LAST:event_classeComboBoxComponentAdded

    private void classeComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_classeComboBoxFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_classeComboBoxFocusGained

    private void anneeComboBoxComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_anneeComboBoxComponentAdded
        // TODO add your handling code here:
//        String classeSelected = classeComboBox.getSelectedItem().toString();
//        int idGp = returnIdGroupPedagByLibGp(classeSelected);
//        String anneeSelected = anneeComboBox.getSelectedItem().toString();
//        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
//        affichetableEleve(idGp, idAnnee);
    }//GEN-LAST:event_anneeComboBoxComponentAdded

    private void anneeComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_anneeComboBoxFocusGained
        // TODO add your handling code here:
//        String classeSelected = classeComboBox.getSelectedItem().toString();
//        int idGp = returnIdGroupPedagByLibGp(classeSelected);
//        String anneeSelected = anneeComboBox.getSelectedItem().toString();
//        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
////           JOptionPane.showMessageDialog(this, "idAnnee " + idAnnee);
//        affichetableEleve(idGp, idAnnee);
    }//GEN-LAST:event_anneeComboBoxFocusGained

    private void anneeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anneeComboBoxActionPerformed
        // TODO add your handling code here:
//        String classeSelected = classeComboBox.getSelectedItem().toString();
//        int idGp = returnIdGroupPedagByLibGp(classeSelected);
//        String anneeSelected = anneeComboBox.getSelectedItem().toString();
//        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
//        affichetableEleve(idGp, idAnnee);
    }//GEN-LAST:event_anneeComboBoxActionPerformed

    private void jButtonNouveauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNouveauActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonNouveauActionPerformed

    private void imgPlaceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imgPlaceMouseClicked
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG & PNG & JPEG Images", "jpg", "png", "jpeg");
        chooser.setFileFilter(filter);

// ouvre la boîte de dialogue et bloque l’interaction (dialogue modal)
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = chooser.getSelectedFile();
            String filename = f.getAbsolutePath();
            tf_lienPhoto.setText(filename);

            ImageIcon icone = new ImageIcon(new ImageIcon(filename).getImage().getScaledInstance(128, 110, Image.SCALE_DEFAULT));
            imgPlace.setIcon(icone);
        }
    }//GEN-LAST:event_imgPlaceMouseClicked

    private void jButtonEnregistrerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEnregistrerMouseEntered
        // TODO add your handling code here:
        String matEl = matriculeEleve();
        matriculeTextField.setText(matEl);
        matriculeTextField.setBackground(Color.gray);
    }//GEN-LAST:event_jButtonEnregistrerMouseEntered

    //méthode permettant de remplir le JCombobox cbprofile
    private void connectComboAnnee() {
        anneeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet resultat = instruction.executeQuery("SELECT ANNEE_DEBUT,ANNEE_FIN FROM ANNEE_SCOLAIRE");
                while (resultat.next()) {
                    String anneeDebut = resultat.getString("ANNEE_DEBUT");
                    String anneeFin = resultat.getString("ANNEE_FIN");
                    String libAnnee = anneeDebut + " - " + anneeFin;
                    Object obj = (Object) libAnnee;
                    anneeComboBox.addItem(obj);
//                    JOptionPane.showMessageDialog(this, " anneeComboBox.addItem(obj) " + anneeComboBox.getItemAt(i));
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "connectComboAnnee: " + e);
        }
    }

    //méthode pour l'affichge du tableau Eleve'
    private void affichetableEleve(int idGp, int idAnnee) {
        DefaultTableModel model = new DefaultTableModel();
        eleveTable.setModel(model); //affectation du model au tableau
//        JOptionPane.showMessageDialog(this, " A l'entrée de la méthode  affichetableEleve");
        model.addColumn("N°");
        model.addColumn("Matricule");
        model.addColumn("Nom");
        model.addColumn("Prénom");
        model.addColumn("Sexe");
        model.addColumn("Né(e) le");
        model.addColumn("Né(e) à");
        model.addColumn("Inscrit(e) le");
        model.addColumn("N°");
        TableColumn column, column1, column2, column3, column4, column5, column6, column7, column8 = null;
        column = eleveTable.getColumnModel().getColumn(0);
        column.setPreferredWidth(10); //
        column1 = eleveTable.getColumnModel().getColumn(1);
        column1.setPreferredWidth(100); //
        column2 = eleveTable.getColumnModel().getColumn(2);
        column2.setPreferredWidth(200); //
        column3 = eleveTable.getColumnModel().getColumn(3);
        column3.setPreferredWidth(200); //
        column4 = eleveTable.getColumnModel().getColumn(4);
        column4.setPreferredWidth(40); //
        column5 = eleveTable.getColumnModel().getColumn(5);
        column5.setPreferredWidth(200); //
        column6 = eleveTable.getColumnModel().getColumn(6);
        column6.setPreferredWidth(40); //
        column7 = eleveTable.getColumnModel().getColumn(7);
        column7.setPreferredWidth(200); //
        column8 = eleveTable.getColumnModel().getColumn(8);
        column8.setPreferredWidth(10); //
//        JOptionPane.showMessageDialog(this, " Juste avant le premier try ");
        try {
//            JOptionPane.showMessageDialog(this, " Juste après le premier try ");
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery("select ELEVE_GP.ID_ELEVE_GP,ELEVE_GP.ID_ELEVE ,MATRICULE_EL, NOM_EL, PRENOM_EL, SEXE,DATE_NAIS,LIEU_NAIS,DATE_INSCRI"
                    + " from ELEVE, ELEVE_GP"
                    + " where ELEVE_GP.ID_ELEVE = ELEVE.ID_ELEVE "
                    + " and ELEVE_GP.ID_GROUP_PEDAG = '" + idGp + "'"
                    + " and ELEVE_GP.ID_ANNEE_SCOLAIRE = '" + idAnnee + "'");
//                  + " and ELEVE_GP.ID_GROUP_PEDAG = GROUP_PEDAG.ID_GROUP_PEDAG"
//            JOptionPane.showMessageDialog(this, " Juste avant le while (resultat.next())");
            while (resultat.next()) {
//                JOptionPane.showMessageDialog(this, " Juste après le while (resultat.next())");
                String idEl = resultat.getString("ID_ELEVE_GP");
                String mleEl = resultat.getString("MATRICULE_EL");
                String nomEl = resultat.getString("NOM_EL");
//                JOptionPane.showMessageDialog(this, "MATRICULE_EL " + mleEl + "NOM_EL" + nomEl);
                String prenomEl = resultat.getString("PRENOM_EL");
                String sexeEl = resultat.getString("SEXE");
                String neLe = resultat.getString("DATE_NAIS");
                String neA = resultat.getString("LIEU_NAIS");
                String inscritLe = resultat.getString("DATE_INSCRI");
                String idElGP = resultat.getString("ID_ELEVE_GP");
                model.addRow(new Object[]{idEl, mleEl, nomEl, prenomEl, sexeEl, neLe, neA, inscritLe, idElGP});

            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, " Aucun élève inscrit dans cette classe " + e);
        }
    }
    //méthode permettant de remplir le JCombobox anneeComboBox 

    private void connectComboClasse() {
        classeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                ResultSet resultatGp = instruction.executeQuery("SELECT LIB_GROUP_PEDAG FROM GROUP_PEDAG");
                while (resultatGp.next()) {
                    String classe = resultatGp.getString("LIB_GROUP_PEDAG");
                    Object obj2 = (Object) classe;
                    classeComboBox.addItem(obj2);
                }
                //fermeture de la connexion
                instruction.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
    }

    public int returnIdAnneeByAnneeDebut(String anneeDebut) {
        // Récupération de l'id de l'année à partir de son champ  ANNEE_DEBUT
        int idAnnee = 0;
        String reqRameneIdAnnee = "select ID_ANNEE_SCOLAIRE from ANNEE_SCOLAIRE where ANNEE_DEBUT = '" + anneeDebut + "'";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idAnneeTrouve = instruction.executeQuery(reqRameneIdAnnee);
            while (idAnneeTrouve.next()) {
                idAnnee = idAnneeTrouve.getInt("ID_ANNEE_SCOLAIRE");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idAnnee;
    }

    public int returnIdGroupPedagByLibGp(String libGp) {
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select *  from  GROUP_PEDAG where LIB_GROUP_PEDAG =  '" + libGp + "' ";
        int idGp = 0;
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
            while (idGpTrouve.next()) {
                idGp = idGpTrouve.getInt("ID_GROUP_PEDAG");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idGp;
    }

    public String matriculeEleve() {

        String matricule = "123456";
        String indicSexe = "1";
        if (sexeComboBox.getSelectedItem().toString().equalsIgnoreCase("Masculin")) {
            indicSexe = "0";
        }
        int num = nbEleve();

        String position;
        position = "" + num;
        if (position.length() == 2) {
            position = "0" + num;
        }
        if (position.length() == 1) {
            position = "00" + num;
        }
//        JOptionPane.showMessageDialog(this, "La date" +dateInscriTextField.getDate().toString() );

//        JOptionPane.showMessageDialog(this, "Les deux dernier caractère de la date" + dateInscriTextField.getDate().toString().substring(26, 28));
        matricule = dateInscriTextField.getDate().toString().substring(26, 28).concat(indicSexe).concat(position);

        return matricule;
    }

    public int nbEleve() {
        int nb = 0;
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select count (ID_ELEVE)  from  ELEVE ";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet lesEleve = instruction.executeQuery(reqRameneGpEleve);
                while (lesEleve.next()) {
                    nb = lesEleve.getInt(1);
                }
            }
        } catch (Exception e) {
        }

        return nb;
    }

    public String controleDoublonMatriculeEleve(String matricule) {
        String matriculeTrouvail = "";
        String reqRameneGpEleve = "select  MATRICULE_EL  from  ELEVE "
                + "where MATRICULE_EL = '" + matricule + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet lesEleve = instruction.executeQuery(reqRameneGpEleve);
                while (lesEleve.next()) {
                    matriculeTrouvail = lesEleve.getString("MATRICULE_EL");
                }
            }
        } catch (Exception e) {
            return "";
        }
        return matriculeTrouvail;
    }

    public int returnEleveByNomPrenomSexeDateNaisLieuNais(String nom, String prenom, String sexe) {
        int trouvail = 0;
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select  *  from  ELEVE "
                //                + "where DATE_NAIS = '" + dateNais + "'"
                + "where NOM_EL = '" + nom + "'"
                + "And PRENOM_EL = '" + prenom + "'"
                + "And Sexe = '" + sexe + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet lesEleve = instruction.executeQuery(reqRameneGpEleve);
                while (lesEleve.next()) {
                    trouvail = lesEleve.getInt(1);
                }
            }
        } catch (Exception e) {
        }
        return trouvail;
    }

    public int returnIdEleveByNomPrenomSexeDateNaisLieuNais(String nom, String prenom, String sexe) {
        int idElev = 0;
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select  *  from  ELEVE "
                //                + "where DATE_NAIS = '" + dateNais + "'"
                + "where NOM_EL = '" + nom + "'"
                + "And PRENOM_EL = '" + prenom + "'"
                + "And Sexe = '" + sexe + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet lesEleve = instruction.executeQuery(reqRameneGpEleve);
                while (lesEleve.next()) {
                    idElev = lesEleve.getInt("ID_ELEVE");
                }
            }
        } catch (Exception e) {
        }
        return idElev;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InscriptionJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InscriptionJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InscriptionJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InscriptionJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InscriptionJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CheminPhotojLabel;
    private javax.swing.JLabel DateInscriptionjLabel;
    private javax.swing.JLabel DateNaisjLabel;
    private javax.swing.JLabel LieuNaisjLabel;
    private javax.swing.JLabel MatriculejLabel;
    private javax.swing.JLabel NomjLabel;
    private javax.swing.JLabel PrenomjLabel;
    private javax.swing.JLabel SexejLabel;
    private javax.swing.JComboBox anneeComboBox;
    private javax.swing.JComboBox classeComboBox;
    private javax.swing.JTable eleveTable;
    private javax.swing.JLabel imgPlace;
    private javax.swing.JButton jButtonEnregistrer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonNouveau;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanelBoutons;
    private javax.swing.JPanel jPanelChamps;
    private javax.swing.JPanel jPanelEntete;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lieuNaisTextField;
    private javax.swing.JTextField matriculeTextField;
    private javax.swing.JTextField nomTextField;
    private javax.swing.JTextField prenomTextField;
    private javax.swing.JComboBox regimeComboBox;
    private javax.swing.JComboBox sexeComboBox;
    private javax.swing.JComboBox statutComboBox;
    private javax.swing.JLabel tf_lienPhoto;
    // End of variables declaration//GEN-END:variables
}
