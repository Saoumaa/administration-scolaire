/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scolaire.ihm;

import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import traitement.GeneratePDFBilletin;
import traitement.GeneratePDFListeDesEleves;

/**
 *
 * @author obama
 */
public class ConduiteGPJFrame extends javax.swing.JFrame {

    /**
     * Creates new form AnneeJFrame
     */
    public ConduiteGPJFrame() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("log.png")));
        connectComboAnnee();
        connectComboTrimestre();
        connectComboClasse();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelBoutons = new javax.swing.JPanel();
        jButtonNouveau = new javax.swing.JButton();
        jButtonEnregistrer = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jPanelEntete = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanelTableau = new javax.swing.JPanel();
        jPanelChamps3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        conduiteTable = new javax.swing.JTable();
        jPanelBoutons1 = new javax.swing.JPanel();
        jButtonNouveau1 = new javax.swing.JButton();
        jButtonEnregistrer1 = new javax.swing.JButton();
        jButtonFermer1 = new javax.swing.JButton();
        jPanelChamps2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        anneeComboBox = new javax.swing.JComboBox();
        trimestreComboBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        classeComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        conduiteTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        jButtonNouveau.setText("Nouveau");
        jButtonNouveau.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNouveauMouseClicked(evt);
            }
        });

        jButtonEnregistrer.setText("Enregistrer");

        jButtonModifier.setText("Modifier");

        jButtonSupprimer.setText("Supprimer");

        jButtonFermer.setText("Fermer");
        jButtonFermer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonFermerMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelBoutonsLayout = new javax.swing.GroupLayout(jPanelBoutons);
        jPanelBoutons.setLayout(jPanelBoutonsLayout);
        jPanelBoutonsLayout.setHorizontalGroup(
            jPanelBoutonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBoutonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonNouveau)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonEnregistrer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonModifier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSupprimer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonFermer)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelBoutonsLayout.setVerticalGroup(
            jPanelBoutonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBoutonsLayout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(jPanelBoutonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNouveau)
                    .addComponent(jButtonEnregistrer)
                    .addComponent(jButtonModifier)
                    .addComponent(jButtonSupprimer)
                    .addComponent(jButtonFermer)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanelEntete.setBackground(new java.awt.Color(0, 102, 51));

        jLabel1.setFont(new java.awt.Font("Wide Latin", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("REPORT DES NOTES DE CONDUITE");

        javax.swing.GroupLayout jPanelEnteteLayout = new javax.swing.GroupLayout(jPanelEntete);
        jPanelEntete.setLayout(jPanelEnteteLayout);
        jPanelEnteteLayout.setHorizontalGroup(
            jPanelEnteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelEnteteLayout.setVerticalGroup(
            jPanelEnteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEnteteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelChamps3.setBackground(new java.awt.Color(204, 255, 204));
        jPanelChamps3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Elèves", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 0))); // NOI18N

        conduiteTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Matricule", "Nom", "Prénom", "Sexe", "Conduite"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        conduiteTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                conduiteTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(conduiteTable);

        jPanelBoutons1.setBackground(new java.awt.Color(204, 255, 204));
        jPanelBoutons1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""))), "Actions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 0))); // NOI18N

        jButtonNouveau1.setText("Nouveau");
        jButtonNouveau1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNouveau1MouseClicked(evt);
            }
        });

        jButtonEnregistrer1.setText("Enregistrer");
        jButtonEnregistrer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnregistrer1ActionPerformed(evt);
            }
        });

        jButtonFermer1.setText("Fermer");
        jButtonFermer1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonFermer1MouseClicked(evt);
            }
        });
        jButtonFermer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermer1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBoutons1Layout = new javax.swing.GroupLayout(jPanelBoutons1);
        jPanelBoutons1.setLayout(jPanelBoutons1Layout);
        jPanelBoutons1Layout.setHorizontalGroup(
            jPanelBoutons1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBoutons1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonNouveau1)
                .addGap(95, 95, 95)
                .addComponent(jButtonEnregistrer1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonFermer1)
                .addGap(20, 20, 20))
        );
        jPanelBoutons1Layout.setVerticalGroup(
            jPanelBoutons1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBoutons1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanelBoutons1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNouveau1)
                    .addComponent(jButtonEnregistrer1)
                    .addComponent(jButtonFermer1)))
        );

        javax.swing.GroupLayout jPanelChamps3Layout = new javax.swing.GroupLayout(jPanelChamps3);
        jPanelChamps3.setLayout(jPanelChamps3Layout);
        jPanelChamps3Layout.setHorizontalGroup(
            jPanelChamps3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelBoutons1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
        );
        jPanelChamps3Layout.setVerticalGroup(
            jPanelChamps3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelBoutons1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanelTableauLayout = new javax.swing.GroupLayout(jPanelTableau);
        jPanelTableau.setLayout(jPanelTableauLayout);
        jPanelTableauLayout.setHorizontalGroup(
            jPanelTableauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelChamps3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelTableauLayout.setVerticalGroup(
            jPanelTableauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelChamps3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanelChamps2.setBackground(new java.awt.Color(204, 255, 204));
        jPanelChamps2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Paramètres", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 0))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Année");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Trimestre");

        anneeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anneeComboBoxActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Classe");

        classeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classeComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Conduite");

        conduiteTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                conduiteTextFieldMouseClicked(evt);
            }
        });
        conduiteTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conduiteTextFieldActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/scolaire/ihm/icones/help.png"))); // NOI18N
        jButton1.setToolTipText("Vous avez seulement la liste des trimestres ouvertes.");
        jButton1.setMaximumSize(new java.awt.Dimension(16, 16));
        jButton1.setMinimumSize(new java.awt.Dimension(16, 16));
        jButton1.setPreferredSize(new java.awt.Dimension(16, 16));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChamps2Layout = new javax.swing.GroupLayout(jPanelChamps2);
        jPanelChamps2.setLayout(jPanelChamps2Layout);
        jPanelChamps2Layout.setHorizontalGroup(
            jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChamps2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(anneeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelChamps2Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(classeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChamps2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(conduiteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelChamps2Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trimestreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChamps2Layout.setVerticalGroup(
            jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChamps2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel6)
                        .addComponent(anneeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(trimestreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanelChamps2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(classeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(conduiteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelEntete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelTableau, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelChamps2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelEntete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelChamps2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelTableau, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonFermerMouseClicked
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonFermerMouseClicked

    private void jButtonNouveauMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNouveauMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jButtonNouveauMouseClicked

    private void jButtonNouveau1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNouveau1MouseClicked
        // TODO add your handling code here:
        effacer();
    }//GEN-LAST:event_jButtonNouveau1MouseClicked

    private void jButtonFermer1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonFermer1MouseClicked
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonFermer1MouseClicked

    private void jButtonEnregistrer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnregistrer1ActionPerformed
        // TODO add your handling code here:
        String conduite = conduiteTextField.getText();
        if (!controlerSaisirNoteConduite(conduite)) /*  */ // Calcul de la moyenne des interrogations
        {
            JOptionPane.showMessageDialog(this, "La conduite doit être comprise entre 0 et 20");
        } else {
            // Récupération du début de l'année sélectionné dans la combo anneeComboBox
            String anneeSelected = anneeComboBox.getSelectedItem().toString();
            int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));

            // Récupération du groupe pédagogique sélectionné dans la combo classeComboBox
            String groupPedagSelected = classeComboBox.getSelectedItem().toString();

            int idGp = returnIdGpByLibelleGpAndAnnee(idAnnee, groupPedagSelected);

            // Récupération de l'id de l'élève depuis la table eleveTable
            int ligne = conduiteTable.getSelectedRow();
            if (ligne == -1) {
                JOptionPane.showMessageDialog(this, "Aucun élève n'est sélectionné ");
            } else {
                Object idElevObj = conduiteTable.getValueAt(ligne, 0);
                String idEleveGp = String.valueOf(idElevObj);
                int idElev = Integer.parseInt(idEleveGp);
                String trimestreSelected = trimestreComboBox.getSelectedItem().toString();
                int idTrim = returnIdTrimestreByLibelleTrimestre(trimestreSelected, idAnnee);
//                JOptionPane.showMessageDialog(this, "Id du idTrim " + idTrim);
                double noteConduite = 0.0;
                if (!conduiteTextField.getText().equalsIgnoreCase("")) {
                    noteConduite = Double.parseDouble(conduiteTextField.getText());
                }
                int idBull = returnIdBulletinByEleveGpAndTrimes(idElev, idTrim);
                int idCoefConduite = returnIdCoefByGpAndLibMat(idGp, "Conduite"); // Récupérer son idCoef
                if (!(conduiteTextField.getText().isEmpty())) {
                    updateConduiteByIdBulAndIdCoef(noteConduite, idBull, idCoefConduite);  // Mettre à jout la valeur de la note d
                    affichetableNoteCondiuteEleve(idTrim, idGp);
                }
            }
        }

    }//GEN-LAST:event_jButtonEnregistrer1ActionPerformed

    private void jButtonFermer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermer1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonFermer1ActionPerformed

    private void anneeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anneeComboBoxActionPerformed
        // TODO add your handling code here:
        connectComboTrimestre();
    }//GEN-LAST:event_anneeComboBoxActionPerformed

    private void classeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classeComboBoxActionPerformed
        // TODO add your handling code here:
//        affichetableEleve();
        // Récupération du début de l'année sélectionné dans la combo anneeComboBox
        String anneeSelected = anneeComboBox.getSelectedItem().toString();
        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
        // Récupération du groupe pédagogique sélectionné dans la combo classeComboBox
        String groupPedagSelected = classeComboBox.getSelectedItem().toString();
//        JOptionPane.showMessageDialog(this, "groupPedagSelected " + groupPedagSelected);
//        JOptionPane.showMessageDialog(this, "idAnnee " + idAnnee);
        int idGp = returnIdGpByLibelleGpAndAnnee(idAnnee, groupPedagSelected);
//        JOptionPane.showMessageDialog(this, "idGp " + idGp);
        // Récupération de du trimestre sélectionné
        String trimestreSelected = trimestreComboBox.getSelectedItem().toString();
        int idTrim = returnIdTrimestreByLibelleTrimestre(trimestreSelected, idAnnee);
        affichetableNoteCondiuteEleve(idTrim, idGp);
    }//GEN-LAST:event_classeComboBoxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Seuls les trimestres ouverts sont affichés. Assurez vous que le trimestre est ouvert.");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void conduiteTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_conduiteTableMouseClicked
        // TODO add your handling code here:
        int ligne = conduiteTable.getSelectedRow();
        if (conduiteTable.getValueAt(ligne, 4) != null) {
            Object conduite = conduiteTable.getValueAt(ligne, 4);
            conduiteTextField.setText(conduite.toString());  //String.valueOf(unInt1)
        } else {
            conduiteTextField.setText("");
        }
    }//GEN-LAST:event_conduiteTableMouseClicked

    private void conduiteTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conduiteTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_conduiteTextFieldActionPerformed

    private void conduiteTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_conduiteTextFieldMouseClicked
        // TODO add your handling code here:
        conduiteTextField.setText("");
    }//GEN-LAST:event_conduiteTextFieldMouseClicked

    //méthode permettant de remplir le JCombobox cbprofile
    private void connectComboAnnee() {
        anneeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
        try {
            // Class.forName(pilote);
            // Connection connexion = DriverManager.getConnection("jdbc:mysql://localhost:3306/base_sgd","root","");*/
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery("SELECT * FROM ANNEE_SCOLAIRE");
            while (resultat.next()) {
                String anneeDebut = resultat.getString("ANNEE_DEBUT");
                String anneeFin = resultat.getString("ANNEE_FIN");
                String libAnnee = anneeDebut + " - " + anneeFin;
                Object obj = (Object) libAnnee;
                anneeComboBox.addItem(obj);
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
    }

    public int returnIdAnneeByAnneeDebut(String anneeDebut) {
        // Récupération de l'id de l'année à partir de son champ  ANNEE_DEBUT
        int idAnnee = 0;
        String reqRameneIdAnnee = "select ID_ANNEE_SCOLAIRE from ANNEE_SCOLAIRE where ANNEE_DEBUT = '" + anneeDebut + "'";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idAnneeTrouve = instruction.executeQuery(reqRameneIdAnnee);
            while (idAnneeTrouve.next()) {
                idAnnee = idAnneeTrouve.getInt("ID_ANNEE_SCOLAIRE");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idAnnee;
    }

    public void ajouterDetailsBulletin(double noteConduite, int idBul, int idCoef) {
        String req = "insert into DETAILS_BULLETIN (MOY_20, ID_BULLETIN, ID_COEF) values ('" + noteConduite + "','" + idBul + "','" + idCoef + "')";
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erreur d'ajout de détails bulletin " + e);
        }
    }

    //méthode permettant de remplir le JCombobox cbprofile
    private void connectComboTrimestre() {
        // Récupération de l'id de l'année depuis la combo anneeComboBox
        String anneeSelected = anneeComboBox.getSelectedItem().toString();
        // Récupération de l'id de l'élève depuis la table eleveTable
        int idAnnee = returnIdAnneeByAnneeDebut(anneeSelected.substring(0, 4));
        String classeSelected = classeComboBox.getSelectedObjects().toString();
        int idGp = returnIdGroupPedagByLibGp(classeSelected);
        trimestreComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
        try {
            // Class.forName(pilote);
            // Connection connexion = DriverManager.getConnection("jdbc:mysql://localhost:3306/base_sgd","root","");*/
            // + "and GROUP_PEDAG.ID_GROUP_PEDAG = '" + idGp + "'"      , ID_GROUP_PEDAG        , GROUP_PEDAG

            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery("SELECT LIB_TRIMES FROM TRIMESTRE "
                    + "where ID_ANNEE_SCOLAIRE = '" + idAnnee + "'");
            while (resultat.next()) {
                String libTrimestre = resultat.getString("LIB_TRIMES");
                Object obj2 = (Object) libTrimestre;
                trimestreComboBox.addItem(obj2);
            }
            //fermeture de la connexion
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
    }

    //méthode permettant de remplir le JCombobox anneeComboBox 
    private void connectComboClasse() {
        classeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery("SELECT LIB_GROUP_PEDAG FROM GROUP_PEDAG");
            while (resultat.next()) {
                String idAnnee = resultat.getString("LIB_GROUP_PEDAG");
                Object obj2 = (Object) idAnnee;
                classeComboBox.addItem(obj2);
            }
            //fermeture de la connexion
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
    }

    //méthode pour l'affichge du tableau Eleve'
    private void affichetableEleve() {
//       String pilote = "oracle.jdbc.driver.OracleDriver";
        DefaultTableModel model = new DefaultTableModel();
        conduiteTable.setModel(model); //affectation du model au tableau
        model.addColumn("Matricule");
        model.addColumn("Nom");
        model.addColumn("Prénom");
        model.addColumn("Sexe");
        model.addColumn("Conduite");
        TableColumn column, column1, column2, column3 = null;
        column = conduiteTable.getColumnModel().getColumn(0);
        column.setPreferredWidth(90); //
        column1 = conduiteTable.getColumnModel().getColumn(1);
        column1.setPreferredWidth(300); //
        column2 = conduiteTable.getColumnModel().getColumn(2);
        column2.setPreferredWidth(300); //
        column3 = conduiteTable.getColumnModel().getColumn(3);
        column3.setPreferredWidth(300); //
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery("select ELEVE_GP.ID_ELEVE, NOM_EL,PRENOM_EL,SEXE from ELEVE, ELEVE_GP, GROUP_PEDAG"
                    + " where ELEVE_GP.ID_ELEVE = ELEVE.ID_ELEVE "
                    + " and ELEVE_GP.ID_GROUP_PEDAG = GROUP_PEDAG.ID_GROUP_PEDAG"
                    + " and GROUP_PEDAG.LIB_GROUP_PEDAG = '" + classeComboBox.getSelectedItem().toString() + "'");
//            int i = 0;
            while (resultat.next()) {
                String idEl = resultat.getString("ID_ELEVE");
                String nomEl = resultat.getString("NOM_EL");
                String prenomEl = resultat.getString("PRENOM_EL");
                String sexeEl = resultat.getString("SEXE");
                model.addRow(new Object[]{idEl, nomEl, prenomEl, sexeEl});
//                i++;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur affichetableEleve: " + e);
        }
    }

    //méthode pour l'affichge du tableau Eleve'
    private void affichetableNoteCondiuteEleve(int idTrim, int idGp) {
        DefaultTableModel model = new DefaultTableModel();
        conduiteTable.setModel(model); //affectation du model au tableau
        model.addColumn("Matricule");
        model.addColumn("Nom");
        model.addColumn("Prénom");
        model.addColumn("Sexe");
        model.addColumn("Conduite");
        TableColumn column, column1, column2, column3 = null;
        column = conduiteTable.getColumnModel().getColumn(0);
        column.setPreferredWidth(90); //
        column1 = conduiteTable.getColumnModel().getColumn(1);
        column1.setPreferredWidth(300); //
        column2 = conduiteTable.getColumnModel().getColumn(2);
        column2.setPreferredWidth(300); //
        column3 = conduiteTable.getColumnModel().getColumn(3);
        column3.setPreferredWidth(300); //
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery("select Distinct MOY_20,ELEVE_GP.ID_ELEVE_GP, NOM_EL,PRENOM_EL,SEXE"
                    + " from ELEVE, ELEVE_GP, GROUP_PEDAG, BULLETIN_NOTE, DETAILS_BULLETIN, COEFFICIENT, MATIERE "
                    + " where DETAILS_BULLETIN.ID_BULLETIN = BULLETIN_NOTE.ID_BULLETIN "
                    + " and DETAILS_BULLETIN.ID_COEF = COEFFICIENT.ID_COEF "
                    + " and COEFFICIENT.ID_MATIERE = MATIERE.ID_MATIERE "
                    + " and MATIERE.LIB_MATIERE = '" + "Conduite" + "' "
                    + " and BULLETIN_NOTE.ID_TRIMES = '" + idTrim + "'"
                    + " and BULLETIN_NOTE.ID_ELEVE_GP = ELEVE_GP.ID_ELEVE_GP "
                    + " and ELEVE_GP.ID_GROUP_PEDAG =  '" + idGp + "'"
                    + " and ELEVE_GP.ID_ELEVE = ELEVE.ID_ELEVE ");
            while (resultat.next()) {
                String idEl = resultat.getString("ID_ELEVE_GP");
                String nomEl = resultat.getString("NOM_EL");
                String prenomEl = resultat.getString("PRENOM_EL");
                String sexeEl = resultat.getString("SEXE");
                double conduite = resultat.getDouble("MOY_20");
                model.addRow(new Object[]{idEl, nomEl, prenomEl, sexeEl, conduite});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur affichetableNoteCondiuteEleve: " + e);
        }
    }

    private void effacer() {
        conduiteTextField.setText("");
    }

    private void enregNotes() {

    }

    /*
     * ***********************************************
     * moyenneInterro() PERMET DE CALCULER LES MOYENNE* 
     *  D'INTERRO DANS UNE MATIERE                   *
     *************************************************
     */
    public double moyenneInterro(String int1, String int2, String int3, String int4) {
        int nbreInterro = 4;
        double moyInterro = 0.0;
        if (int1.equals("") && int2.equals("") && int3.equals("") && int4.equals("")) {
            moyInterro = -1;
        } else {
            if (int1.equals("")) {
                int1 = "0";
                nbreInterro--;
            }
            if (int2.equals("")) {
                int2 = "0";
                nbreInterro--;
            }
            if (int3.equals("")) {
                int3 = "0";
                nbreInterro--;
            }
            if (int4.equals("")) {
                int4 = "0";
                nbreInterro--;
            }
            moyInterro = (Double.parseDouble(int1) + Double.parseDouble(int2) + Double.parseDouble(int3) + Double.parseDouble(int4)) / nbreInterro;
        }
        System.out.println("Moyenne d'interrogation " + moyInterro);
        return moyInterro;
    }

    /*
     * *******************************************************************
     * moyenneMatiere() PERMET DE CALCULER LA MOYENNE D'UN ELEVE DANS UNE*
     * MATIERE                                                           * 
     *********************************************************************
     */
    public double moyenneMatiere(String noteDev, String noteCompo, double moyInterro) {
        double moyMatiere = 0;
        int diviseurMoy = 1;
        if (moyInterro == -1 && noteDev.equals("") && noteCompo.equals("")) {
            moyMatiere = -1;
        } else {
            diviseurMoy = 3;
            if (moyInterro == -1) {
                diviseurMoy--;
            }
            if (noteCompo.equals("")) {
                noteCompo = "0";
                diviseurMoy--;
            }
            if (noteDev.equals("")) {
                noteDev = "0";
                diviseurMoy--;
            }
            moyMatiere = (Double.parseDouble(noteCompo) + Double.parseDouble(noteDev) + moyInterro) / diviseurMoy;
        }
        return moyMatiere;
    }
    /*
     * *******************************************************************
     * moyenneMatiere() PERMET DE CALCULER LA MOYENNE D'UN ELEVE DANS UNE*
     * MATIERE                                                           * 
     *********************************************************************
     */

    public double moyenneCoefMatiere(int idCoef, String noteDev, String noteCompo, double moyInterro) {
        double moyMatiere = 0;
        int diviseurMoy = 1;
        if (moyInterro == -1 && noteDev.equals("") && noteCompo.equals("")) {
            moyMatiere = -1;
        } else {
            diviseurMoy = 3;
            if (moyInterro == -1) {
                diviseurMoy--;
            }
            if (noteCompo.equals("")) {
                noteCompo = "0";
                diviseurMoy--;
            }
            if (noteDev.equals("")) {
                noteDev = "0";
                diviseurMoy--;
            }
            moyMatiere = (Double.parseDouble(noteCompo) + Double.parseDouble(noteDev) + moyInterro) / diviseurMoy;
        }
        return moyMatiere;
    }

    public int returnIdGpByLibelleGpAndAnnee(int idAnnee, String libelleGp) {

        // Récupération de l'id de l'année à partir de son champ  ANNEE_DEBUT
        int idGp = 0;// Récupération de l'id du groupe pédagogique de l'élève sélectionné
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = ("select ELEVE_GP.ID_GROUP_PEDAG FROM ELEVE_GP, GROUP_PEDAG"
                + " where ELEVE_GP.ID_GROUP_PEDAG = GROUP_PEDAG.ID_GROUP_PEDAG"
                + " and GROUP_PEDAG.LIB_GROUP_PEDAG = '" + classeComboBox.getSelectedItem().toString() + "'"
                + " and ELEVE_GP.ID_ANNEE_SCOLAIRE= '" + idAnnee + "'");
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
            while (idGpTrouve.next()) {
                idGp = idGpTrouve.getInt("ID_GROUP_PEDAG");
            }
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdGpByLibelleGpAndAnnee : " + e);
        }
        return idGp;
    }

    public int returnIdElGpByEleveAndAnnee(int idAnnee, int idEleve) {

        // Récupération de l'id de l'année à partir de son champ  ANNEE_DEBUT
        int idElGp = 0;// Récupération de l'id du groupe pédagogique de l'élève sélectionné
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneidElGp = ("select ELEVE_GP.ID_ELEVE_GP FROM ELEVE_GP, BULLETIN_NOTE"
                + " where ELEVE_GP.ID_ELEVE_GP = BULLETIN_NOTE.ID_ELEVE_GP"
                + " and ELEVE_GP.ID_ANNEE_SCOLAIRE= '" + idAnnee + "'");
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idElGpTrouve = instruction.executeQuery(reqRameneidElGp);
            while (idElGpTrouve.next()) {
                idElGp = idElGpTrouve.getInt("ID_ELEVE_GP");
            }
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdElGpByEleveAndAnnee : " + e);
        }
        return idElGp;
    }

    public int returnIdGpByEleveGpByAnnee(int idElev, String anneeSelected) {

        // Récupération de l'id de l'année à partir de son champ  ANNEE_DEBUT
        int idGp = 0;// Récupération de l'id du groupe pédagogique de l'élève sélectionné
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select ID_GROUP_PEDAG  from  ELEVE_GP where ID_ELEVE_GP =  '" + idElev + "' and ID_ANNEE_SCOLAIRE = '" + anneeSelected + "' ";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
            while (idGpTrouve.next()) {
                idGp = idGpTrouve.getInt("ID_GROUP_PEDAG");
            }
//            JOptionPane.showMessageDialog(this, "ID GP " + idGp);
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdGpByEleveGpByAnnee: " + e);
        }
        return idGp;
    }

    public int returnIdSerieByElevGpByAnnee(int idGp) {

        // Récupération de l'id de l'année à partir de son champ  ANNEE_DEBUT
        int idSerie = 0;// Récupération de l'id du groupe pédagogique de l'élève sélectionné
        // Récupération de l'id de la série du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select ID_GROUP_PEDAG, ID_SERIE   from  GROUP_PEDAG where ID_GROUP_PEDAG =  '" + idGp + "' ";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
            while (idGpTrouve.next()) {
                idSerie = idGpTrouve.getInt("ID_SERIE");
            }
            JOptionPane.showMessageDialog(this, "ID Série " + idSerie);
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdSerieByElevGpByAnnee: " + e);
        }
        return idSerie;
    }

    public int returnIdPromoByEleveGpByAnnee(int idGp) {

        int idPromo = 0;
        // Récupération de l'id de la promotion du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select ID_GROUP_PEDAG, ID_PROMO  from  GROUP_PEDAG where ID_GROUP_PEDAG =  '" + idGp + "' ";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
            while (idGpTrouve.next()) {
                idPromo = idGpTrouve.getInt("ID_PROMO");
            }
            JOptionPane.showMessageDialog(this, "ID Promo " + idPromo);
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdPromoByEleveGpByAnnee: " + e);
        }
        return idPromo;
    }

    public int returnIdCoefByGpAndMat(int idGp, int idMat) {

        int idPromo = 0;
        int idSerie = 0;
        idSerie = returnIdSerieByElevGpByAnnee(idMat);
        idPromo = returnIdPromoByEleveGpByAnnee(idMat);
        JOptionPane.showMessageDialog(this, "idSerie retourné" + idSerie);
        JOptionPane.showMessageDialog(this, "idPromo retourné" + idPromo);
        // Récupération de l'id du coefficient de la matière choisie connaissant la promotion et la série
        int idCoef = 0;

//                String reqRameneCoef = "select *  from  COEFFICIENT where ID_MATIERE =  '" + idMat + "' and ID_SERIE = '" + idSerie + "' and ID_PROMO = '" + idPromo + "'  ";
        String reqRameneCoef = "select *  from  COEFFICIENT where ID_MATIERE =  '" + idMat + "' and ID_GROUP_PEDAG = '" + idGp + "'  ";

        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idCoefTrouve = instruction.executeQuery(reqRameneCoef);
            while (idCoefTrouve.next()) {
                idCoef = idCoefTrouve.getInt("ID_COEF");
            }
            JOptionPane.showMessageDialog(this, "ID ID_COEF " + idCoef);
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdCoefByGpAndMat: " + e);
        }
        return idCoef;
    }

    public int returnIdCoefByGpAndLibMat(int idGp, String libMatiere) {
        int idCoef = 0;
        String reqRameneCoef = "select ID_COEF  from  COEFFICIENT, MATIERE"
                + " where COEFFICIENT.ID_MATIERE =  MATIERE.ID_MATIERE "
                + " and LIB_MATIERE =  '" + libMatiere + "'"
                + " and ID_GROUP_PEDAG = '" + idGp + "'";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idCoefTrouve = instruction.executeQuery(reqRameneCoef);
            while (idCoefTrouve.next()) {
                idCoef = idCoefTrouve.getInt("ID_COEF");
            }
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdCoefByGpAndLibMat: " + e);
        }
        return idCoef;
    }

    public void insereCoefConduiteOfMatiereOfGp(int idGp, int idMat) {
        // Récupération de la matière depuis la table matiereTable;
        // Insertion d'un coefficient dans la table COEFFICIENT 
        String req1 = "insert into COEFFICIENT (VALEUR_COEF,ID_GROUP_PEDAG,ID_MATIERE) values ('" + 1 + "', '" + idGp + "','" + idMat + "')";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            int Conf = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment ajouter ce coefficient ?");
            if (Conf == 0) {
                instruction.executeQuery(req1);
                JOptionPane.showMessageDialog(this, "Enregistrement effectué avec succès");
//                        affichetableCoeffficient(idGp);
            } else {
                JOptionPane.showMessageDialog(this, "Enregistrement annulé");
            }
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
    }

    public boolean isLibMatiereInGp(int idGp, String libMatiere) {
        String libMat = "";
        boolean existe = false;
        String reqRameneCoef = "select LIB_MATIERE  from  COEFFICIENT, MATIERE"
                + " where COEFFICIENT.ID_MATIERE =  MATIERE.ID_MATIERE "
                + " and LIB_MATIERE =  '" + libMatiere + "'"
                + " and ID_GROUP_PEDAG = '" + idGp + "'";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idCoefTrouve = instruction.executeQuery(reqRameneCoef);
            while (idCoefTrouve.next()) {
                libMat = idCoefTrouve.getString("LIB_MATIERE");
                if (libMat.equalsIgnoreCase(libMatiere)) {
                    existe = true;
                }
            }
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "erreur returnIdCoefByGpAndLibMat: " + e);
        }
        return existe;
    }

    public int returnIdBulletinByEleveGpAndTrimes(String idEleveGp, String idTrimes) {
        String reqRameneBulletin = "select *  from BULLETIN_NOTE where ID_ELEVE_GP =  '" + idEleveGp + "' and ID_TRIMES = '" + idTrimes + "'";
        return 0;
    }

    public int returnIdDetailsBulletinByCoef(int idCoef) {
        String reqRameneDetailsBulletin = "select *  from  DETAILS_BULLETIN where ID_COEF =  '" + idCoef + "'";

        return 0;
    }

    public int returnIdDetailsBulletinByBullandCoef(int idBull, int idCoef) {
        String reqRameneidDetailsBulletin = "select *  from  DETAILS_BULLETIN "
                + "where ID_BULLETIN =  '" + idBull + "'"
                + "and ID_COEF =  '" + idCoef + "'";

        return 0;
    }

    public void insererConduite() {
        String req1 = "insert into MATIERE (LIB_MATIERE) values ('" + "Conduite" + "')";
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            instruction.executeQuery(req1);
            connexion.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur insererConduite : " + e);
        }
    }

    //méthode permettant de mettre la note de dev
    public void updateConduiteByIdBulAndIdCoef(double conduite, int idBull, int idCoef) {

        String req2 = "update DETAILS_BULLETIN set  MOY_20 = '" + conduite + "', MOY_COEF = '"+conduite+"' where   ID_BULLETIN ='" + idBull + "' and ID_COEF = '" + idCoef + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                instruction.executeQuery(req2);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);

        }
    }

//    public void insertionNoteConduite(double conduite,int idBulletin, int idCoef) {
//        String req1 = "insert into DETAILS_BULLETIN (MOY_20, ID_BULLETIN, ID_COEF) values ('" + conduite + "', '" + idBulletin + "', '" + idCoef + "')";
//    }

    /*
     * ***********************************************************************
     * LA METHODE onRowEditDuTableauNotes PERMET D'ENREGISTREMENT            *
     * D'UN ELEVE DANS UN NOMBRE DE MATIERE SOUHAITE                         *
     * ***********************************************************************
     */
    public boolean controlerSaisirNoteConduite(String cond) {
        boolean correct = true;
        if (cond.equals("")) {
            cond = "0";
        }
        if ((Double.parseDouble(cond) < 0 || Double.parseDouble(cond) > 20)) {
            correct = false;
        }
        return correct;
    }

    public int returnIdBulletinByEleveGpAndTrimes(int idEleveGp, int idTrimes) {
        int idBul = 0;
        String reqRameneBulletin = "select ID_BULLETIN  from BULLETIN_NOTE where ID_ELEVE_GP =  '" + idEleveGp + "' and ID_TRIMES = '" + idTrimes + "'";
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet idBulTrouve = instruction.executeQuery(reqRameneBulletin);
                while (idBulTrouve.next()) {
                    idBul = idBulTrouve.getInt("ID_BULLETIN");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur returnIdBulletinByEleveGpAndTrimes: " + e);
        }
        return idBul;
    }

    public int returnIdTrimestreByLibelleTrimestre(String libelleTrimestre, int idAnnee) {

        // Récupération de l'id du trimestre à partir de son libellé et de l'id de l'année
        String reqRameneIdTrimesAnnee = "select ID_TRIMES from TRIMESTRE where LIB_TRIMES =  '" + libelleTrimestre + "' and ID_ANNEE_SCOLAIRE = '" + idAnnee + "' ";

        int idTrimestre = 0;
        try {
            try (Connection connexion = Maconnexion.seconnecter();
                    Statement instruction = connexion.createStatement()) {
                ResultSet idTrimestreTrouve = instruction.executeQuery(reqRameneIdTrimesAnnee);
                while (idTrimestreTrouve.next()) {
                    idTrimestre = idTrimestreTrouve.getInt("ID_TRIMES");
                }
            }
        } catch (Exception e) {
        }
        return idTrimestre;
    }

    // Récupération de l'id de la matière à partir de son libellé
    public int returnIdMatiereByLibMatiere(String libMatiere) {
        int idMat = 0;
//        String conduite = "Conduite";
        String reqRameneIdConduite = "select * from Matiere where LIB_MATIERE =  '" + libMatiere + "' ";

        try {
            try (Connection connexion = Maconnexion.seconnecter()) {
                Statement instruction = connexion.createStatement();
                ResultSet idConduiteTrouve = instruction.executeQuery(reqRameneIdConduite);
                while (idConduiteTrouve.next()) {
                    idMat = idConduiteTrouve.getInt("ID_MATIERE");
                }
                //fermeture de la connexion
                instruction.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idMat;
    }

    //méthode pour l'affichge du tableau Eleve'
    private void affichetableEleve(int idGp, int idAnnee) {
        DefaultTableModel model = new DefaultTableModel();
        conduiteTable.setModel(model); //affectation du model au tableau
//        JOptionPane.showMessageDialog(this, " A l'entrée de la méthode  affichetableEleve");
        model.addColumn("N°");
        model.addColumn("Matricule");
        model.addColumn("Nom");
        model.addColumn("Prénom");
        model.addColumn("Sexe");
        model.addColumn("Né(e) le");
        model.addColumn("Né(e) à");
        model.addColumn("Inscrit(e) le");
        model.addColumn("N°");
        TableColumn column, column1, column2, column3, column4, column5, column6, column7, column8 = null;
        column = conduiteTable.getColumnModel().getColumn(0);
        column.setPreferredWidth(10); //
        column1 = conduiteTable.getColumnModel().getColumn(1);
        column1.setPreferredWidth(100); //
        column2 = conduiteTable.getColumnModel().getColumn(2);
        column2.setPreferredWidth(200); //
        column3 = conduiteTable.getColumnModel().getColumn(3);
        column3.setPreferredWidth(200); //
        column4 = conduiteTable.getColumnModel().getColumn(4);
        column4.setPreferredWidth(40); //
        column5 = conduiteTable.getColumnModel().getColumn(5);
        column5.setPreferredWidth(200); //
        column6 = conduiteTable.getColumnModel().getColumn(6);
        column6.setPreferredWidth(40); //
        column7 = conduiteTable.getColumnModel().getColumn(7);
        column7.setPreferredWidth(200); //
        column8 = conduiteTable.getColumnModel().getColumn(8);
        column8.setPreferredWidth(10); //
//        JOptionPane.showMessageDialog(this, " Juste avant le premier try ");
        try {
//            JOptionPane.showMessageDialog(this, " Juste après le premier try ");
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet resultat = instruction.executeQuery("select ELEVE_GP.ID_ELEVE_GP,ELEVE_GP.ID_ELEVE ,MATRICULE_EL, NOM_EL, PRENOM_EL, SEXE,DATE_NAIS,LIEU_NAIS,DATE_INSCRI"
                    + " from ELEVE, ELEVE_GP"
                    + " where ELEVE_GP.ID_ELEVE = ELEVE.ID_ELEVE "
                    + " and ELEVE_GP.ID_GROUP_PEDAG = '" + idGp + "'"
                    + " and ELEVE_GP.ID_ANNEE_SCOLAIRE = '" + idAnnee + "'");
//            int i = 0;                     + " and ELEVE_GP.ID_GROUP_PEDAG = GROUP_PEDAG.ID_GROUP_PEDAG"
//            JOptionPane.showMessageDialog(this, " Juste avant le while (resultat.next())");
            while (resultat.next()) {
//                JOptionPane.showMessageDialog(this, " Juste après le while (resultat.next())");
                String idEl = resultat.getString("ID_ELEVE_GP");
                String mleEl = resultat.getString("MATRICULE_EL");
                String nomEl = resultat.getString("NOM_EL");
//                JOptionPane.showMessageDialog(this, "MATRICULE_EL " + mleEl + "NOM_EL" + nomEl);
                String prenomEl = resultat.getString("PRENOM_EL");
                String sexeEl = resultat.getString("SEXE");
                String neLe = resultat.getString("DATE_NAIS");
                String neA = resultat.getString("LIEU_NAIS");
                String inscritLe = resultat.getString("DATE_INSCRI");
                String idElGP = resultat.getString("ID_ELEVE_GP");
                model.addRow(new Object[]{idEl, mleEl, nomEl, prenomEl, sexeEl, neLe, neA, inscritLe, idElGP});
//                i++;
            }
        } catch (HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, " Aucun élève inscrit dans cette classe " + e);
        }
    }

    public int returnIdGroupPedagByLibGp(String libGp) {
        // Récupération de l'id du groupe pédagogique de l'élève sélectionné
        String reqRameneGpEleve = "select *  from  GROUP_PEDAG where LIB_GROUP_PEDAG =  '" + libGp + "' ";
        int idGp = 0;
        try {
            Connection connexion = Maconnexion.seconnecter();
            Statement instruction = connexion.createStatement();
            ResultSet idGpTrouve = instruction.executeQuery(reqRameneGpEleve);
            while (idGpTrouve.next()) {
                idGp = idGpTrouve.getInt("ID_GROUP_PEDAG");
            }
            //fermeture de la connexion 
            instruction.close();
            connexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(this, "erreur: " + e);
        }
        return idGp;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConduiteGPJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConduiteGPJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConduiteGPJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConduiteGPJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConduiteGPJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox anneeComboBox;
    private javax.swing.JComboBox classeComboBox;
    private javax.swing.JTable conduiteTable;
    private javax.swing.JTextField conduiteTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonEnregistrer;
    private javax.swing.JButton jButtonEnregistrer1;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonFermer1;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonNouveau;
    private javax.swing.JButton jButtonNouveau1;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanelBoutons;
    private javax.swing.JPanel jPanelBoutons1;
    private javax.swing.JPanel jPanelChamps2;
    private javax.swing.JPanel jPanelChamps3;
    private javax.swing.JPanel jPanelEntete;
    private javax.swing.JPanel jPanelTableau;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox trimestreComboBox;
    // End of variables declaration//GEN-END:variables
}
